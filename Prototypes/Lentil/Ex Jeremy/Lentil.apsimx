{"$type":"Models.Core.Simulations, Models","Version":166,"Name":"Simulations","ResourceName":null,"Children":[{"$type":"Models.Storage.DataStore, Models","useFirebird":false,"CustomFileName":null,"Name":"DataStore","ResourceName":null,"Children":[{"$type":"Models.PostSimulationTools.ExcelInput, Models","FileNames":["Lentil Observed.xlsx"],"SheetNames":["ObservedHarvests","ObservedDaily"],"Name":"ExcelInput","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PostSimulationTools.PredictedObserved, Models","PredictedTableName":"Harvests","ObservedTableName":"ObservedHarvests","FieldNameUsedForMatch":"SimulationName","FieldName2UsedForMatch":null,"FieldName3UsedForMatch":null,"FieldName4UsedForMatch":null,"AllColumns":false,"Name":"HarvestObsPred","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Folder, Models","ShowInDocs":false,"GraphsPerPage":6,"Name":"Replacements","ResourceName":null,"Children":[{"$type":"Models.PMF.Plant, Models","PlantType":"Lentil","IsEnding":false,"DaysAfterEnding":0,"Name":"Lentil","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nThe APSIM Chickpea model has been developed from the original APSIM Chickpea model described by [robertson_simulation_2002] using the Plant Modelling Framework of [brown_plant_2014].\n\nNote to users:\nDesi and Kabuli chickpea are two subspecies of chickpea. The variety set includes both types. As indicated by Peake et al., 2021 (GRDC Updates), there was less confidence in predicting ","Name":"Introduction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.OrganArbitrator, Models","Name":"Arbitrator","ResourceName":null,"Children":[{"$type":"Models.PMF.BiomassTypeArbitrator, Models","Name":"DMArbitration","ResourceName":null,"Children":[{"$type":"Models.Core.Folder, Models","ShowInDocs":true,"GraphsPerPage":6,"Name":"PotentialPartitioningMethods","ResourceName":null,"Children":[{"$type":"Models.PMF.Arbitrator.ReallocationMethod, Models","Name":"ReallocationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Arbitrator.AllocateFixationMethod, Models","Name":"AllocateFixationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Arbitrator.RetranslocationMethod, Models","Name":"RetranslocationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Arbitrator.SendPotentialDMAllocationsMethod, Models","Name":"SendPotentialDMAllocationsMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Folder, Models","ShowInDocs":true,"GraphsPerPage":6,"Name":"AllocationMethods","ResourceName":null,"Children":[{"$type":"Models.PMF.Arbitrator.NutrientConstrainedAllocationMethod, Models","Name":"NutrientConstrainedAllocationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Arbitrator.DryMatterAllocationsMethod, Models","Name":"DryMatterAllocationsMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.RelativeAllocation, Models","Name":"ArbitrationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.BiomassTypeArbitrator, Models","Name":"NArbitration","ResourceName":null,"Children":[{"$type":"Models.Core.Folder, Models","ShowInDocs":true,"GraphsPerPage":6,"Name":"PotentialPartitioningMethods","ResourceName":null,"Children":[{"$type":"Models.PMF.Arbitrator.ReallocationMethod, Models","Name":"ReallocationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Folder, Models","ShowInDocs":true,"GraphsPerPage":6,"Name":"ActualPartitioningMethods","ResourceName":null,"Children":[{"$type":"Models.PMF.Arbitrator.AllocateFixationMethod, Models","Name":"AllocateFixationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Arbitrator.RetranslocationMethod, Models","Name":"RetranslocationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Folder, Models","ShowInDocs":true,"GraphsPerPage":6,"Name":"AllocationMethods","ResourceName":null,"Children":[{"$type":"Models.PMF.Arbitrator.NitrogenAllocationsMethod, Models","Name":"NitrogenAllocationsMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.RelativeAllocation, Models","Name":"ArbitrationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Arbitrator.AllocateUptakesMethod, Models","Name":"AllocateUptakesMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Arbitrator.WaterUptakeMethod, Models","Name":"WaterUptakeMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Arbitrator.NitrogenUptakeMethod, Models","Name":"NitrogenUptakeMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.Phenology, Models","Name":"Phenology","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookup, Models","Name":"ThermalTime","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Germination","End":"Emergence","Name":"PreEmergence","ResourceName":null,"Children":[{"$type":"Models.Functions.SubDailyInterpolation, Models","agregationMethod":0,"Name":"ThermalTime","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nThe cardinal temperatures for calculating thermal time have been taken from [SINGH199641] as used by [robertson_simulation_2002].","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.XYPairs, Models","X":[0,30,40],"Y":[0,30,0],"XVariableName":null,"Name":"Response","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.ThreeHourAirTemperature, Models","TempRangeFactors":null,"Name":"InterpolationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"HarvestRipe","Name":"Emerge_to_EndFlower","ResourceName":null,"Children":[{"$type":"Models.Functions.SubDailyInterpolation, Models","agregationMethod":0,"Name":"ThermalTime","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nThe cardinal temperatures for calculating thermal time have been taken from [SINGH199641] as used by [robertson_simulation_2002].","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.XYPairs, Models","X":[0,30,40],"Y":[0,30,30],"XVariableName":null,"Name":"Response","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.ThreeHourAirTemperature, Models","TempRangeFactors":null,"Name":"InterpolationMethod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhotoperiodFunction, Models","Twilight":-6,"DayLength":0,"Name":"Photoperiod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GerminatingPhase, Models","Start":"Sowing","End":"Germination","IsEmerged":false,"Name":"Germinating","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.EmergingPhase, Models","Start":"Germination","End":"Emergence","IsEmerged":true,"TTForTimeStep":0,"Name":"Emerging","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"Shoot lag = constant  \nShoot rate = multiplier on sowing depth (mm)  \n\nNote could be beneficial to set differently for large-seeded kabuli cultivars, which anecdotally seem to be slower emerging.  ","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"ThermalTime","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.AddFunction, Models","Name":"Target","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":120,"Units":null,"Name":"ShootLag","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"DepthxRate","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Plant].SowingData.Depth","Name":"SowingDepth","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.7,"Units":null,"Name":"ShootRate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GenericPhase, Models","Start":"Emergence","End":"EndJuvenille","IsEmerged":true,"Name":"Vegetative","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":400,"Units":"Degree Days","Name":"Target","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"Progression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GenericPhase, Models","Start":"EndJuvenille","End":"StartBudding","IsEmerged":true,"Name":"FloralInitiation","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nThis phase simulates the time between end of the Non-inductive phase of [robertson_simulation_2002] (515 TT) and the appearance of visible buds on petioles","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":250,"Units":"thermal time","Name":"Target","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"Progression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GenericPhase, Models","Start":"StartBudding","End":"StartFlowering","IsEmerged":true,"Name":"Budding","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nThis phase encompasses the budding phase. All photoperiod response is currently contained here although in reality probably carries across LateVeg as well as this one","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"Progression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"Target","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[10,12.43,17],"Y":[501.6,50,50],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].EndJuv_PhotoPeriod","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GenericPhase, Models","Start":"StartFlowering","End":"EndFlowering","IsEmerged":true,"Name":"Flowering","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nMinimum thermal time target for duration of flowers prior to pod initiation. ","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"Progression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":100,"Units":null,"Name":"Target","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GenericPhase, Models","Start":"EndFlowering","End":"EndPodInitiation","IsEmerged":true,"Name":"PodInitiation","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\n Requires 5 days of temp above 16 degrees (or ten days at 15 degrees) before 1cm pods are visible, due to sensitivity of pod initiation to mean daily temperature (see Srinivasan et al. 1998; Clarke and Siddique, 2004). These days may accumulate anytime after flowering begins (i.e. during previous growth stage as well as during the current one). so the 'EndFloweringPodStartTT' is subtracted from the 5 days target","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].PodStartTT","Name":"Progression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.SubtractFunction, Models","Name":"Target","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":5,"Units":null,"Name":"Total","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].EndFloweringPodStartTT","Name":"EndFloweringPodStartTT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GenericPhase, Models","Start":"EndPodInitiation","End":"MidGrainFilling","IsEmerged":true,"Name":"EarlyGrainFilling","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nFunction shortens the available TT for grainfilling when there is a big gap between beginning of flowering and beginning of pod initiaton\n\nCan't be less than zero for obvious reasons","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"Progression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MaximumFunction, Models","Name":"Target","ResourceName":null,"Children":[{"$type":"Models.Functions.SubtractFunction, Models","Name":"Reducer","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":300,"Units":null,"Name":"Max","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DivideFunction, Models","Name":"Adjust","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].TotalPodInitTT","Name":"TotalPodInitTT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":2,"Units":null,"Name":"Total","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"constant_zero","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GenericPhase, Models","Start":"MidGrainFilling","End":"LateGrainFilling","IsEmerged":true,"Name":"MidGrainFilling","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"Progression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":250,"Units":null,"Name":"Target","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GenericPhase, Models","Start":"LateGrainFilling","End":"EndGrainFill","IsEmerged":true,"Name":"LateGrainFilling","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"Progression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":250,"Units":null,"Name":"Target","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GenericPhase, Models","Start":"EndGrainFill","End":"Maturity","IsEmerged":true,"Name":"Maturing","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nThe duration of the Maturing phase has been taken from the model of [robertson_simulation_2002].","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":60,"Units":null,"Name":"Target","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"Progression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.GenericPhase, Models","Start":"Maturity","End":"HarvestRipe","IsEmerged":true,"Name":"Ripening","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":60,"Units":null,"Name":"Target","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"Progression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Phen.EndPhase, Models","Start":"HarvestRipe","End":"Unused","IsEmerged":true,"Name":"ReadyForHarvesting","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"ThermalTime","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"StartBudding","ReSetEvent":"never","Name":"BuddingDAS","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nA function is used to provide flowering date as days after sowing(DAS).","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Plant].DaysAfterSowing","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"StartFlowering","ReSetEvent":"never","Name":"FloweringDAS","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nA function is used to provide flowering date as days after sowing(DAS).","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Plant].DaysAfterSowing","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"Maturity","ReSetEvent":"never","Name":"MaturityDAS","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nA function is used to provide maturity date as days after sowing(DAS).","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Plant].DaysAfterSowing","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"Emergence","ReSetEvent":"never","Name":"EmergenceDAS","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nA function is used to provide maturity date as days after sowing(DAS).","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Plant].DaysAfterSowing","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"EndBudding","ReSetEvent":"never","Name":"EndBuddingMSLeafNo","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nA function is used to provide leaf number at end of flowering as a reference point for reducing maximum leaf size during grainfilling","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].LeafTipsAppeared","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"EndFlowering","ReSetEvent":"never","Name":"EndFloweringMSLeafNo","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nA function is used to provide leaf number at end of flowering as a reference point for reducing maximum leaf size during grainfilling","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].LeafTipsAppeared","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DivideFunction, Models","Name":"MeanTemp","ResourceName":null,"Children":[{"$type":"Models.Functions.AddFunction, Models","Name":"TempSum","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Weather].MaxT","Name":"MaxT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Weather].MinT","Name":"MinT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":2,"Units":null,"Name":"Two","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.AccumulateFunction, Models","StartStageName":"Emergence","EndStageName":"EndGrainFill","ResetStageName":null,"FractionRemovedOnCut":0,"FractionRemovedOnHarvest":0,"FractionRemovedOnGraze":0,"FractionRemovedOnPrune":0,"Name":"RadDegDays","ResourceName":null,"Children":[{"$type":"Models.Functions.DivideFunction, Models","Name":"RDD","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Weather].Radn","Name":"Rad","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"TT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"StartBudding","ReSetEvent":"never","Name":"StartBudSoilT","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Soil].Temperature.Value[1]","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"StartBudding","ReSetEvent":"never","Name":"StartBudding_PhotoPeriod","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":15,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].Photoperiod.DayLength","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"EndPodInitiation","ReSetEvent":"never","Name":"PoddingDAS","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nA function is used to provide podding date as days after sowing(DAS).","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Plant].DaysAfterSowing","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"EndJuvenille","ReSetEvent":"never","Name":"EndJuv_PhotoPeriod","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":12,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].Photoperiod.DayLength","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"PodStartTT","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Germination","End":"StartFlowering","Name":"PreFlower","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PodStartTT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"HarvestRipe","Name":"PostFlower","ResourceName":null,"Children":[{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"PodStartTT","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,14,16],"Y":[0,0,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].MeanTemp","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"AccumPodStartTT","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Germination","End":"StartFlowering","Name":"PreFlowering","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PodStartTT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"HarvestRipe","Name":"FloweringtoMaturity","ResourceName":null,"Children":[{"$type":"Models.Functions.AccumulateFunction, Models","StartStageName":"StartFlowering","EndStageName":"Maturity","ResetStageName":null,"FractionRemovedOnCut":0,"FractionRemovedOnHarvest":0,"FractionRemovedOnGraze":0,"FractionRemovedOnPrune":0,"Name":"PodStartTTsum","ResourceName":null,"Children":[{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"PodStartTT","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,14,16],"Y":[0,0,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].MeanTemp","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"EndFlowering","ReSetEvent":null,"Name":"StartPodInitTT","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].AccumulatedTT","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"EndPodInitiation","ReSetEvent":null,"Name":"EndPodInitTT","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].AccumulatedTT","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"StartFlowering","ReSetEvent":null,"Name":"StartFloweringPodStartTT","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].AccumPodStartTT","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"EndFlowering","ReSetEvent":null,"Name":"EndFloweringPodStartTT","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].AccumPodStartTT","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.SubtractFunction, Models","Name":"TotalPodInitTT","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nShortens TT for grainfilling when there is a big gap between beginning of flowering and beginning of pod initiaton","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].EndPodInitTT","Name":"EndPodInitTT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].StartPodInitTT","Name":"StartPodInitTT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.OnEventFunction, Models","SetEvent":"EndFlowering","ReSetEvent":"never","Name":"EndFloweringNodeLeafArea","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nA function is used to provide leaf number at end of flowering as a reference point for reducing maximum leaf size during grainfilling","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"PreEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea","Name":"PostEventValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.SubtractFunction, Models","Name":"PostFloweringMSLeafNo","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nShortens TT for grainfilling when there is a big gap between beginning of flowering and beginning of pod initiaton","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].LeafTipsAppeared","Name":"MSLeafNo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].EndFloweringMSLeafNo","Name":"EndFloweringMSL","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Struct.Structure, Models","CohortInitialisationStage":"Germination","LeafInitialisationStage":"Emergence","Name":"Structure","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"ThermalTime","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"DroughtInducedBranchMortality","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":40,"Units":null,"Name":"FinalLeafNumber","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"HeightModel","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,50,300],"Y":[10,200,750],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].Wt","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"BranchingRate","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nCover response as per soybean","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"Potential_Branching_Rate","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Germination","End":"Emergence","Name":"PreEmergence","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"EndPodInitiation","Name":"Vegetative","ResourceName":null,"Children":[{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"MaxBranchRate","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\n[robertson_simulation_2002] used a maximum leaf size of 300 mm2 for the first 9 leaves and 600 mm2 thereafter.","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.XYPairs, Models","X":[0,1,2,3,4,5,12,13,20,21],"Y":[0,2,2,1,1,1,1,1,1,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].LeafTipsAppeared","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndPodInitiation","End":"Maturity","Name":"PostFlowering","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"BranchModifier","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"StartBudding","Name":"EarlyVegetative","ResourceName":null,"Children":[{"$type":"Models.Functions.MinimumFunction, Models","Name":"EarlyVeg","ResourceName":null,"Children":[{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"Cover_response","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.5,0.7,0.8,0.9],"Y":[1,1,1,1,0.2,0,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].CoverGreen","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"WaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.7,0.8,1],"Y":[0,0,0,0,0.4,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"TempResponse","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[4,6,9,10,30,35],"Y":[0,0.5,1,1,1,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Weather].MeanT","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartBudding","End":"StartFlowering","Name":"FloralInitiation","ResourceName":null,"Children":[{"$type":"Models.Functions.MinimumFunction, Models","Name":"LateVeg","ResourceName":null,"Children":[{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"WaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.7,0.8,1],"Y":[0,0,0,0,0.4,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"TempResponse","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[4,6,9,10,30,35],"Y":[0,0.5,1,1,1,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Weather].MeanT","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"EndPodInitiation","Name":"Flowering","ResourceName":null,"Children":[{"$type":"Models.Functions.MinimumFunction, Models","Name":"FlowerResponse","ResourceName":null,"Children":[{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"WaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.7,0.8,1],"Y":[0,0,0,0,0.4,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"TempResponse","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[4,6,9,10,30,35],"Y":[0,0.5,1,1,1,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Weather].MeanT","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndPodInitiation","End":"MidGrainFilling","Name":"EarlyGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"MidGrainFilling","End":"LateGrainFilling","Name":"MidGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"LateGrainFilling","End":"EndGrainFill","Name":"LateGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"BranchMortality","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"Phyllochron","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nWater stress impacts on phyllocron during grainfilling as per Peake et al. 2020. May impact on earlier growth stages so other stages made available for modification in future.\n\n","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Germination","End":"Emergence","Name":"PreEmergence","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"EndFlowering","Name":"CanopyDevelopment","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].NodeAppearanceRate","Name":"NodeAppearanceRate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndFlowering","End":"MidGrainFilling","Name":"EarlyGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.DivideFunction, Models","Name":"DivideFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].NodeAppearanceRate","Name":"NodeAppearanceRate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"WaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.6,0.8,1],"Y":[0,0,0.15,0.5,0.95,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"MidGrainFilling","End":"LateGrainFilling","Name":"MidGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.DivideFunction, Models","Name":"DivideFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].NodeAppearanceRate","Name":"NodeAppearanceRate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"WaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.6,0.8,1],"Y":[0,0,0.15,0.5,0.95,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"LateGrainFilling","End":"EndGrainFill","Name":"LateGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.DivideFunction, Models","Name":"DivideFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].NodeAppearanceRate","Name":"NodeAppearanceRate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"WaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.6,0.8,1],"Y":[0,0,0.15,0.5,0.95,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"NodeAppearanceRate","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[1,2,3,4,30],"Y":[20,20,20,50,50],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Memo, Models","Text":"\r\nOne node every 20 Degree Days for first 3 nodes. After this then reverts to 50 Degree Days for each subsequent node\n\nOperating during both vegetative and flowering phases.\n\n","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].LeafTipsAppeared","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"StemSenescenceAge","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DivideFunction, Models","Name":"LAIperBranch","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].LAI","Name":"LAI","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].BranchNumber","Name":"Branches","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DivideFunction, Models","Name":"PhotoSynthPerBranch","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].Photosynthesis","Name":"Photosynthesis","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].TotalStemPopn","Name":"Branches","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"EVCover_response","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.5,0.7,0.8,0.9],"Y":[1,1,1,1,0.2,0,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].CoverGreen","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"FICover_response","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.5,0.7,0.8,0.9],"Y":[1,1,1,1,0.2,0,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].CoverGreen","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"EVWaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.7,0.8,1],"Y":[0,0,0,0,0.4,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"FIWaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.7,0.8,1],"Y":[0,0,0,0,0.4,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"EVTempResponse","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[4,6,9,10,30,35],"Y":[0,0.5,1,1,1,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Weather].MeanT","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"FITempResponse","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[4,6,9,10,30,35],"Y":[0,0.5,1,1,1,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Weather].MeanT","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Organs.ReproductiveOrgan, Models","GrowthRespiration":0,"MaintenanceRespiration":0,"DMDemand":null,"NDemand":null,"DMSupply":null,"NSupply":null,"RipeStage":null,"potentialDMAllocation":null,"Live":{"$type":"Models.PMF.Biomass, Models","Name":"Biomass","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},"Dead":{"$type":"Models.PMF.Biomass, Models","Name":"Biomass","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},"Name":"Grain","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.5,"Units":null,"Name":"PotentialHarvestIndex","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.AddFunction, Models","Name":"FillingDuration","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].EarlyGrainFilling.Target","Name":"EarlyGrainFillingDuration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].MidGrainFilling.Target","Name":"MidGrainFillingDuration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].LateGrainFilling.Target","Name":"LateGrainFillingDuration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.25,"Units":null,"Name":"MaximumPotentialGrainSize","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"DMDemandFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndPodInitiation","End":"HarvestRipe","Name":"GrainFilling","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"HIGrainDemand","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[AboveGround].Wt","Name":"AboveGroundWt","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DivideFunction, Models","Name":"HarvestIndexIncrease","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Grain].PotentialHarvestIndex","Name":"PotentialHarvestIndex","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Grain].FillingDuration","Name":"FillingDuration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"ThermalTime","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.02,"Units":null,"Name":"MinimumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.04,"Units":null,"Name":"MaximumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.12,"Units":null,"Name":"WaterContent","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"NumberFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"PeasPerPod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].PodNumber","Name":"PodNumber","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Library.BiomassRemoval, Models","HarvestFractionLiveToRemove":1,"HarvestFractionDeadToRemove":0,"HarvestFractionLiveToResidue":0,"HarvestFractionDeadToResidue":0,"Name":"BiomassRemovalDefaults","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.89,"Units":null,"Name":"DMConversionEfficiency","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"RemobilisationCost","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"NFillingRate","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Grain].MaximumNConc","Name":"NConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Grain].DMDemandFunction","Name":"DMDemand","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Grain].DMConversionEfficiency","Name":"DMConversionEfficiency","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.4,"Units":null,"Name":"CarbonConcentration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DivideFunction, Models","Name":"HarvestIndex","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Grain].Wt","Name":"GrainWt","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[AboveGround].Wt","Name":"AboveGroundWt","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[AboveGround].Wt","Name":"AboveGroundWt","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientPoolFunctions, Models","Name":"DMDemandPriorityFactors","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Structural","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Storage","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientPoolFunctions, Models","Name":"NDemandPriorityFactors","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Structural","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Storage","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Organs.Root, Models","DMSupply":null,"NSupply":null,"DMDemand":null,"NDemand":null,"potentialDMAllocation":null,"GrowthRespiration":0,"MaintenanceRespiration":0,"Name":"Root","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"Minimal root biomass has been simulated. It appears to interfere with simulation of stem biomass (arbitrator).","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.RootShape.RootShapeCylinder, Models","Name":"RootShape","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"KLModifier","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Germination","End":"Emergence","Name":"PreEmergence","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.1,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"EndFlowering","Name":"PreCanopyDevelopment","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].klComboeffects","Name":"klTTfactor1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndFlowering","End":"Maturity","Name":"PostCanopyDevelopment","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"Soil data at Kulai and ICRISAT suggests wider row spacing and late sowing can catch up with kl - so allow the function to continue post flowering","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].klComboeffects","Name":"klTTfactor1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":6,"Units":null,"Name":"MaxDailyNUptake","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.005,"Units":null,"Name":"SenescenceRate","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\n","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1000000,"Units":null,"Name":"MaximumRootDepth","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"RootFrontVelocity","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Germination","End":"Emergence","Name":"PreEmergence","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":3,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"StartFlowering","Name":"early","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":15,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"Maturity","Name":"late","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":17,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.01,"Units":null,"Name":"MaximumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.005,"Units":null,"Name":"MinimumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"EndGrainFill","Name":"NitrogenDemandSwitch","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Constant","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Library.BiomassRemoval, Models","HarvestFractionLiveToRemove":0,"HarvestFractionDeadToRemove":0,"HarvestFractionLiveToResidue":0.2,"HarvestFractionDeadToResidue":0,"Name":"BiomassRemovalDefaults","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.02,"Units":null,"Name":"KNO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"KNH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"NUptakeSWFactor","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,1],"Y":[0,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].RWC","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":40,"Units":"m/g","Name":"SpecificRootLength","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"DMConversionEfficiency","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"MaintenanceRespirationFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"RemobilisationCost","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.4,"Units":null,"Name":"CarbonConcentration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientDemandFunctions, Models","Name":"DMDemands","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Structural","ResourceName":null,"Children":[{"$type":"Models.Functions.DemandFunctions.PartitionFractionDemandFunction, Models","Name":"DMDemandFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookup, Models","Name":"PartitionFraction","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"StartFlowering","Name":"Early","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.2,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartBudding","End":"StartFlowering","Name":"Middle","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.2,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"Maturity","Name":"Late","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"StructuralFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DemandFunctions.StorageDMDemandFunction, Models","Name":"Storage","ResourceName":null,"Children":[{"$type":"Models.Functions.SubtractFunction, Models","Name":"StorageFraction","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"One","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].DMDemands.Structural.StructuralFraction","Name":"StructuralFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStructuralPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QMetabolicPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStoragePriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientDemandFunctions, Models","Name":"NDemands","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Structural","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].minimumNconc","Name":"MinNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].potentialDMAllocation.Structural","Name":"PotentialDMAllocation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Metabolic","ResourceName":null,"Children":[{"$type":"Models.Functions.SubtractFunction, Models","Name":"MetabolicNconc","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].criticalNConc","Name":"CritNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].minimumNconc","Name":"MinNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].potentialDMAllocation.Structural","Name":"PotentialDMAllocation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DemandFunctions.StorageNDemandFunction, Models","Name":"Storage","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].nitrogenDemandSwitch","Name":"NitrogenDemandSwitch","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].maximumNconc","Name":"MaxNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStructuralPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QMetabolicPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStoragePriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DivideFunction, Models","Name":"SurfaceWaterAvailability","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Soil].SoilWater.PAWmm[1]","Name":"PAW","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Soil].Physical.PAWCmm[1]","Name":"PAWC","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DivideFunction, Models","Name":"WithinRowSpaceFactor","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1000,"Units":"mm per 1m of row","Name":"Constant","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Lentil].SowingData.RowSpacing","Name":"RowSpacing","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Lentil].SowingData.Population","Name":"Population","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.001,"Units":"","Name":"Constant1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"KLComboeffects","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].KLBiomMod","Name":"Biommod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].klPopMultiplier","Name":"klpopmod2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].klRowSpaceMultiplier","Name":"klRSmod2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"KLBiomMod","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,200,350,500,700],"Y":[0.1,0.6,1,1.1,1.2],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Lentil].AboveGround.Wt","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"KLPopMultiplier","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[10,20,40,60,80],"Y":[0.8,0.9,1,1.1,1.2],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Lentil].SowingData.Population","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"KLRowSpaceMultiplier","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,200,350,500,1000],"Y":[1.05,1.05,1,0.95,0.8],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Lentil].SowingData.RowSpacing","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Root].MinimumNConc","Name":"CriticalNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientPoolFunctions, Models","Name":"InitialWt","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.2,"Units":"g/plant","Name":"Structural","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Storage","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Organs.GenericOrgan, Models","StartLive":null,"DMSupply":null,"NSupply":null,"DMDemand":null,"NDemand":null,"potentialDMAllocation":null,"IsAboveGround":true,"Name":"Shell","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"PodNumber","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":2,"Units":null,"Name":"PodsPerNode","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].TotalStemPopn","Name":"StemPopulation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"NReallocationFactor","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.5,"Units":null,"Name":"NRetranslocationFactor","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.02,"Units":null,"Name":"MaximumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].MinimumNConc","Name":"CriticalNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.007,"Units":null,"Name":"MinimumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.5,"Units":null,"Name":"DMRetranslocationFactor","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"DMReallocationFactor","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Germination","End":"Maturity","Name":"NitrogenDemandSwitch","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Constant","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Library.BiomassRemoval, Models","HarvestFractionLiveToRemove":0.5,"HarvestFractionDeadToRemove":0,"HarvestFractionLiveToResidue":0.1,"HarvestFractionDeadToResidue":0,"Name":"BiomassRemovalDefaults","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":"/d","Name":"DetachmentRateFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":"0-1","Name":"MaintenanceRespirationFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":"0-1","Name":"DMConversionEfficiency","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"RemobilisationCost","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.4,"Units":null,"Name":"CarbonConcentration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.2,"Units":null,"Name":"PotentialHarvestIndex","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientDemandFunctions, Models","Name":"DMDemands","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Structural","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookup, Models","Name":"DMDemandFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndPodInitiation","End":"MidGrainFilling","Name":"PodDevelopment","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"HIPodDemand","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[AboveGround].Wt","Name":"AboveGroundWt","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DivideFunction, Models","Name":"HarvestIndexIncrease","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].PotentialHarvestIndex","Name":"PotentialHarvestIndex","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].FillingDuration","Name":"FillingDuration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"ThermalTime","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":"g/g","Name":"StructuralFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DemandFunctions.StorageDMDemandFunction, Models","Name":"Storage","ResourceName":null,"Children":[{"$type":"Models.Functions.SubtractFunction, Models","Name":"StorageFraction","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"One","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].DMDemands.Structural.StructuralFraction","Name":"StructuralFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStructuralPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QMetabolicPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStoragePriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.AddFunction, Models","Name":"FillingDuration","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].EarlyGrainFilling.Target","Name":"EarlyGrainFillingDuration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].MidGrainFilling.Target","Name":"MidGrainFillingDuration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].MidGrainFilling.Target","Name":"LateGrainFillingDuration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientDemandFunctions, Models","Name":"NDemands","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Structural","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].minimumNconc","Name":"MinNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].potentialDMAllocation.Structural","Name":"PotentialDMAllocation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Metabolic","ResourceName":null,"Children":[{"$type":"Models.Functions.SubtractFunction, Models","Name":"MetabolicNconc","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].criticalNConc","Name":"CritNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].minimumNconc","Name":"MinNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].potentialDMAllocation.Structural","Name":"PotentialDMAllocation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DemandFunctions.StorageNDemandFunction, Models","Name":"Storage","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].nitrogenDemandSwitch","Name":"NitrogenDemandSwitch","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].maximumNconc","Name":"MaxNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStructuralPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QMetabolicPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStoragePriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.RetranslocateNonStructural, Models","Name":"RetranslocateNitrogen","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientPoolFunctions, Models","Name":"InitialWt","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":"g/m^2","Name":"Structural","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Storage","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"SenescenceRate","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"MidGrainFilling","End":"Maturity","Name":"ReproductivePhase","ResourceName":null,"Children":[{"$type":"Models.Functions.MinimumFunction, Models","Name":"Rate","ResourceName":null,"Children":[{"$type":"Models.Functions.DivideFunction, Models","Name":"Fraction","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"TT","ResourceName":null,"Children":[{"$type":"Models.Functions.SubtractFunction, Models","Name":"TTRemaining","ResourceName":null,"Children":[{"$type":"Models.Functions.ExpressionFunction, Models","Expression":"[Phenology].MidGrainFilling.Target+[Phenology].LateGrainFilling.Target","Name":"ReproductiveTT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.ExpressionFunction, Models","Expression":"[Phenology].MidGrainFilling.ProgressThroughPhase+[Phenology].LateGrainFilling.ProgressThroughPhase","Name":"ReproductiveTT1Complete","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"One","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Photosynthesis","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Shell].MinimumNConc","Name":"InitialNConcFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Organs.Leaf, Models","Leaves":[],"CurrentExpandingLeaf":0,"StartFractionExpanded":0,"FractionNextleafExpanded":0,"DeadNodesYesterday":0,"MaxCover":1,"GrowthRespiration":0,"DMSupply":null,"NSupply":null,"DMDemand":null,"NDemand":null,"potentialDMAllocation":null,"Albedo":0.25,"Gsmax350":0.015,"R50":150,"LAI":0,"Depth":0,"Width":0,"PotentialEP":0,"WaterDemand":0,"LightProfile":null,"KDead":0.3,"MaximumMainStemLeafNumber":40,"TipsAtEmergence":0,"CohortsAtInitialisation":0,"FractionDied":0,"Name":"Leaf","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"Dead leaf ext coeff - may need to be higher than 0.3 - chickpea holds its shape pretty well when dead\n\r\n\n","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Organs.LeafCohort, Models","ApexCohort":null,"LiveStart":null,"NReallocationFactor":0,"DMReallocationFactor":0,"NRetranslocationFactor":0,"DMRetranslocationFactor":0,"ShadeInducedSenRate":0,"SenescedFrac":0,"DeltaPotentialArea":0,"DeltaStressConstrainedArea":0,"DeltaCarbonConstrainedArea":0,"PotentialStructuralDMAllocation":0,"PotentialMetabolicDMAllocation":0,"MetabolicNReallocated":0,"MetabolicWtReallocated":0,"StorageNReallocated":0,"StorageWtReallocated":0,"MetabolicNRetranslocated":0,"StorageNRetrasnlocated":0,"DMRetranslocated":0,"MetabolicNAllocation":0,"StructuralDMAllocation":0,"MetabolicDMAllocation":0,"Rank":1,"Area":50,"Name":"InitialLeaf1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Organs.LeafCohort, Models","ApexCohort":null,"LiveStart":null,"NReallocationFactor":0,"DMReallocationFactor":0,"NRetranslocationFactor":0,"DMRetranslocationFactor":0,"ShadeInducedSenRate":0,"SenescedFrac":0,"DeltaPotentialArea":0,"DeltaStressConstrainedArea":0,"DeltaCarbonConstrainedArea":0,"PotentialStructuralDMAllocation":0,"PotentialMetabolicDMAllocation":0,"MetabolicNReallocated":0,"MetabolicWtReallocated":0,"StorageNReallocated":0,"StorageWtReallocated":0,"MetabolicNRetranslocated":0,"StorageNRetrasnlocated":0,"DMRetranslocated":0,"MetabolicNAllocation":0,"StructuralDMAllocation":0,"MetabolicDMAllocation":0,"Rank":2,"Area":100,"Name":"InitialLeaf2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Organs.LeafCohort, Models","ApexCohort":null,"LiveStart":null,"NReallocationFactor":0,"DMReallocationFactor":0,"NRetranslocationFactor":0,"DMRetranslocationFactor":0,"ShadeInducedSenRate":0,"SenescedFrac":0,"DeltaPotentialArea":0,"DeltaStressConstrainedArea":0,"DeltaCarbonConstrainedArea":0,"PotentialStructuralDMAllocation":0,"PotentialMetabolicDMAllocation":0,"MetabolicNReallocated":0,"MetabolicWtReallocated":0,"StorageNReallocated":0,"StorageWtReallocated":0,"MetabolicNRetranslocated":0,"StorageNRetrasnlocated":0,"DMRetranslocated":0,"MetabolicNAllocation":0,"StructuralDMAllocation":0,"MetabolicDMAllocation":0,"Rank":3,"Area":150,"Name":"InitialLeaf3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Organs.Leaf+LeafCohortParameters, Models","ExpansionStressValue":0,"CellDivisionStressValue":0,"LagAccelerationValue":0,"SenescenceAccelerationValue":0,"ShadeInducedSenescenceRateValue":0,"SenessingLeafRelativeSizeValue":0,"Name":"LeafCohortParameters","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookup, Models","Name":"StorageFraction","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"StartFlowering","Name":"Vegetative_to_Flowering","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"EndPodInitiation","Name":"Flowering","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndPodInitiation","End":"EndGrainFill","Name":"Grainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"StructuralFraction","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"StartFlowering","Name":"Vegetative_to_Flowering","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.99,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"EndPodInitiation","Name":"Flowering","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.99,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndPodInitiation","End":"EndGrainFill","Name":"Grainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.99,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":"0-1","Name":"SenessingLeafRelativeSize","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"MaxArea","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Germination","End":"Emergence","Name":"PreEmergence","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"MaxArea","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"EndFlowering","Name":"Vegetative_to_Flowering","ResourceName":null,"Children":[{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"MaxArea","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nIs accumulated across all leaves that appear within a single phyllocron, so it ultimately depends on maximum branching rate","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.XYPairs, Models","X":[1,5,10,13,19,23,27,35,41],"Y":[50,255,466,550,1100,1250,1150,435,200],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].LeafTipsAppeared","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndFlowering","End":"Maturity","Name":"Flowering_to_Maturity","ResourceName":null,"Children":[{"$type":"Models.Functions.MinimumFunction, Models","Name":"MinimumFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"MaxArea","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[1,4,12,18],"Y":[1250,1150,435,200],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].PostFloweringMSLeafNo","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].EndFloweringNodeLeafArea","Name":"PreFlowerMaxLA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"GrowthDuration","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":4,"Units":null,"Name":"Multiplier","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].Phyllochron","Name":"Phyllochron","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"LagDuration","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":18,"Units":null,"Name":"Multiplier","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].Phyllochron","Name":"Phyllochron","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"SenescenceDuration","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":2,"Units":null,"Name":"Multiplier","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Structure].Phyllochron","Name":"Phyllochron","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1000000,"Units":null,"Name":"DetachmentLagDuration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":46,"Units":null,"Name":"DetachmentDuration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"SpecificLeafAreaMax","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,2000],"Y":[22000,15000],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].AccumulatedTT","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"SpecificLeafAreaMin","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,2000],"Y":[20000,14000],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].AccumulatedTT","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MinimumFunction, Models","Name":"ExpansionStress","ResourceName":null,"Children":[{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"WaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,1],"Y":[0,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"TemperatureEffect","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,12,14,25,30,40],"Y":[0,1,1,1,1,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].MeanTemp","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"Cover_response","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.4,0.5,1],"Y":[1,1,1,0.2],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].CoverGreen","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MinimumFunction, Models","Name":"CellDivisionStress","ResourceName":null,"Children":[{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"Cover_response","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.2,0.4,0.5,0.6,0.8,1],"Y":[1,1,1,1,1,0.3,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].CoverGreen","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"WaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,1],"Y":[0,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.02,"Units":null,"Name":"MinimumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.05,"Units":null,"Name":"CriticalNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.08,"Units":null,"Name":"MaximumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.3,"Units":null,"Name":"NReallocationFactor","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.1,"Units":null,"Name":"NRetranslocationFactor","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"Retranslocation = movement of reserves out of live organs.\nReallocation = from senesced organs\n\nStorage fraction decides how much is available to be moved, while these decide what proportion can be moved each day","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"DMReallocationFactor","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\nReallocation = from senesced organs, fraction that can be moved per day\n\n","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.3,"Units":null,"Name":"DMRetranslocationFactor","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"Retranslocation = movement of reserves out of live organs, what proportion can be moved each day","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"ShadeInducedSenescenceRate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.08,"Units":null,"Name":"InitialNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.01,"Units":null,"Name":"LeafSizeShapeParameter","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"MaintenanceRespirationFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"LagAcceleration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"SenescenceAcceleration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":"0-1","Name":"ArchiveCellDivisionStress","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.ArrayFunction, Models","Values":"1 1 1","Units":null,"Name":"LagDurationAgeMultiplier","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.ArrayFunction, Models","Values":"1 1 1","Units":null,"Name":"SenescenceDurationAgeMultiplier","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.ArrayFunction, Models","Values":"1 1 1 1 1 1 1 1 1 1 1 1","Units":null,"Name":"LeafSizeAgeMultiplier","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"RemobilisationCost","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.4,"Units":null,"Name":"CarbonConcentration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"ThermalTime","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"ExtinctionCoeff","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[200,350,500,750,1000],"Y":[0.71,0.69,0.66,0.57,0.48],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Memo, Models","Text":"Using soybean data from Flenet et al 1996 to establish trend, with data from Tesfaye et al 2006 for absolute values (close to 0.8 at 40cm RS). These high values also agreed with Thomas and Fukai 1995 (their measurements were at noon therefore they need to be increased for absolute light interception?). ICRISAT provided Ext coefficients at standard row spacings","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Lentil].SowingData.RowSpacing","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.SupplyFunctions.RUEModel, Models","Name":"Photosynthesis","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"There is no specific TE parameter in NextGen. TE is an emergent property calculated separately from water use and biomass production\n\r\n\n","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1.25,"Units":null,"Name":"RUE","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.WeightedTemperatureFunction, Models","MaximumTemperatureWeighting":0.75,"Name":"FT","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,15,30,40],"Y":[0,1,1,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"FVPD","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"FN","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,1,1.5],"Y":[0,1,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].Fn","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"FW","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,1,1.5],"Y":[0,1,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.SupplyFunctions.RUECO2Function, Models","PhotosyntheticPathway":"C3","Name":"FCO2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Memo, Models","Text":"\r\nAyaz eta 2004 presented a RUE of 1.6 g/MJ PAR during non-limiting temperature conditions for field pea.  Halving this to make it total radiation gives 0.8 g/MJ and adding 20% to account for root and  nodule production and N fixiation costs gives 1.0 g/MJ\n\nHowever Sincalir had data that presented RUE of 2.0 hence by the same calcs we have advanced RUE to 1.2\r\n","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].RadiationIntercepted","Name":"RadnInt","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"FrostFraction","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nAlso includes high T and water stress effect end of season","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Germination","End":"Emergence","Name":"PreEmergence","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"NA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"StartFlowering","Name":"Vegetative_to_Flowering","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"FrostFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"EndPodInitiation","Name":"Flowering","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"FrostFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndPodInitiation","End":"MidGrainFilling","Name":"EarlyGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"FrostFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"MidGrainFilling","End":"LateGrainFilling","Name":"MidGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"FrostFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"LateGrainFilling","End":"EndGrainFill","Name":"LateGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.MaximumFunction, Models","Name":"MaximumFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"FrostFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"HighTemp","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,35,40],"Y":[0,0,1],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Weather].MaxT","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.LinearInterpolationFunction, Models","Name":"WaterStress","ResourceName":null,"Children":[{"$type":"Models.Functions.XYPairs, Models","X":[0,0.1,0.2,0.3,0.5,0.8,1],"Y":[0.2,0,0,0,0,0,0],"XVariableName":null,"Name":"XYPairs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[leaf].Fw","Name":"XValue","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MinimumFunction, Models","Name":"FRGRFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].Photosynthesis.FT","Name":"RUE_FT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MinimumFunction, Models","Name":"Others","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].Photosynthesis.FN","Name":"RUE_FN","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].Photosynthesis.FVPD","Name":"RUE_FVPD","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Library.BiomassRemoval, Models","HarvestFractionLiveToRemove":0,"HarvestFractionDeadToRemove":0,"HarvestFractionLiveToResidue":0.3,"HarvestFractionDeadToResidue":0,"Name":"BiomassRemovalDefaults","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"DMConversionEfficiency","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\n","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"RemobilisationCost","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.4,"Units":null,"Name":"CarbonConcentration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"WidthFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].Height","Name":"DepthFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.SupplyFunctions.StomatalConductanceCO2Modifier, Models","Name":"StomatalConductanceCO2Modifier","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].Photosynthesis.FCO2","Name":"PhotosynthesisCO2Modifier","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Leaf].LeafCohortParameters.StructuralFraction","Name":"StructuralFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientPoolFunctions, Models","Name":"DMDemandPriorityFactors","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Structural","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Storage","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientPoolFunctions, Models","Name":"NDemandPriorityFactors","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Structural","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Storage","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Organs.GenericOrgan, Models","StartLive":null,"DMSupply":null,"NSupply":null,"DMDemand":null,"NDemand":null,"potentialDMAllocation":null,"IsAboveGround":true,"Name":"Stem","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"NReallocationFactor","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nRate (fraction per day) at which N can be reallocated e.g. SPECIFICALLY from sensecing stem","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.5,"Units":null,"Name":"NRetranslocationFactor","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"fraction per day of stored stem reserves that can be used elsewhere - from live leaves, not seneseced","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"DMReallocationFactor","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"How quickly will it reallocate somwhere else (0.1) = 10% per day FROM SENESCED STEM","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.5,"Units":null,"Name":"DMRetranslocationFactor","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"How quickly will it retranslocate somwhere else from LIVE stem (0.1) = 10% per day","Name":"Memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.02,"Units":null,"Name":"MaximumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.007,"Units":null,"Name":"MinimumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"EndGrainFill","Name":"NitrogenDemandSwitch","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Constant","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Library.BiomassRemoval, Models","HarvestFractionLiveToRemove":0.5,"HarvestFractionDeadToRemove":0,"HarvestFractionLiveToResidue":0.1,"HarvestFractionDeadToResidue":0,"Name":"BiomassRemovalDefaults","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":"/d","Name":"DetachmentRateFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":"0-1","Name":"MaintenanceRespirationFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":"0-1","Name":"DMConversionEfficiency","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].MinimumNConc","Name":"CriticalNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"RemobilisationCost","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":"0-1","Name":"DMConversionEfficiency","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.4,"Units":null,"Name":"CarbonConcentration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientDemandFunctions, Models","Name":"NDemands","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Structural","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].minimumNconc","Name":"MinNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].potentialDMAllocation.Structural","Name":"PotentialDMAllocation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Metabolic","ResourceName":null,"Children":[{"$type":"Models.Functions.SubtractFunction, Models","Name":"MetabolicNconc","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].criticalNConc","Name":"CritNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].minimumNconc","Name":"MinNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].potentialDMAllocation.Structural","Name":"PotentialDMAllocation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DemandFunctions.StorageNDemandFunction, Models","Name":"Storage","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].nitrogenDemandSwitch","Name":"NitrogenDemandSwitch","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].maximumNconc","Name":"MaxNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStructuralPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QMetabolicPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStoragePriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.RetranslocateNonStructural, Models","Name":"RetranslocateNitrogen","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientDemandFunctions, Models","Name":"DMDemands","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Structural","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookup, Models","Name":"Fraction","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"StartBudding","Name":"EarlyVegetative","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.5,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartBudding","End":"StartFlowering","Name":"FloralInitiation","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.5,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"EndPodInitiation","Name":"Flowering","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.3,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndPodInitiation","End":"MidGrainFilling","Name":"EarlyGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.2,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"MidGrainFilling","End":"LateGrainFilling","Name":"MidGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.1,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"LateGrainFilling","End":"EndGrainFill","Name":"LateGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].PotentialGrowth","Name":"DMDemand","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Storage","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].PotentialGrowth","Name":"DMDemand","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.SubtractFunction, Models","Name":"StorageFraction","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"One","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].DMDemands.Structural.Fraction","Name":"StructuralFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStructuralPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QMetabolicPriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"QStoragePriority","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DemandFunctions.PartitionFractionDemandFunction, Models","Name":"PotentialGrowth","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookup, Models","Name":"PartitionFraction","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"StartBudding","Name":"EarlyVegetative","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.9,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartBudding","End":"StartFlowering","Name":"FloralInitiation","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.9,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"EndPodInitiation","Name":"Flowering","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.9,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndPodInitiation","End":"MidGrainFilling","Name":"EarlyGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.5,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"MidGrainFilling","End":"LateGrainFilling","Name":"MidGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0.3,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"LateGrainFilling","End":"EndGrainFill","Name":"LateGrainfilling","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Fraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientPoolFunctions, Models","Name":"InitialWt","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":"g/m^2","Name":"Structural","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Storage","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookup, Models","Name":"SenescenceRate","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"MidGrainFilling","End":"Maturity","Name":"PostCanopyPhase","ResourceName":null,"Children":[{"$type":"Models.Functions.MinimumFunction, Models","Name":"Rate","ResourceName":null,"Children":[{"$type":"Models.Functions.DivideFunction, Models","Name":"Fraction","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Phenology].ThermalTime","Name":"TT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.SubtractFunction, Models","Name":"TTRemaining","ResourceName":null,"Children":[{"$type":"Models.Functions.ExpressionFunction, Models","Expression":"[Phenology].MidGrainFilling.Target+[Phenology].LateGrainFilling.Target","Name":"PostCanopyTT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.ExpressionFunction, Models","Expression":"[Phenology].MidGrainFilling.ProgressThroughPhase+[Phenology].LateGrainFilling.ProgressThroughPhase","Name":"PostCanopyTTComplete","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"One","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Photosynthesis","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Stem].MinimumNConc","Name":"InitialNConcFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Organs.Nodule, Models","DMSupply":null,"NSupply":null,"DMDemand":null,"NDemand":null,"potentialDMAllocation":null,"Name":"Nodule","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"FixationMetabolicCost","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.02,"Units":null,"Name":"MaximumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.01,"Units":null,"Name":"MinimumNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"SenescenceRate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"NReallocationFactor","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"EndGrainFill","Name":"NitrogenDemandSwitch","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"Constant","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Library.BiomassRemoval, Models","HarvestFractionLiveToRemove":0,"HarvestFractionDeadToRemove":0,"HarvestFractionLiveToResidue":0,"HarvestFractionDeadToResidue":0,"Name":"BiomassRemovalDefaults","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":"g/m^2","Name":"InitialWtFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":"/d","Name":"DetachmentRateFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":10000,"Units":"g/m^2/d","Name":"FixationRate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":"0-1","Name":"MaintenanceRespirationFunction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":"0-1","Name":"DMConversionEfficiency","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"NRetranslocationFactor","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"DMReallocationFactor","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"DMRetranslocationFactor","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Nodule].MinimumNConc","Name":"CriticalNConc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"RemobilisationCost","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0.4,"Units":null,"Name":"CarbonConcentration","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientPoolFunctions, Models","Name":"DMDemands","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Structural","ResourceName":null,"Children":[{"$type":"Models.Functions.DemandFunctions.PartitionFractionDemandFunction, Models","Name":"DMDemandFunction","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookup, Models","Name":"PartitionFraction","ResourceName":null,"Children":[{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"Emergence","End":"StartFlowering","Name":"Early","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"StartFlowering","End":"EndFlowering","Name":"Middle","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.PhaseLookupValue, Models","Start":"EndFlowering","End":"Maturity","Name":"Late","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Function","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":"g/g","Name":"StructuralFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"Metabolic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DemandFunctions.StorageDMDemandFunction, Models","Name":"Storage","ResourceName":null,"Children":[{"$type":"Models.Functions.SubtractFunction, Models","Name":"StorageFraction","ResourceName":null,"Children":[{"$type":"Models.Functions.Constant, Models","FixedValue":1,"Units":null,"Name":"One","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Nodule].DMDemands.Structural.StructuralFraction","Name":"StructuralFraction","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.NutrientPoolFunctions, Models","Name":"NDemands","ResourceName":null,"Children":[{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Structural","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Nodule].minimumNconc","Name":"MinNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Nodule].potentialDMAllocation.Structural","Name":"PotentialDMAllocation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.MultiplyFunction, Models","Name":"Metabolic","ResourceName":null,"Children":[{"$type":"Models.Functions.SubtractFunction, Models","Name":"MetabolicNconc","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Nodule].criticalNConc","Name":"CritNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Nodule].minimumNconc","Name":"MinNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Nodule].potentialDMAllocation.Structural","Name":"PotentialDMAllocation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.DemandFunctions.StorageNDemandFunction, Models","Name":"Storage","ResourceName":null,"Children":[{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Nodule].nitrogenDemandSwitch","Name":"NitrogenDemandSwitch","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.VariableReference, Models","VariableName":"[Nodule].maximumNconc","Name":"MaxNconc","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.CompositeBiomass, Models","OrganNames":["Leaf","Stem","Grain","Shell"],"IncludeLive":true,"IncludeDead":true,"Name":"AboveGround","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.CompositeBiomass, Models","OrganNames":["Root","Nodule"],"IncludeLive":true,"IncludeDead":true,"Name":"BelowGround","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.CompositeBiomass, Models","OrganNames":["Leaf","Stem","Grain","Shell","Root","Nodule"],"IncludeLive":true,"IncludeDead":true,"Name":"Total","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.CompositeBiomass, Models","OrganNames":["Leaf","Stem","Grain","Shell","Root","Nodule"],"IncludeLive":true,"IncludeDead":false,"Name":"TotalLive","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.CompositeBiomass, Models","OrganNames":["Leaf","Stem","Grain","Shell","Root","Nodule"],"IncludeLive":false,"IncludeDead":true,"Name":"TotalDead","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.CompositeBiomass, Models","OrganNames":["Shell","Grain"],"IncludeLive":true,"IncludeDead":true,"Name":"Pod","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"MortalityRate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Functions.Constant, Models","FixedValue":0,"Units":null,"Name":"SeedMortalityRate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Folder, Models","ShowInDocs":false,"GraphsPerPage":6,"Name":"Cultivars","ResourceName":null,"Children":[{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"Bolt","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"Ace","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"Blitz","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"Greenfield","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"HallmarkXT","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"Jumbo2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"Digger","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"Nugget","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"Northfield","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Folder, Models","ShowInDocs":false,"GraphsPerPage":6,"Name":"Australian cvv","ResourceName":null,"Children":[{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"Amethyst","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Emerging.Target.ShootLag.FixedValue = 140","[Phenology].Vegetative.Target.FixedValue = 500","[Phenology].FloralInitiation.Target.FixedValue = 100","[Phenology].Budding.Target.XYPairs.X = 10, 13.17, 17","[Phenology].Budding.Target.XYPairs.Y = 665, 50, 50"],"Name":"Almaz","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"Boundary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Vegetative.Target.FixedValue = 600","[Phenology].FloralInitiation.Target.FixedValue = 100","[Phenology].Budding.Target.XYPairs.X = 10, 12.54, 17","[Phenology].Budding.Target.XYPairs.Y = 453, 50, 50"],"Name":"CICA1521","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Vegetative.Target.FixedValue = 600","[Phenology].FloralInitiation.Target.FixedValue = 100","[Phenology].Budding.Target.XYPairs.X = 10, 12.54, 17","[Phenology].Budding.Target.XYPairs.Y = 453, 50, 50","[Phenology].Flowering.Target.FixedValue = 200","[Phenology].PodInitiation.Target.Total.FixedValue = 8"],"Name":"Drummond","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Emerging.Target.ShootLag.FixedValue = 140","[Phenology].Vegetative.Target.FixedValue = 600","[Phenology].FloralInitiation.Target.FixedValue = 0","[Phenology].Budding.Target.XYPairs.X = 10, 15.62, 17","[Phenology].Budding.Target.XYPairs.Y = 300, 300, 300","[Phenology].Flowering.Target.FixedValue = 200","[Phenology].PodInitiation.Target.Total.FixedValue = 8"],"Name":"Genesis90","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":[""],"Name":"HatTrick","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Emerging.Target.ShootLag.FixedValue = 140","[Phenology].Vegetative.Target.FixedValue = 600","[Phenology].FloralInitiation.Target.FixedValue = 0","[Phenology].Budding.Target.XYPairs.X = 10, 14.31, 17","[Phenology].Budding.Target.XYPairs.Y = 633, 50, 50","[Phenology].Flowering.Target.FixedValue = 200"],"Name":"Kalkee","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].FloralInitiation.Target.FixedValue = 200","[Phenology].Budding.Target.XYPairs.X = 10, 12.51, 17","[Phenology].Budding.Target.XYPairs.Y = 466, 50, 50","[Phenology].Flowering.Target.FixedValue = 250","[Phenology].PodInitiation.Target.Total.FixedValue = 8"],"Name":"Kyabra","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Emerging.Target.ShootLag.FixedValue = 140","[Phenology].Vegetative.Target.FixedValue = 600","[Phenology].FloralInitiation.Target.FixedValue = 0","[Phenology].Budding.Target.XYPairs.X = 10, 13.45, 17","[Phenology].Budding.Target.XYPairs.Y = 621, 50, 50","[Phenology].Flowering.Target.FixedValue = 200","[Phenology].PodInitiation.Target.Total.FixedValue = 8"],"Name":"Monarch","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].FloralInitiation.Target.FixedValue = 200","[Phenology].Budding.Target.XYPairs.X = 10, 12.51, 17","[Phenology].Budding.Target.XYPairs.Y = 466, 50, 50","[Phenology].Flowering.Target.FixedValue = 200"],"Name":"Pistol","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Emerging.Target.ShootLag.FixedValue = 140","[Phenology].Vegetative.Target.FixedValue = 600","[Phenology].FloralInitiation.Target.FixedValue = 0","[Phenology].Budding.Target.XYPairs.X = 10, 13.45, 17","[Phenology].Budding.Target.XYPairs.Y = 621, 50, 50","[Phenology].Flowering.Target.FixedValue = 150"],"Name":"QuickKabuli","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].FloralInitiation.Target.FixedValue = 200","[Phenology].Budding.Target.XYPairs.X = 10, 12.51, 17","[Phenology].Budding.Target.XYPairs.Y = 466, 50, 50","[Phenology].Flowering.Target.FixedValue = 200","[Phenology].PodInitiation.Target.Total.FixedValue = 5"],"Name":"Seamer","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].FloralInitiation.Target.FixedValue = 200","[Phenology].Budding.Target.XYPairs.X = 10, 12.51, 17","[Phenology].Budding.Target.XYPairs.Y = 466, 50, 50","[Phenology].Flowering.Target.FixedValue = 100","[Phenology].PodInitiation.Target.Total.FixedValue = 5"],"Name":"Slasher","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Vegetative.Target.FixedValue = 600","[Phenology].FloralInitiation.Target.FixedValue = 100","[Phenology].Budding.Target.XYPairs.X = 10, 12.54, 17","[Phenology].Budding.Target.XYPairs.Y = 453, 50, 50"],"Name":"SlowDesi","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].FloralInitiation.Target.FixedValue = 200","[Phenology].Budding.Target.XYPairs.X = 10, 12.51, 17","[Phenology].Budding.Target.XYPairs.Y = 466, 50, 50","[Phenology].Flowering.Target.FixedValue = 200","[Phenology].PodInitiation.Target.Total.FixedValue = 5"],"Name":"Striker","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Emerging.Target.ShootLag.FixedValue = 140","[Phenology].Vegetative.Target.FixedValue = 600","[Phenology].FloralInitiation.Target.FixedValue = 0","[Phenology].Budding.Target.XYPairs.X = 10, 15.62, 17","[Phenology].Budding.Target.XYPairs.Y = 478, 50, 50","[Phenology].Flowering.Target.FixedValue = 200","[Phenology].PodInitiation.Target.Total.FixedValue = 8"],"Name":"Genesis90_archivePPsensitive","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Folder, Models","ShowInDocs":false,"GraphsPerPage":6,"Name":"ICRISAT cvv","ResourceName":null,"Children":[{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Emerging.Target.ShootLag.FixedValue = 140","[Phenology].Vegetative.Target.FixedValue = 550","[Phenology].FloralInitiation.Target.FixedValue = 0","[Phenology].Budding.Target.XYPairs.X = 10, 15.62, 17","[Phenology].Budding.Target.XYPairs.Y = 478, 50, 50","[Phenology].Flowering.Target.FixedValue = 200","[Phenology].PodInitiation.Target.Total.FixedValue = 8","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  9,  19,   23,   30,    38","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 200,  400,  1000,  1000, 400,  0","[Leaf].LeafCohortParameters.MaxArea.Flowering_to_Maturity.MinimumFunction.MaxArea.XYPairs.X = 1,   7,    15","[Leaf].LeafCohortParameters.MaxArea.Flowering_to_Maturity.MinimumFunction.MaxArea.XYPairs.Y = 1000, 400,  10","[Leaf].LeafCohortParameters.SpecificLeafAreaMax.XYPairs.X = 0, 1800","[Leaf].LeafCohortParameters.SpecificLeafAreaMax.XYPairs.Y = 32000, 2000","[Leaf].LeafCohortParameters.SpecificLeafAreaMin.XYPairs.X = 0, 1800","[Leaf].LeafCohortParameters.SpecificLeafAreaMin.XYPairs.Y = 30000, 1000","[Root].KLBiomMod.XYPairs.X = 0, 200, 350, 500, 700","[Root].KLBiomMod.XYPairs.Y = 0.3, 0.8, 1.0, 1.2, 1.4","[Structure].FinalLeafNumber.FixedValue = 26"],"Name":"JAKI","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Emerging.Target.ShootLag.FixedValue = 140","[Phenology].FloralInitiation.Target.FixedValue = 100","[Phenology].Budding.Target.XYPairs.X = 10, 12.51, 17","[Phenology].Budding.Target.XYPairs.Y = 466, 50, 50","[Phenology].Flowering.Target.FixedValue = 150","[Phenology].PodInitiation.Target.Total.FixedValue = 5","[Phenology].MidGrainFilling.Target.FixedValue = 350","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  8,  21,   25,   40","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 200,  700,  1000,   200,  100","[Leaf].LeafCohortParameters.MaxArea.Flowering_to_Maturity.MinimumFunction.MaxArea.XYPairs.X = 1,   5,   20","[Leaf].LeafCohortParameters.MaxArea.Flowering_to_Maturity.MinimumFunction.MaxArea.XYPairs.Y =  1000,   200,  100","[Leaf].LeafCohortParameters.SpecificLeafAreaMax.XYPairs.X = 0, 1800","[Leaf].LeafCohortParameters.SpecificLeafAreaMax.XYPairs.Y = 32000, 2000","[Leaf].LeafCohortParameters.SpecificLeafAreaMin.XYPairs.X = 0, 1800","[Leaf].LeafCohortParameters.SpecificLeafAreaMin.XYPairs.Y = 30000, 1000","[Root].KLBiomMod.XYPairs.X = 0, 200, 350, 500, 700","[Root].KLBiomMod.XYPairs.Y = 0.3, 0.8, 1.0, 1.2, 1.4","[Structure].FinalLeafNumber.FixedValue = 24"],"Name":"ICCV2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  9,  16,   21,   31, 39","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 270,  670,  1250,   1250,  670, 0","[Leaf].LeafCohortParameters.MaxArea.Flowering_to_Maturity.MinimumFunction.MaxArea.XYPairs.X =   1,   11, 19","[Leaf].LeafCohortParameters.MaxArea.Flowering_to_Maturity.MinimumFunction.MaxArea.XYPairs.Y =   1250,  670, 10","[Leaf].ExtinctionCoeff.XYPairs.X = 200, 350, 500, 750, 1000","[Leaf].ExtinctionCoeff.XYPairs.Y = 0.51, 0.49, 0.46, 0.43, 0.35","[Leaf].LeafCohortParameters.SpecificLeafAreaMax.XYPairs.X = 0, 1800","[Leaf].LeafCohortParameters.SpecificLeafAreaMax.XYPairs.Y = 32000, 2000","[Leaf].LeafCohortParameters.SpecificLeafAreaMin.XYPairs.X = 0, 1800","[Leaf].LeafCohortParameters.SpecificLeafAreaMin.XYPairs.Y = 30000, 1000","[Root].KLBiomMod.XYPairs.X = 0, 200, 350, 500, 700","[Root].KLBiomMod.XYPairs.Y = 0.3, 0.8, 1.0, 1.2, 1.4","[Phenology].MidGrainFilling.Target.FixedValue = 350","[Structure].FinalLeafNumber.FixedValue = 30"],"Name":"NBeG47","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Phenology].Emerging.Target.ShootLag.FixedValue = 140","[Phenology].FloralInitiation.Target.FixedValue = 100","[Phenology].Budding.Target.XYPairs.X = 10, 12.51, 17","[Phenology].Budding.Target.XYPairs.Y = 466, 50, 50","[Phenology].Flowering.Target.FixedValue = 150","[Phenology].PodInitiation.Target.Total.FixedValue = 5","[Phenology].MidGrainFilling.Target.FixedValue = 350","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  10,  22,   30,   40","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 200,  900,  900,   300,  100","[Leaf].LeafCohortParameters.MaxArea.Flowering_to_Maturity.MinimumFunction.MaxArea.XYPairs.X = 1,   8,   18","[Leaf].LeafCohortParameters.MaxArea.Flowering_to_Maturity.MinimumFunction.MaxArea.XYPairs.Y =  900,   300,  100","[Leaf].ExtinctionCoeff.XYPairs.X = 200, 350, 500, 750, 1000","[Leaf].ExtinctionCoeff.XYPairs.Y = 0.76, 0.74, 0.71, 0.60, 0.51","[Leaf].LeafCohortParameters.SpecificLeafAreaMax.XYPairs.X = 0, 1800","[Leaf].LeafCohortParameters.SpecificLeafAreaMax.XYPairs.Y = 32000, 2000","[Leaf].LeafCohortParameters.SpecificLeafAreaMin.XYPairs.X = 0, 1800","[Leaf].LeafCohortParameters.SpecificLeafAreaMin.XYPairs.Y = 30000, 1000","[Root].KLBiomMod.XYPairs.X = 0, 200, 350, 500, 700","[Root].KLBiomMod.XYPairs.Y = 0.3, 0.8, 1.0, 1.2, 1.4","[Structure].FinalLeafNumber.FixedValue = 28"],"Name":"NBeG119","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Folder, Models","ShowInDocs":false,"GraphsPerPage":6,"Name":"Other cvv","ResourceName":null,"Children":[{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 490","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"Anwar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 550"],"Name":"Ayaz","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 610","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.3"],"Name":"Hashem","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Folder, Models","ShowInDocs":false,"GraphsPerPage":6,"Name":"Archived Cultivars","ResourceName":null,"Children":[{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 440","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"99_73C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 410","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"99_66C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 420","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"99_34C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 410","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"98_79C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 410","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"98_55C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 430","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10"],"Name":"98_16C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 410","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"98_107C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 400","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"98_106C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 430","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"97_219C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 400","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"97_120C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 420","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"97_118C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 405","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"97_116C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 505","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"02_35C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 400","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"02_30C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 400","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 11"],"Name":"02_23C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 500","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"02_10C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 500","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"02_03C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 485","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"01_7C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 500","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"01_61C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 600","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10"],"Name":"01_36C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 430","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10"],"Name":"00_40C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 500","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"00_21C","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 500","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"Ghab4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 500","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"Ghab5","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Cultivar, Models","Command":["[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.X = 1,  5,  10,  21","[Leaf].LeafCohortParameters.MaxArea.Vegetative_to_Flowering.MaxArea.XYPairs.Y = 224,  224,  489, 1080","[Phenology].Vegetative.Target.FixedValue = 510","[Phenology].Vegetative.Progression.PhotoperiodModifier.CriticalPhotoperiod = 10.5"],"Name":"Ghab3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Folder, Models","ShowInDocs":false,"GraphsPerPage":6,"Name":"Graphs","ResourceName":null,"Children":[{"$type":"Models.Graph, Models","Caption":null,"Axis":[{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Observed","Position":3,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null},{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Predicted","Position":0,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null}],"LegendPosition":3,"LegendOrientation":0,"AnnotationLocation":0,"DisabledSeries":[],"LegendOutsideGraph":false,"Name":"FloweringDAS","ResourceName":null,"Children":[{"$type":"Models.Series, Models","TableName":"HarvestObsPred","YFieldName":"Predicted.FloweringDAS","X2FieldName":null,"Y2FieldName":null,"Line":4,"FactorToVaryLines":null,"Marker":0,"FactorToVaryMarkers":null,"XFieldName":"Observed.FloweringDAS","Type":1,"XAxis":3,"YAxis":0,"ColourArgb":-16777216,"FactorToVaryColours":"Cultivar","MarkerSize":0,"LineThickness":0,"ShowInLegend":true,"IncludeSeriesNameInLegend":false,"Cumulative":false,"CumulativeX":false,"Filter":null,"Name":"Predicted","ResourceName":null,"Children":[{"$type":"Models.Regression, Models","ForEachSeries":false,"showOneToOne":true,"showEquation":true,"Name":"Regression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Graph, Models","Caption":null,"Axis":[{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Observed","Position":3,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null},{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Predicted","Position":0,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null}],"LegendPosition":3,"LegendOrientation":0,"AnnotationLocation":0,"DisabledSeries":[],"LegendOutsideGraph":false,"Name":"BuddingDAS","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"Note observed (gatton, greenethorpe phen, mildura) is \"50% budding\"","Name":"NB","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Series, Models","TableName":"HarvestObsPred","YFieldName":"Predicted.BuddingDAS","X2FieldName":null,"Y2FieldName":null,"Line":4,"FactorToVaryLines":null,"Marker":0,"FactorToVaryMarkers":null,"XFieldName":"Observed.BuddingDAS","Type":1,"XAxis":3,"YAxis":0,"ColourArgb":-16777216,"FactorToVaryColours":"Cultivar","MarkerSize":0,"LineThickness":0,"ShowInLegend":true,"IncludeSeriesNameInLegend":false,"Cumulative":false,"CumulativeX":false,"Filter":null,"Name":"Predicted","ResourceName":null,"Children":[{"$type":"Models.Regression, Models","ForEachSeries":false,"showOneToOne":true,"showEquation":true,"Name":"Regression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Graph, Models","Caption":null,"Axis":[{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Observed","Position":3,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null},{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Predicted","Position":0,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null}],"LegendPosition":3,"LegendOrientation":0,"AnnotationLocation":0,"DisabledSeries":[],"LegendOutsideGraph":false,"Name":"MaturityDAS","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"Milmerran distinguishes between harvestmaturity & maturity.","Name":"NB","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Series, Models","TableName":"HarvestObsPred","YFieldName":"Predicted.MaturityDAS","X2FieldName":null,"Y2FieldName":null,"Line":4,"FactorToVaryLines":null,"Marker":0,"FactorToVaryMarkers":null,"XFieldName":"Observed.MaturityDAS","Type":1,"XAxis":3,"YAxis":0,"ColourArgb":-16777216,"FactorToVaryColours":"Cultivar","MarkerSize":0,"LineThickness":0,"ShowInLegend":true,"IncludeSeriesNameInLegend":false,"Cumulative":false,"CumulativeX":false,"Filter":null,"Name":"Predicted","ResourceName":null,"Children":[{"$type":"Models.Regression, Models","ForEachSeries":false,"showOneToOne":true,"showEquation":true,"Name":"Regression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Graph, Models","Caption":null,"Axis":[{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Observed","Position":3,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null},{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Predicted","Position":0,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null}],"LegendPosition":3,"LegendOrientation":0,"AnnotationLocation":0,"DisabledSeries":[],"LegendOutsideGraph":false,"Name":"Biomass","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"Filtered to show only maturity weights","Name":"NB","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Series, Models","TableName":"HarvestObsPred","YFieldName":"Predicted.Lentil.AboveGround.Wt","X2FieldName":null,"Y2FieldName":null,"Line":4,"FactorToVaryLines":null,"Marker":0,"FactorToVaryMarkers":null,"XFieldName":"Observed.Lentil.AboveGround.Wt","Type":1,"XAxis":3,"YAxis":0,"ColourArgb":-16777216,"FactorToVaryColours":"Cultivar","MarkerSize":0,"LineThickness":0,"ShowInLegend":false,"IncludeSeriesNameInLegend":false,"Cumulative":false,"CumulativeX":false,"Filter":"Predicted.Harvest = 'HarvestRipe'","Name":"Predicted","ResourceName":null,"Children":[{"$type":"Models.Regression, Models","ForEachSeries":false,"showOneToOne":true,"showEquation":true,"Name":"Regression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Graph, Models","Caption":null,"Axis":[{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Observed","Position":3,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null},{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Predicted","Position":0,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null}],"LegendPosition":3,"LegendOrientation":0,"AnnotationLocation":0,"DisabledSeries":[],"LegendOutsideGraph":false,"Name":"HI","ResourceName":null,"Children":[{"$type":"Models.Series, Models","TableName":"HarvestObsPred","YFieldName":"Predicted.HarvestIndex","X2FieldName":null,"Y2FieldName":null,"Line":4,"FactorToVaryLines":null,"Marker":0,"FactorToVaryMarkers":null,"XFieldName":"Observed.HarvestIndex","Type":1,"XAxis":3,"YAxis":0,"ColourArgb":-16777216,"FactorToVaryColours":"Cultivar","MarkerSize":0,"LineThickness":0,"ShowInLegend":false,"IncludeSeriesNameInLegend":false,"Cumulative":false,"CumulativeX":false,"Filter":null,"Name":"Predicted","ResourceName":null,"Children":[{"$type":"Models.Regression, Models","ForEachSeries":false,"showOneToOne":true,"showEquation":true,"Name":"Regression","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Graph, Models","Caption":null,"Axis":[{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Observed","Position":3,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null},{"$type":"APSIM.Shared.Graphing.Axis, APSIM.Shared","Title":"Predicted","Position":0,"Inverted":false,"CrossesAtZero":false,"Minimum":null,"Maximum":null,"Interval":null}],"LegendPosition":3,"LegendOrientation":0,"AnnotationLocation":0,"DisabledSeries":[],"LegendOutsideGraph":false,"Name":"LAI","ResourceName":null,"Children":[{"$type":"Models.Series, Models","Type":1,"XAxis":3,"YAxis":0,"ColourArgb":-16777216,"FactorToVaryColours":"SimulationName","FactorToVaryMarkers":null,"FactorToVaryLines":null,"Marker":0,"MarkerSize":0,"Line":4,"LineThickness":0,"TableName":"ObservedDaily","XFieldName":"DAS","YFieldName":"LAI","X2FieldName":null,"Y2FieldName":null,"ShowInLegend":false,"IncludeSeriesNameInLegend":false,"Cumulative":false,"CumulativeX":false,"Filter":"DAS > 0","Name":"Obs","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Series, Models","Type":1,"XAxis":3,"YAxis":0,"ColourArgb":-16777216,"FactorToVaryColours":"SimulationName","FactorToVaryMarkers":null,"FactorToVaryLines":null,"Marker":11,"MarkerSize":0,"Line":0,"LineThickness":0,"TableName":"Daily","XFieldName":"DAS","YFieldName":"LAI","X2FieldName":null,"Y2FieldName":null,"ShowInLegend":false,"IncludeSeriesNameInLegend":false,"Cumulative":false,"CumulativeX":false,"Filter":"DAS > 0","Name":"Pred","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Emerald","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2019-05-10T00:00:00","[Clock].StartDate = 2019-05-09T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2019-06-03T00:00:00","[Clock].StartDate = 2019-06-02T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS3","[Manager].Script.sowDate = 2019-06-27T00:00:00","[Clock].StartDate = 2019-06-26T00:00:00"],"Paths":null,"Values":null,"Name":"TOS3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Bolt,Ace,Blitz,Greenfield,HallmarkXT,Jumbo2","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Emerald","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2020-03-23T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"Emerald2019Combo.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":99,"ASCOrder":"Vertosol","ASCSubOrder":null,"SoilType":"Clay","LocalName":null,"Site":"Generic-Qld","NearestTown":null,"Region":null,"State":"Generic","Country":"Australia","NaturalVegetation":"NA","ApsoilNumber":"519-GENERIC","Latitude":-27.183286,"Longitude":151.263748,"LocationAccuracy":"Regional Soil Type","YearOfSampling":null,"DataSource":"Generic soil. CSIRO Sustainable Ecosystems, Toowoomba","Comments":"Generic soil developed by Allan Peake. 'Typical Vertosol' soil properties have been calculated as the average of vertosols with similar characteristics from within the Apsoil database. Groupings were made on the basis of bulk density. Measured BD, DUL and CLL for the groups were then averaged to derive the characteristics of the typical Vertosols. They can then be used in conjunction with measured soil water to simplify the selection of appropriate Vertosols, for paddocks where full soil characterisations have not yet been completed. For more information see Peake et al. 2010: ‘A rapid method for estimating the plant available water capacity of Vertosols’, 2010 Australian Agronomy Conference. Typical Vertosols are different to 'Generic' soil types elsewhere in the Apsoil database, which are representative of certain soil types and districts, but have not been calculated from large numbers of similar, characterised soils.\n\n","Name":"Vertosol No7 (PAWC-204 No519-Generic)","ResourceName":null,"Children":[{"$type":"Models.Soils.Physical, Models","Thickness":[150,150,300,300,300,300,300],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.33,1.34,1.34,1.37,1.41,1.43,1.44],"AirDry":[0.109,0.18,0.244,0.244,0.244,0.244,0.244],"LL15":[0.217,0.225,0.244,0.244,0.244,0.244,0.244],"DUL":[0.418,0.413,0.414,0.404,0.39,0.382,0.377],"SAT":[0.468,0.463,0.464,0.454,0.44,0.432,0.427],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.217,0.225,0.244,0.262,0.294,0.324,0.356],"KL":[0.06,0.06,0.06,0.04,0.04,0.02,0.02],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"WheatSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.217,0.225,0.244,0.262,0.294,0.324,0.356],"KL":[0.06,0.06,0.06,0.04,0.04,0.02,0.02],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.217,0.225,0.244,0.262,0.294,0.324,0.356],"KL":[0.1,0.1,0.1,0.1,0.09,0.07,0.05],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"CottonSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.217,0.225,0.244,0.262,0.294,0.324,0.356],"KL":[0.07,0.07,0.07,0.05,0.05,0.04,0.03],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"SorghumSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":6,"SummerCona":3.5,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2.5,"DiffusConst":40,"DiffusSlope":16,"Salb":0.12,"CN2Bare":73,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[150,150,300,300,300,300,300],"SWCON":[0.3,0.3,0.3,0.3,0.3,0.3,0.3],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[10.526315789473685,3.482587064676617,0.8706467661691543,0.8515815085158149,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"UREA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":40,"Thickness":[150,150,300,300,300,300,300],"Carbon":[1,0.8,0.5,0.25,0.15,0.1,0.1],"CarbonUnits":1,"SoilCNRatio":[12,12,12,12,12,12,12],"FBiom":[0.04,0.02,0.02,0.02,0.01,0.01,0.01],"FInert":[0.4,0.6,0.8,1,1,1,1],"FOM":[347.1290323127564,270.3443621919937,163.97214434990104,99.45413288704063,60.32198083112468,36.58713082867487,22.1912165985086],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[150,150,300,300,300,300,300],"PH":[8.4,8.6,8.6,8,7.1,6.5,6.5],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":["Measured","Measured","Measured","Measured","Measured","Measured","Measured"],"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0.418,0.413,0.414,0.404,0.39,0.382,0.377],"InitialPAWmm":282.45,"RelativeTo":"LL15","FilledFromTop":true,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Emerald"},{"Key":"Season","Value":"19"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":120},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Dooen","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2001-06-28T00:00:00","[Clock].StartDate = 2001-06-27T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Digger","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Irr = Dryland,Irrigated","Name":"Irr","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Dooen","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2002-03-25T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"horsham.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":0,"ASCOrder":null,"ASCSubOrder":null,"SoilType":"Black Vertosol","LocalName":null,"Site":"Jimbour","NearestTown":"Jimbour, Q 4352","Region":"South East Queensland","State":null,"Country":null,"NaturalVegetation":"Grassland, mainly Qld bluegrass","ApsoilNumber":null,"Latitude":0,"Longitude":0,"LocationAccuracy":null,"YearOfSampling":null,"DataSource":"Daniel Rodriguez lentil expt","Comments":null,"Name":"dooen","ResourceName":null,"Children":[{"$type":"Models.Soils.Physical, Models","Thickness":[100,100,200,200,200,200,200],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.2,1.37,1.28,1.38,1.4,1.45,1.45],"AirDry":[0.1,0.11,0.14,0.16,0.19,0.19,0.19],"LL15":[0.145,0.145,0.197,0.21,0.24,0.243,0.28],"DUL":[0.384,0.375,0.405,0.391,0.373,0.343,0.32],"SAT":[0.54,0.419,0.487,0.468,0.449,0.427,0.389],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.145,0.145,0.197,0.21,0.24,0.243,0.28],"KL":[0.08,0.08,0.08,0.08,0.01,0,0],"XF":[1,1,1,1,0.1,0,0],"LLMetadata":null,"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":4,"SummerCona":2,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2,"DiffusConst":88,"DiffusSlope":35.4,"Salb":0.13,"CN2Bare":72,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[100,100,200,200,200,200,200],"SWCON":[0.2,0.2,0.2,0.2,0.2,0.2,0.2],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[9.2,7.599999999999999,4.9,2.7,1.5,1.8000000000000005,1.4],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[0.3,0.29927007299270075,0.30078125,0.3007246376811594,0.3,0.5,0.5],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"UREA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":20,"Thickness":[100,100,200,200,200,200,200],"Carbon":[1.12,1.12,0.77,0.5,0.4,0.28,0.23],"CarbonUnits":1,"SoilCNRatio":[14.5,14.5,14.5,14.5,14.5,14.5,14.5],"FBiom":[0.02,0.02,0.015,0.01,0.01,0.01,0.01],"FInert":[0.36,0.36,0.5,0.59,0.84,0.8,0.8],"FOM":[347.1290323127564,270.3443621919937,163.97214434990104,99.45413288704063,60.32198083112468,36.58713082867487,22.1912165985086],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[100,100,200,200,200,200,200],"PH":[8.2,8.5,9.1,9.2,8.9,9.02,9],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":null,"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[0.15694999999999998,0.1565,0.2074,0.21905,0.24664999999999998,0.248,0.28200000000000003],"InitialPAWmm":8.965,"RelativeTo":"LL15","FilledFromTop":false,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Dooen"},{"Key":"Season","Value":"01"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":230},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Mildura","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2019-05-01T00:00:00","[Clock].StartDate = 2019-04-30T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2019-05-18T00:00:00","[Clock].StartDate = 2019-05-17T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS3","[Manager].Script.sowDate = 2019-06-07T00:00:00","[Clock].StartDate = 2019-06-06T00:00:00"],"Paths":null,"Values":null,"Name":"TOS3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Jumbo2,Blitz,Ace,HallmarkXT,Greenfield","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Mildura","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2020-03-03T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"MildurahPO.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":189,"ASCOrder":"Calcarosol","ASCSubOrder":null,"SoilType":"Sandy loam ","LocalName":null,"Site":"Kerribee","NearestTown":"Paringi","Region":"Lower Western","State":"New South Wales","Country":"Australia","NaturalVegetation":"Belah and mallee","ApsoilNumber":"359","Latitude":-34.288,"Longitude":142.371,"LocationAccuracy":" +/- 20m","YearOfSampling":null,"DataSource":"Based on Soil Characterisation undertaken by Whitbread/Davoren GRDC Soil water project and Jeff Baldock MSF data","Comments":null,"Name":"Sandy Loam (Kerribee No359)","ResourceName":null,"Children":[{"$type":"Models.Soils.Physical, Models","Thickness":[100,100,200,200,200,200],"ParticleSizeClay":[10.6,15.2,17.7,21.9,24.2,22.1],"ParticleSizeSand":[82.7,76.9,72.4,63.9,58.1,59.6],"ParticleSizeSilt":[5.5,5.9,5.9,4.7,4.1,4.1],"Rocks":null,"Texture":null,"BD":[1.286,1.529,1.441,1.486,1.57,1.626],"AirDry":[0.016,0.048,0.07,0.1,0.11,0.11],"LL15":[0.028,0.065,0.07,0.1,0.11,0.11],"DUL":[0.13,0.17,0.19,0.22,0.22,0.21],"SAT":[0.46,0.37,0.41,0.39,0.36,0.32],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.028,0.065,0.1,0.105,0.11,0.11],"KL":[0.06,0.06,0.06,0.06,0.04,0.04],"XF":[1,1,1,1,1,1],"LLMetadata":null,"KLMetadata":null,"XFMetadata":null,"Name":"WheatSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.028,0.065,0.1,0.105,0.11,0.11],"KL":[0.06,0.06,0.06,0.06,0.04,0.04],"XF":[1,1,1,1,1,1],"LLMetadata":null,"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.028,0.065,0.1,0.115,0.115,0.13],"KL":[0.06,0.06,0.06,0.06,0.04,0.04],"XF":[1,1,1,1,1,1],"LLMetadata":null,"KLMetadata":null,"XFMetadata":null,"Name":"CanolaSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.028,0.065,0.1,0.115,0.115,0.13],"KL":[0.06,0.06,0.06,0.06,0.04,0.04],"XF":[1,1,1,1,1,1],"LLMetadata":null,"KLMetadata":null,"XFMetadata":null,"Name":"FieldpeaSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.05,0.068,0.09,0.131,0.139,0.16],"KL":[0.06,0.06,0.06,0.06,0.04,0.04],"XF":[1,1,1,1,1,1],"LLMetadata":null,"KLMetadata":null,"XFMetadata":null,"Name":"WeedSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":4,"SummerCona":2,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2,"DiffusConst":88,"DiffusSlope":35,"Salb":0.13,"CN2Bare":70,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[100,100,200,200,200,200],"SWCON":[0.7,0.7,0.7,0.7,0.7,0.7],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200],"InitialValues":[16.329704510108865,10.682363200348792,2.024057367568817,1.1776581426648722,1.1146496815286624,0.7175071750717498],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200],"InitialValues":[0,0,0,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200],"InitialValues":[0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"UREA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":40,"Thickness":[100,100,200,200,200,200],"Carbon":[0.47,0.37,0.28,0.23,0.22,0.2],"CarbonUnits":0,"SoilCNRatio":[13.8,13.8,13.8,13.8,13.8,13.8],"FBiom":[0.04,0.02,0.02,0.02,0.01,0.01],"FInert":[0.5,0.6,0.8,1,1,1],"FOM":[301.30184359885055,246.68508531347123,165.35795774363163,110.84275384707044,74.3001198614853,49.804859766004355],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[100,100,200,200,200,200],"PH":[7.1,7.8,8.1,8.2,8.4,8.5],"PHUnits":0,"EC":[0.1,0.1,0.1,0.1,0.2,0.4],"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":null,"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[100,100,200,200,200,200],"InitialValues":[0.13,0.17,0.19,0.22,0.22,0.21],"InitialPAWmm":110.7,"RelativeTo":"LL15","FilledFromTop":true,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Mildura"},{"Key":"Season","Value":"19"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":110},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Caragabal","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2019-05-08T00:00:00","[Clock].StartDate = 2019-05-07T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2019-06-17T00:00:00","[Clock].StartDate = 2019-06-16T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Blitz,Bolt,Greenfield,HallmarkXT,Jumbo2","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Caragabal","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2020-03-13T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"CaragabalPO.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":99,"ASCOrder":"Vertosol","ASCSubOrder":null,"SoilType":"Clay","LocalName":null,"Site":"Generic-Qld","NearestTown":null,"Region":null,"State":"Generic","Country":"Australia","NaturalVegetation":"NA","ApsoilNumber":"519-GENERIC","Latitude":-27.183286,"Longitude":151.263748,"LocationAccuracy":"Regional Soil Type","YearOfSampling":null,"DataSource":"Generic soil. CSIRO Sustainable Ecosystems, Toowoomba","Comments":"Generic soil developed by Allan Peake. 'Typical Vertosol' soil properties have been calculated as the average of vertosols with similar characteristics from within the Apsoil database. Groupings were made on the basis of bulk density. Measured BD, DUL and CLL for the groups were then averaged to derive the characteristics of the typical Vertosols. They can then be used in conjunction with measured soil water to simplify the selection of appropriate Vertosols, for paddocks where full soil characterisations have not yet been completed. For more information see Peake et al. 2010: ‘A rapid method for estimating the plant available water capacity of Vertosols’, 2010 Australian Agronomy Conference. Typical Vertosols are different to 'Generic' soil types elsewhere in the Apsoil database, which are representative of certain soil types and districts, but have not been calculated from large numbers of similar, characterised soils.\n\n","Name":"Vertosol No7 (PAWC-204 No519-Generic)","ResourceName":null,"Children":[{"$type":"Models.Soils.Physical, Models","Thickness":[150,150,300,300,300,300,300],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.33,1.34,1.34,1.37,1.41,1.43,1.44],"AirDry":[0.109,0.18,0.244,0.244,0.244,0.244,0.244],"LL15":[0.217,0.225,0.244,0.244,0.244,0.244,0.244],"DUL":[0.418,0.413,0.414,0.404,0.39,0.382,0.377],"SAT":[0.468,0.463,0.464,0.454,0.44,0.432,0.427],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.217,0.225,0.244,0.262,0.294,0.324,0.356],"KL":[0.06,0.06,0.06,0.04,0.04,0.02,0.02],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"WheatSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.217,0.225,0.244,0.262,0.294,0.324,0.356],"KL":[0.06,0.06,0.06,0.04,0.04,0.02,0.02],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.217,0.225,0.244,0.262,0.294,0.324,0.356],"KL":[0.1,0.1,0.1,0.1,0.09,0.07,0.05],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"CottonSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.217,0.225,0.244,0.262,0.294,0.324,0.356],"KL":[0.07,0.07,0.07,0.05,0.05,0.04,0.03],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"SorghumSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":6,"SummerCona":3.5,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2.5,"DiffusConst":40,"DiffusSlope":16,"Salb":0.12,"CN2Bare":73,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[150,150,300,300,300,300,300],"SWCON":[0.3,0.3,0.3,0.3,0.3,0.3,0.3],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[10.526315789473685,3.482587064676617,0.8706467661691543,0.8515815085158149,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"UREA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":40,"Thickness":[150,150,300,300,300,300,300],"Carbon":[1,0.8,0.5,0.25,0.15,0.1,0.1],"CarbonUnits":1,"SoilCNRatio":[12,12,12,12,12,12,12],"FBiom":[0.04,0.02,0.02,0.02,0.01,0.01,0.01],"FInert":[0.4,0.6,0.8,1,1,1,1],"FOM":[347.1290323127564,270.3443621919937,163.97214434990104,99.45413288704063,60.32198083112468,36.58713082867487,22.1912165985086],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[150,150,300,300,300,300,300],"PH":[8.4,8.6,8.6,8,7.1,6.5,6.5],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":["Measured","Measured","Measured","Measured","Measured","Measured","Measured"],"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0.418,0.413,0.414,0.404,0.39,0.382,0.377],"InitialPAWmm":282.45,"RelativeTo":"LL15","FilledFromTop":true,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Caragabal"},{"Key":"Season","Value":"19"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":110},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Greenethorpe","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2019-04-30T00:00:00","[Clock].StartDate = 2019-04-29T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2019-05-21T00:00:00","[Clock].StartDate = 2019-05-20T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS3","[Manager].Script.sowDate = 2019-06-12T00:00:00","[Clock].StartDate = 2019-06-11T00:00:00"],"Paths":null,"Values":null,"Name":"TOS3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Ace,Blitz,Jumbo2","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Irr = Dryland,Irrigated","Name":"Irr","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Greenethorpe","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2020-03-08T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"GreenethorpeSILO.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":0,"ASCOrder":null,"ASCSubOrder":"","SoilType":"SNSW","LocalName":null,"Site":"Front paddock","NearestTown":"Young","Region":"Southern NSW","State":"NSW","Country":"Australia","NaturalVegetation":null,"ApsoilNumber":null,"Latitude":0,"Longitude":0,"LocationAccuracy":null,"YearOfSampling":null,"DataSource":"Kirkegaard/Lilley","Comments":null,"Name":"Greenethorpe_soil_2023","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nThis extends the 2019 soil onto another layer structure, and characterisation from lab data","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Physical, Models","Thickness":[100,100,300,300,300,300,300,300],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.38,1.53,1.55,1.47,1.48,1.55,1.57,1.57],"AirDry":[0.09,0.09,0.09,0.17,0.21,0.24,0.25,0.27],"LL15":[0.1,0.1,0.13,0.19,0.21,0.24,0.25,0.27],"DUL":[0.23,0.25,0.3,0.32,0.32,0.32,0.33,0.34],"SAT":[0.43,0.37,0.37,0.42,0.41,0.38,0.38,0.38],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.102,0.102,0.156,0.213,0.241,0.253,0.33,0.34],"KL":[0.045,0.045,0.045,0.045,0.03,0.02,0,0],"XF":[1,1,1,1,1,1,0,0],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":6,"SummerCona":3.5,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2.5,"DiffusConst":40,"DiffusSlope":16,"Salb":0.12,"CN2Bare":73,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[100,100,200,200,200,200,200,200],"SWCON":[0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":40,"Thickness":[100,100,300,300,300,300,300,300],"Carbon":[1.02,0.1,0.13,0.08,0.06,0.025,0.025,0.025],"CarbonUnits":0,"SoilCNRatio":[12,12,12,12,12,12,12,12],"FBiom":[0.06,0.05,0.035,0.015,0.01,0.01,0.01,0.01],"FInert":[0.01,0.01,0.35,0.425,0.55,0.75,0.95,0.99],"FOM":[347.129,270.344,163.972,99.454,60.322,36.587,22.191,22.191],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[100,100,300,300,300,300,300,300],"PH":[5.5,6.2,6.8,7.2,7.5,8,8,8],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":null,"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[100,100,300,300,300,300,300,300],"InitialValues":[0.181,0.204,0.262,0.317,0.31,0.283,0.269,0.27],"InitialPAWmm":144.8,"RelativeTo":"LL15","FilledFromTop":false,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,300,300,300,300,300,300],"InitialValues":[38.7,15.453,13.104,5.544,4.312,3.136,2.268,2.394],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,300,300,300,300,300,300],"InitialValues":[2.25,0.536,0.624,0.308,0.246,0.288,0.227,0.581],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,300,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"Urea","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Greenethorpe"},{"Key":"Season","Value":"19"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":120},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"GreenethorpePhen","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2019-04-18T00:00:00","[Clock].StartDate = 2019-04-17T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2019-05-21T00:00:00","[Clock].StartDate = 2019-05-20T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Ace,Blitz,Bolt,Greenfield,HallmarkXT,Jumbo2,Nugget","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"GreenethorpePhen","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2020-02-15T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"GreenethorpeSILO.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":0,"ASCOrder":null,"ASCSubOrder":"","SoilType":"SNSW","LocalName":null,"Site":"Front paddock","NearestTown":"Young","Region":"Southern NSW","State":"NSW","Country":"Australia","NaturalVegetation":null,"ApsoilNumber":null,"Latitude":0,"Longitude":0,"LocationAccuracy":null,"YearOfSampling":null,"DataSource":"Kirkegaard/Lilley","Comments":null,"Name":"Greenethorpe_soil_2019","ResourceName":null,"Children":[{"$type":"Models.Memo, Models","Text":"\r\nThe soil for Greenethorpe was developed by Julianne Lilley:\n\n\"Hi Elizabeth,\n\nLaura and I did a bit of playing around with this soil as I initially adapted something from a Young soil that I had characterised. The simulation I took it from was called Y:\\WORK\\OCP modelling\\Greenethorpe_Iandra\\greenethorpe_2013 and was saved on 16 jan 2019 , so this may be the last file we used. Jeremy has also been simulating at the Iandra site, so he may be worth asking, but I know he is not back at work yet.  Anyway this soil will be a good place to start.\n\nCheers\nJulianne\"\n\n**HOWEVER** this has not been added here yet. Julianne's version includes many narrow layers that I suspect will be inconsistent with the field data. So, JL's version may need to be altered.","Name":"memo","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Physical, Models","Thickness":[100,100,200,200,200,200,200,200,200,200,200],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.5,1.53,1.56,1.54,1.54,1.6,1.62,1.688,1.69,1.744,1.7],"AirDry":[0.08,0.08,0.1,0.1,0.15,0.15,0.15,0.15,0.15,0.15,0.15],"LL15":[0.08,0.102,0.156,0.213,0.241,0.253,0.258,0.256,0.268,0.268,0.268],"DUL":[0.25,0.211,0.232,0.287,0.311,0.35,0.35,0.35,0.35,0.335,0.335],"SAT":[0.28,0.241,0.262,0.317,0.341,0.369,0.369,0.363,0.357,0.342,0.344],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.102,0.102,0.156,0.213,0.241,0.253,0.258,0.256,0.268,0.268,0.268],"KL":[0.045,0.045,0.045,0.045,0.03,0.02,0.02,0.02,0.02,0.01,0.01],"XF":[1,1,1,1,1,1,0,0,0,0,0],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":6,"SummerCona":3.5,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2.5,"DiffusConst":40,"DiffusSlope":16,"Salb":0.12,"CN2Bare":73,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[100,100,200,200,200,200,200,200,200,200,200],"SWCON":[0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":40,"Thickness":[100,100,200,200,200,200,200,200,200,200,200],"Carbon":[1,0.35,0.22,0.22,0.18,0.135,0.105,0.1,0.1,0.07,0.045],"CarbonUnits":0,"SoilCNRatio":[12,12,12,12,12,12,12,12,12,12,12],"FBiom":[0.06,0.05,0.035,0.015,0.01,0.01,0.01,0.01,0.01,0.01,0.01],"FInert":[0.01,0.01,0.35,0.425,0.55,0.75,0.95,0.99,0.99,0.99,0.99],"FOM":[347.129,270.344,163.972,99.454,60.322,36.587,22.191,22.191,22.191,22.191,22.191],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[100,100,200,200,200,200,200,200,200,200,200],"PH":[5.8,5.9,6.7,7.05,7.25,7.4,7.7,8.1,8.35,8.45,8.5],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":null,"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[100,100,200,200,200,200,200,200,200,200,200],"InitialValues":[0.181,0.204,0.262,0.317,0.31,0.283,0.269,0.269,0.241,0.2,0.2],"InitialPAWmm":54.300000000000004,"RelativeTo":"LL15","FilledFromTop":false,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200,200,200,200,200],"InitialValues":[38.7,15.453,13.104,5.544,4.312,3.136,2.268,2.394,3.042,4.248,5.1],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200,200,200,200,200],"InitialValues":[2.25,0.536,0.624,0.308,0.246,0.288,0.227,0.581,0.507,0.389,0.272],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200,200,200,200,200],"InitialValues":[0,0,0,0,0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"Urea","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"GreenethorpePhen"},{"Key":"Season","Value":"19"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":120},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Gatton","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2019-05-10T00:00:00","[Clock].StartDate = 2019-05-09T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2019-06-07T00:00:00","[Clock].StartDate = 2019-06-06T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS3","[Manager].Script.sowDate = 2019-07-19T00:00:00","[Clock].StartDate = 2019-07-18T00:00:00"],"Paths":null,"Values":null,"Name":"TOS3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Ace,Blitz,Bolt,Digger,Greenfield,HallmarkXT,Jumbo2,Nugget","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Gatton","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2020-04-14T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"Gatton.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Soils;","using System.Diagnostics;","using System.Collections.Generic;","using System.IO;","using System.Data;","using System.Linq;","using System;","using Models.Interfaces;","using Models.Core;","using Models.PMF;","using APSIM.Shared.Utilities;","namespace Models","{","    [Serializable]","    [System.Xml.Serialization.XmlInclude(typeof(Model))]","    public class Script : Model","    {","        [Link] Clock clock;","        [Link] IWeather weather;","        [Link] Simulation simulation;","        ","        private DataTable data;","        private List<DateTime> dates = new List<DateTime>();","        private DateTime startDate;","        private DateTime endDate;","","        [Description(\"Name of file containing weather data to patch:\")]","        public string patchFileName { get; set; }","","        [Description(\"Date to start patching weather data (can be blank):\")]","        public string date1 { get; set; }","","        [Description(\"Date to stop patching weather data: (can be blank)\")]","        public string date2 { get; set; }","","        [Separator(\"Which data items should be patched\")]","","        [Description(\"Patch 'Rain'?\")] public bool PatchRain { get; set; }","        ","        [Description(\"Patch 'MinT'?\")] public bool PatchMinT { get; set; }","","        [Description(\"Patch 'MaxT'?\")] public bool PatchMaxT { get; set; }","","        [Description(\"Patch 'Radn'?\")] public bool PatchRadn { get; set; }","","        [Description(\"Patch 'CO2'?\")] public bool PatchCO2 { get; set; }","","        [Description(\"Patch 'VP'?\")] public bool PatchVP { get; set; }","        ","        [EventSubscribe(\"StartOfSimulation\")]","        private void OnStartOfSimulation(object sender, EventArgs e)","        {","            // Ensure filename is relative to the directory where the .apsimx file is located.","            string fullFileName = PathUtilities.GetAbsolutePath(patchFileName, simulation.FileName);","        ","            // Read in data.","            data = ApsimTextFile.ToTable(fullFileName);","            foreach (DataRow row in data.Rows)","                dates.Add(DataTableUtilities.GetDateFromRow(row));","            ","            // Ensure startDate and endDate always have a value.","            if (string.IsNullOrEmpty(date1))","                startDate = clock.StartDate;","            else","                startDate = DateTime.Parse(date1);","","             if (string.IsNullOrEmpty(date2))","                endDate = clock.EndDate;","            else","                endDate = DateTime.Parse(date2);","","        }","","        [EventSubscribe(\"PreparingNewWeatherData\")]","        private void OnPreparingNewWeatherData(object sender, EventArgs e)","        {","            if (clock.Today >= startDate && clock.Today <= endDate)","            {","                // check to see if we have a row of data for today.","                int rowIndex = dates.IndexOf(clock.Today);","                if (rowIndex != -1)","                {","                    // Yes we do have data for today so patch the data.","                    foreach (DataColumn column in data.Columns)","                    {","                        if (PatchRain && (column.ColumnName.Equals(\"patch_rain\", StringComparison.InvariantCultureIgnoreCase))) ","                            weather.Rain = Convert.ToDouble(data.Rows[rowIndex][column.ColumnName]);","                        else if (PatchMinT && (column.ColumnName.Equals(\"patch_maxt\", StringComparison.InvariantCultureIgnoreCase)))","                            weather.MaxT = Convert.ToDouble(data.Rows[rowIndex][column.ColumnName]);","                        else if (PatchMaxT && (column.ColumnName.Equals(\"patch_mint\", StringComparison.InvariantCultureIgnoreCase)))","                            weather.MinT = Convert.ToDouble(data.Rows[rowIndex][column.ColumnName]);","                        else if ((PatchRadn && column.ColumnName.Equals(\"patch_radn\", StringComparison.InvariantCultureIgnoreCase)))","                            weather.Radn = Convert.ToDouble(data.Rows[rowIndex][column.ColumnName]);","                    }","                }","            }","        }","    }","}"],"Parameters":[{"Key":"patchFileName","Value":"GilbertWS.met"},{"Key":"date1","Value":""},{"Key":"date2","Value":""},{"Key":"PatchRain","Value":"True"},{"Key":"PatchMinT","Value":"True"},{"Key":"PatchMaxT","Value":"True"},{"Key":"PatchRadn","Value":"True"},{"Key":"PatchCO2","Value":"False"},{"Key":"PatchVP","Value":"False"}],"Name":"PatchWeather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":93,"ASCOrder":"Vertosol","ASCSubOrder":null,"SoilType":"Clay","LocalName":null,"Site":"Generic-Qld","NearestTown":null,"Region":null,"State":"Generic","Country":"Australia","NaturalVegetation":"NA","ApsoilNumber":"514-GENERIC","Latitude":-27.183286,"Longitude":151.263748,"LocationAccuracy":"Regional Soil Type","YearOfSampling":null,"DataSource":"Generic soil. CSIRO Sustainable Ecosystems, Toowoomba","Comments":"Generic soil developed by Allan Peake. 'Typical Vertosol' soil properties have been calculated as the average of vertosols with similar characteristics from within the Apsoil database. Groupings were made on the basis of bulk density. Measured BD, DUL and CLL for the groups were then averaged to derive the characteristics of the typical Vertosols. They can then be used in conjunction with measured soil water to simplify the selection of appropriate Vertosols, for paddocks where full soil characterisations have not yet been completed. For more information see Peake et al. 2010: ‘A rapid method for estimating the plant available water capacity of Vertosols’, 2010 Australian Agronomy Conference. Typical Vertosols are different to 'Generic' soil types elsewhere in the Apsoil database, which are representative of certain soil types and districts, but have not been calculated from large numbers of similar, characterised soils.\n\n","Name":"Vertosol No2 (PAWC-269 No514-Generic)","ResourceName":null,"Children":[{"$type":"Models.Soils.Physical, Models","Thickness":[150,150,300,300,300,300,300],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.06,1.09,1.11,1.13,1.18,1.23,1.25],"AirDry":[0.13,0.217,0.295,0.295,0.295,0.295,0.295],"LL15":[0.259,0.271,0.295,0.295,0.295,0.295,0.295],"DUL":[0.519,0.508,0.501,0.494,0.474,0.457,0.45],"SAT":[0.569,0.558,0.551,0.544,0.524,0.507,0.5],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.259,0.271,0.295,0.31,0.34,0.368,0.414],"KL":[0.06,0.06,0.06,0.04,0.04,0.02,0.02],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"WheatSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.259,0.271,0.295,0.31,0.34,0.368,0.414],"KL":[0.06,0.06,0.06,0.04,0.04,0.02,0.02],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.259,0.271,0.295,0.31,0.34,0.368,0.414],"KL":[0.1,0.1,0.1,0.1,0.09,0.07,0.05],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"CottonSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.259,0.271,0.295,0.31,0.34,0.368,0.414],"KL":[0.07,0.07,0.07,0.05,0.05,0.04,0.03],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"SorghumSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":6,"SummerCona":3.5,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2.5,"DiffusConst":40,"DiffusSlope":16,"Salb":0.12,"CN2Bare":73,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[150,150,300,300,300,300,300],"SWCON":[0.3,0.3,0.3,0.3,0.3,0.3,0.3],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[26.41509433962264,8.562691131498472,2.102102102102102,2.064896755162242,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"UREA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":40,"Thickness":[150,150,300,300,300,300,300],"Carbon":[1.1,0.88,0.55,0.275,0.165,0.11,0.11],"CarbonUnits":1,"SoilCNRatio":[12,12,12,12,12,12,12],"FBiom":[0.04,0.02,0.02,0.02,0.01,0.01,0.01],"FInert":[0.4,0.6,0.8,1,1,1,1],"FOM":[347.1290323127564,270.3443621919937,163.97214434990104,99.45413288704063,60.32198083112468,36.58713082867487,22.1912165985086],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[150,150,300,300,300,300,300],"PH":[7.3,7.7,8.1,8.5,8.5,8.6,8.6],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":["Measured","Measured","Measured","Measured","Measured","Measured","Measured"],"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0.519,0.508,0.501,0.494,0.474,0.457,0.45],"InitialPAWmm":344.85,"RelativeTo":"LL15","FilledFromTop":true,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Gatton"},{"Key":"Season","Value":"19"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":120},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Walgett","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2019-05-21T00:00:00","[Clock].StartDate = 2019-05-20T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2019-06-09T00:00:00","[Clock].StartDate = 2019-06-08T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS3","[Manager].Script.sowDate = 2019-06-28T00:00:00","[Clock].StartDate = 2019-06-27T00:00:00"],"Paths":null,"Values":null,"Name":"TOS3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Ace,Blitz,Bolt,HallmarkXT,Jumbo2","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Population = 132,150","Name":"Pop","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Walgett","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2020-03-24T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"Walgett.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":103,"ASCOrder":"Vertosol","ASCSubOrder":null,"SoilType":"Clay","LocalName":null,"Site":"Generic-Qld","NearestTown":null,"Region":null,"State":"Generic","Country":"Australia","NaturalVegetation":"NA","ApsoilNumber":"523-GENERIC","Latitude":-27.183286,"Longitude":151.263748,"LocationAccuracy":"Regional Soil Type","YearOfSampling":null,"DataSource":"Generic soil. CSIRO Sustainable Ecosystems, Toowoomba","Comments":"Generic soil developed by Allan Peake. 'Typical Vertosol' soil properties have been calculated as the average of vertosols with similar characteristics from within the Apsoil database. Groupings were made on the basis of bulk density. Measured BD, DUL and CLL for the groups were then averaged to derive the characteristics of the typical Vertosols. They can then be used in conjunction with measured soil water to simplify the selection of appropriate Vertosols, for paddocks where full soil characterisations have not yet been completed. For more information see Peake et al. 2010: ‘A rapid method for estimating the plant available water capacity of Vertosols’, 2010 Australian Agronomy Conference. Typical Vertosols are different to 'Generic' soil types elsewhere in the Apsoil database, which are representative of certain soil types and districts, but have not been calculated from large numbers of similar, characterised soils.\n\n","Name":"Vertosol No11 (PAWC-136 No523-Generic)","ResourceName":null,"Children":[{"$type":"Models.Soils.Physical, Models","Thickness":[150,150,300,300,300,300,300],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.59,1.62,1.59,1.58,1.61,1.64,1.7],"AirDry":[0.089,0.14,0.19,0.19,0.19,0.19,0.19],"LL15":[0.177,0.175,0.19,0.19,0.19,0.19,0.19],"DUL":[0.32,0.308,0.321,0.322,0.312,0.301,0.28],"SAT":[0.37,0.358,0.371,0.372,0.362,0.351,0.329],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.177,0.175,0.19,0.22,0.251,0.278,0.28],"KL":[0.06,0.06,0.06,0.04,0.04,0.02,0.02],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"WheatSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.177,0.175,0.19,0.22,0.251,0.278,0.28],"KL":[0.06,0.06,0.06,0.04,0.04,0.02,0.02],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.177,0.175,0.19,0.22,0.251,0.278,0.28],"KL":[0.1,0.1,0.1,0.1,0.09,0.07,0.05],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"CottonSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.177,0.175,0.19,0.22,0.251,0.278,0.28],"KL":[0.07,0.07,0.07,0.05,0.05,0.04,0.03],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"SorghumSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":6,"SummerCona":3.5,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2.5,"DiffusConst":40,"DiffusSlope":16,"Salb":0.13,"CN2Bare":73,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[150,150,300,300,300,300,300],"SWCON":[0.3,0.3,0.3,0.3,0.3,0.3,0.3],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[8.80503144654088,2.8806584362139915,0.7337526205450734,0.7383966244725738,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"UREA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":40,"Thickness":[150,150,300,300,300,300,300],"Carbon":[0.9,0.72,0.45,0.225,0.135,0.09,0.09],"CarbonUnits":1,"SoilCNRatio":[12,12,12,12,12,12,12],"FBiom":[0.04,0.02,0.02,0.02,0.01,0.01,0.01],"FInert":[0.4,0.6,0.8,1,1,1,1],"FOM":[347.1290323127564,270.3443621919937,163.97214434990104,99.45413288704063,60.32198083112468,36.58713082867487,22.1912165985086],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[150,150,300,300,300,300,300],"PH":[8.1,8.7,8.9,8,7,6.4,5.8],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":["Estimated based on local knowledge","Estimated based on local knowledge","Estimated based on local knowledge","Estimated based on local knowledge","Estimated based on local knowledge","Estimated based on local knowledge","Estimated based on local knowledge"],"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0.32,0.308,0.321,0.322,0.312,0.301,0.28],"InitialPAWmm":217.2,"RelativeTo":"LL15","FilledFromTop":true,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Walgett"},{"Key":"Season","Value":"19"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":"0"},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Millmerran","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2019-06-15T00:00:00","[Clock].StartDate = 2019-06-14T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2019-07-02T00:00:00","[Clock].StartDate = 2019-07-01T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS3","[Manager].Script.sowDate = 2019-07-15T00:00:00","[Clock].StartDate = 2019-07-14T00:00:00"],"Paths":null,"Values":null,"Name":"TOS3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Ace,Blitz,Greenfield,HallmarkXT,Jumbo2","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Millmerran","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2020-04-10T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"Millmerran.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":103,"ASCOrder":"Vertosol","ASCSubOrder":null,"SoilType":"Clay","LocalName":null,"Site":"Generic-Qld","NearestTown":null,"Region":null,"State":"Generic","Country":"Australia","NaturalVegetation":"NA","ApsoilNumber":"523-GENERIC","Latitude":-27.183286,"Longitude":151.263748,"LocationAccuracy":"Regional Soil Type","YearOfSampling":null,"DataSource":"Generic soil. CSIRO Sustainable Ecosystems, Toowoomba","Comments":"Generic soil developed by Allan Peake. 'Typical Vertosol' soil properties have been calculated as the average of vertosols with similar characteristics from within the Apsoil database. Groupings were made on the basis of bulk density. Measured BD, DUL and CLL for the groups were then averaged to derive the characteristics of the typical Vertosols. They can then be used in conjunction with measured soil water to simplify the selection of appropriate Vertosols, for paddocks where full soil characterisations have not yet been completed. For more information see Peake et al. 2010: ‘A rapid method for estimating the plant available water capacity of Vertosols’, 2010 Australian Agronomy Conference. Typical Vertosols are different to 'Generic' soil types elsewhere in the Apsoil database, which are representative of certain soil types and districts, but have not been calculated from large numbers of similar, characterised soils.\n\n","Name":"Vertosol No11 (PAWC-136 No523-Generic)","ResourceName":null,"Children":[{"$type":"Models.Soils.Physical, Models","Thickness":[150,150,300,300,300,300,300],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.59,1.62,1.59,1.58,1.61,1.64,1.7],"AirDry":[0.089,0.14,0.19,0.19,0.19,0.19,0.19],"LL15":[0.177,0.175,0.19,0.19,0.19,0.19,0.19],"DUL":[0.32,0.308,0.321,0.322,0.312,0.301,0.28],"SAT":[0.37,0.358,0.371,0.372,0.362,0.351,0.329],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.177,0.175,0.19,0.22,0.251,0.278,0.28],"KL":[0.06,0.06,0.06,0.04,0.04,0.02,0.02],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"WheatSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.177,0.175,0.19,0.22,0.251,0.278,0.28],"KL":[0.06,0.06,0.06,0.04,0.04,0.02,0.02],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.177,0.175,0.19,0.22,0.251,0.278,0.28],"KL":[0.1,0.1,0.1,0.1,0.09,0.07,0.05],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"CottonSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.SoilCrop, Models","LL":[0.177,0.175,0.19,0.22,0.251,0.278,0.28],"KL":[0.07,0.07,0.07,0.05,0.05,0.04,0.03],"XF":[1,1,1,1,1,1,1],"LLMetadata":["Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility","Field measured and checked for sensibility"],"KLMetadata":null,"XFMetadata":null,"Name":"SorghumSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":6,"SummerCona":3.5,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2.5,"DiffusConst":40,"DiffusSlope":16,"Salb":0.13,"CN2Bare":73,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[150,150,300,300,300,300,300],"SWCON":[0.3,0.3,0.3,0.3,0.3,0.3,0.3],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[8.80503144654088,2.8806584362139915,0.7337526205450734,0.7383966244725738,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"UREA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":40,"Thickness":[150,150,300,300,300,300,300],"Carbon":[0.9,0.72,0.45,0.225,0.135,0.09,0.09],"CarbonUnits":1,"SoilCNRatio":[12,12,12,12,12,12,12],"FBiom":[0.04,0.02,0.02,0.02,0.01,0.01,0.01],"FInert":[0.4,0.6,0.8,1,1,1,1],"FOM":[347.1290323127564,270.3443621919937,163.97214434990104,99.45413288704063,60.32198083112468,36.58713082867487,22.1912165985086],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[150,150,300,300,300,300,300],"PH":[8.1,8.7,8.9,8,7,6.4,5.8],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":["Estimated based on local knowledge","Estimated based on local knowledge","Estimated based on local knowledge","Estimated based on local knowledge","Estimated based on local knowledge","Estimated based on local knowledge","Estimated based on local knowledge"],"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[150,150,300,300,300,300,300],"InitialValues":[0.32,0.308,0.321,0.322,0.312,0.301,0.28],"InitialPAWmm":217.2,"RelativeTo":"LL15","FilledFromTop":true,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Millmerran"},{"Key":"Season","Value":"19"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":52},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Beulah","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2001-05-10T00:00:00","[Clock].StartDate = 2001-05-09T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2001-06-17T00:00:00","[Clock].StartDate = 2001-06-16T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS3","[Manager].Script.sowDate = 2001-07-12T00:00:00","[Clock].StartDate = 2001-07-11T00:00:00"],"Paths":null,"Values":null,"Name":"TOS3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Digger,Northfield,Nugget","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Beulah","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2002-04-08T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"beulah.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":0,"ASCOrder":null,"ASCSubOrder":null,"SoilType":"Black Vertosol","LocalName":null,"Site":"Jimbour","NearestTown":"Jimbour, Q 4352","Region":"South East Queensland","State":null,"Country":null,"NaturalVegetation":"Grassland, mainly Qld bluegrass","ApsoilNumber":null,"Latitude":0,"Longitude":0,"LocationAccuracy":null,"YearOfSampling":null,"DataSource":"Daniel Rodriguez lentil expt","Comments":null,"Name":"Beulah","ResourceName":null,"Children":[{"$type":"Models.Soils.Physical, Models","Thickness":[100,100,200,200,200,200,200],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.37,1.37,1.26,1.35,1.4,1.45,1.46],"AirDry":[0.05,0.05,0.05,0.05,0.05,0.05,0.05],"LL15":[0.15,0.22,0.22,0.26,0.29,0.33,0.33],"DUL":[0.38,0.38,0.39,0.38,0.37,0.36,0.36],"SAT":[0.45,0.45,0.49,0.46,0.43,0.42,0.41],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.15,0.22,0.22,0.26,0.29,0.33,0.33],"KL":[0.08,0.08,0.08,0.08,0.01,0,0],"XF":[1,1,1,1,0,0,0],"LLMetadata":null,"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":4,"SummerCona":2.5,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2.5,"DiffusConst":88,"DiffusSlope":35.4,"Salb":0.13,"CN2Bare":80,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[100,100,200,200,200,200,200],"SWCON":[0.2,0.2,0.2,0.2,0.2,0.2,0.2],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[33,19.5,13,7,2,1,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"UREA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":40,"Thickness":[100,100,200,200,200,200,200],"Carbon":[0.64,0.04,0.01,0.01,0.01,0.01,0.01],"CarbonUnits":1,"SoilCNRatio":[14.5,14.5,14.5,14.5,14.5,14.5,14.5],"FBiom":[0.035,0.025,0.015,0.01,0.01,0.01,0.01],"FInert":[0.3,0.5,0.6,0.75,0.9,0.99,0.99],"FOM":[86.7822580781891,67.58609054799842,40.99303608747526,24.863533221760157,15.08049520778117,9.146782707168718,5.54780414962715],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[100,100,200,200,200,200,200],"PH":[8.8,8.8,8.8,8.8,8.7,8.7,8.7],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":null,"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[0.173,0.236,0.237,0.272,0.298,0.333,0.333],"InitialPAWmm":12.500000000000018,"RelativeTo":"LL15","FilledFromTop":false,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Beulah"},{"Key":"Season","Value":"01"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":152},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Birchip","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2001-05-10T00:00:00","[Clock].StartDate = 2001-05-09T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2001-06-17T00:00:00","[Clock].StartDate = 2001-06-16T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS3","[Manager].Script.sowDate = 2001-07-12T00:00:00","[Clock].StartDate = 2001-07-11T00:00:00"],"Paths":null,"Values":null,"Name":"TOS3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Digger,Northfield,Nugget","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Birchip","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2002-04-08T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"birchip.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":0,"ASCOrder":null,"ASCSubOrder":null,"SoilType":"Black Vertosol","LocalName":null,"Site":"Jimbour","NearestTown":"Jimbour, Q 4352","Region":"South East Queensland","State":null,"Country":null,"NaturalVegetation":"Grassland, mainly Qld bluegrass","ApsoilNumber":null,"Latitude":0,"Longitude":0,"LocationAccuracy":null,"YearOfSampling":null,"DataSource":"Daniel Rodriguez lentil expt","Comments":null,"Name":"FSbirchip","ResourceName":null,"Children":[{"$type":"Models.Soils.Physical, Models","Thickness":[100,150,150,150,150,150,300],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.33,1.36,1.39,1.42,1.44,1.43,1.41],"AirDry":[0.1,0.1,0.1,0.2,0.2,0.2,0.2],"LL15":[0.12,0.24,0.31,0.33,0.38,0.243,0.28],"DUL":[0.379,0.371,0.384,0.386,0.381,0.38,0.39],"SAT":[0.498,0.48,0.46,0.464,0.457,0.46,0.468],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.12,0.24,0.31,0.33,0.38,0.243,0.28],"KL":[0.08,0.08,0.08,0.08,0.01,0,0],"XF":[1,1,1,1,0.1,0,0],"LLMetadata":null,"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":4,"SummerCona":2.5,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2.5,"DiffusConst":88,"DiffusSlope":35.4,"Salb":0.13,"CN2Bare":80,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[100,150,150,150,150,150,300],"SWCON":[0.2,0.2,0.2,0.2,0.2,0.2,0.2],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,150,150,150,150,150,300],"InitialValues":[33,19.5,13,7,2,1,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,150,150,150,150,150,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,150,150,150,150,150,300],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"UREA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":40,"Thickness":[100,150,150,150,150,150,300],"Carbon":[0.64,0.04,0.01,0.01,0.01,0.01,0.01],"CarbonUnits":1,"SoilCNRatio":[14.5,14.5,14.5,14.5,14.5,14.5,14.5],"FBiom":[0.035,0.025,0.015,0.01,0.01,0.01,0.01],"FInert":[0.3,0.5,0.6,0.75,0.9,0.99,0.99],"FOM":[87.48725149702103,59.15663388603533,40.0001974327149,27.047106800204112,18.288559387542907,12.366254436839052,5.653996559642656],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[100,150,150,150,150,150,300],"PH":[8.8,8.8,8.8,8.8,8.7,8.7,8.7],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":null,"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[100,150,150,150,150,150,300],"InitialValues":[0.1459,0.2531,0.3174,0.3356,0.3801,0.2567,0.29100000000000004],"InitialPAWmm":11.874999999999996,"RelativeTo":"LL15","FilledFromTop":false,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Birchip"},{"Key":"Season","Value":"01"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":152},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Experiment, Models","DisabledSimNames":null,"Name":"Horsham","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factors, Models","Name":"Factors","ResourceName":null,"Children":[{"$type":"Models.Factorial.Permutation, Models","Name":"Permutation","ResourceName":null,"Children":[{"$type":"Models.Factorial.Factor, Models","Specification":"","Name":"TOS","ResourceName":null,"Children":[{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS1","[Manager].Script.sowDate = 2001-05-03T00:00:00","[Clock].StartDate = 2001-05-02T00:00:00"],"Paths":null,"Values":null,"Name":"TOS1","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS2","[Manager].Script.sowDate = 2001-06-03T00:00:00","[Clock].StartDate = 2001-06-02T00:00:00"],"Paths":null,"Values":null,"Name":"TOS2","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS3","[Manager].Script.sowDate = 2001-06-14T00:00:00","[Clock].StartDate = 2001-06-13T00:00:00"],"Paths":null,"Values":null,"Name":"TOS3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.CompositeFactor, Models","Specifications":["[Manager].Script.TOS = TOS4","[Manager].Script.sowDate = 2001-07-05T00:00:00","[Clock].StartDate = 2001-07-04T00:00:00"],"Paths":null,"Values":null,"Name":"TOS4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Factorial.Factor, Models","Specification":"[Manager].Script.Cultivar = Digger,Northfield,Nugget","Name":"Cultivar","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Simulation, Models","Descriptors":null,"Name":"Horsham","ResourceName":null,"Children":[{"$type":"Models.Clock, Models","Start":"2018-09-05T00:00:00","End":"2002-04-01T00:00:00","Name":"Clock","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Summary, Models","Verbosity":100,"Name":"Summary","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Climate.Weather, Models","ConstantsFile":null,"FileName":"horsham.met","ExcelWorkSheetName":"","Name":"Weather","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Arbitrator.SoilArbitrator, Models","Name":"SoilArbitrator","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Core.Zone, Models","Area":1,"Slope":0,"AspectAngle":0,"Altitude":50,"Name":"Paddock","ResourceName":null,"Children":[{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.sowDate as sowDate","[Clock].Today","[Lentil].Phenology.CurrentStageName as Harvest","[Lentil].AboveGround.Wt","[Lentil].Grain.Wt ","[Lentil].Leaf.Wt","[Lentil].Stem.Wt","[Lentil].Shell.Wt ","divide([Lentil].Grain.Wt, [Lentil].AboveGround.Wt) as HarvestIndex","[Lentil].Phenology.FloweringDAS as FloweringDAS ","[Lentil].Phenology.BuddingDAS as BuddingDAS","[Lentil].Phenology.MaturityDAS as MaturityDAS","[Lentil].Grain.Number ","[Lentil].Grain.Size as GrainSize","//[Lentil].Leaf.NumberOfLeaves as LeafNo","Max of [Lentil].LAI from [Lentil].Sowing to [Clock].Today as LAIMax","First of Sum([Soil].NO3.kgha) from [Lentil].Sowing to [Clock].Today as NO3Sowing","Sum([Soil].NO3.kgha) as NO3Harvest"],"EventNames":["[Lentil].Harvesting"],"GroupByVariableName":null,"Name":"Harvests","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Clock].Today ","[Lentil].DaysAfterSowing as DAS","[Lentil].Phenology.CurrentPhaseName as PhaseName","[Lentil].Phenology.CurrentStageName as StageName","[Lentil].AboveGround.Wt","//[Lentil].AboveGround.Wt * 10 as biomass_kgha","[Lentil].Grain.Wt","//[Lentil].Grain.Wt * 10 as yield_kgha  ","[Lentil].Leaf.LAI as LAI","[Leaf].WaterDemand as SWDemand","[Leaf].WaterAllocation as Ep","[Soil].SoilWater.Es as Es","[Soil].SoilWater.ESW as ESW","[Soil].SoilWater.SW as SW","Sum([NO3].kgha) as NO3","[Weather].Rain as Rain","[Soil].SoilWater.Runoff as Runoff","[Soil].SoilWater.Drainage as Drainage","[Irrigation].IrrigationApplied as IrrigationApplied"],"EventNames":["[Clock].DoReport"],"GroupByVariableName":null,"Name":"Daily","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Report, Models","VariableNames":["[Manager].Script.Key as key","[Soil].Physical.Thickness as dlayer","[Soil].Physical.AirDry as AirDry","[Soil].Physical.LL15 as LL15","[LentilSoil].LL as CLL","[Soil].Physical.DUL as DUL","[Soil].Physical.SAT as SAT"],"EventNames":["[Clock].StartOfSimulation"],"GroupByVariableName":null,"Name":"Static","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Irrigation, Models","Name":"Irrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Fertiliser, Models","Name":"Fertiliser","ResourceName":"Fertiliser","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Soil, Models","RecordNumber":0,"ASCOrder":null,"ASCSubOrder":null,"SoilType":"Black Vertosol","LocalName":null,"Site":"Jimbour","NearestTown":"Jimbour, Q 4352","Region":"South East Queensland","State":null,"Country":null,"NaturalVegetation":"Grassland, mainly Qld bluegrass","ApsoilNumber":null,"Latitude":0,"Longitude":0,"LocationAccuracy":null,"YearOfSampling":null,"DataSource":"Daniel Rodriguez lentil expt","Comments":null,"Name":"dooen","ResourceName":null,"Children":[{"$type":"Models.Soils.Physical, Models","Thickness":[100,100,200,200,200,200,200],"ParticleSizeClay":null,"ParticleSizeSand":null,"ParticleSizeSilt":null,"Rocks":null,"Texture":null,"BD":[1.2,1.37,1.28,1.38,1.4,1.45,1.45],"AirDry":[0.1,0.11,0.14,0.16,0.19,0.19,0.19],"LL15":[0.145,0.145,0.197,0.21,0.24,0.243,0.28],"DUL":[0.384,0.375,0.405,0.391,0.373,0.343,0.32],"SAT":[0.54,0.419,0.487,0.468,0.449,0.427,0.389],"KS":null,"BDMetadata":null,"AirDryMetadata":null,"LL15Metadata":null,"DULMetadata":null,"SATMetadata":null,"KSMetadata":null,"RocksMetadata":null,"TextureMetadata":null,"ParticleSizeSandMetadata":null,"ParticleSizeSiltMetadata":null,"ParticleSizeClayMetadata":null,"Name":"Physical","ResourceName":null,"Children":[{"$type":"Models.Soils.SoilCrop, Models","LL":[0.145,0.145,0.197,0.21,0.24,0.243,0.28],"KL":[0.08,0.08,0.08,0.08,0.01,0,0],"XF":[1,1,1,1,0.1,0,0],"LLMetadata":null,"KLMetadata":null,"XFMetadata":null,"Name":"LentilSoil","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.WaterModel.WaterBalance, Models","SummerDate":"1-Nov","SummerU":4,"SummerCona":2,"WinterDate":"1-Apr","WinterU":4,"WinterCona":2,"DiffusConst":88,"DiffusSlope":35.4,"Salb":0.13,"CN2Bare":72,"CNRed":20,"CNCov":0.8,"DischargeWidth":"NaN","CatchmentArea":"NaN","PSIDul":-100,"Thickness":[100,100,200,200,200,200,200],"SWCON":[0.2,0.2,0.2,0.2,0.2,0.2,0.2],"KLAT":null,"Name":"SoilWater","ResourceName":"WaterBalance","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.CERESSoilTemperature, Models","Name":"Temperature","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[9.2,7.599999999999999,4.9,2.7,1.5,1.8000000000000005,1.4],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NO3","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[0.3,0.29927007299270075,0.30078125,0.3007246376811594,0.3,0.5,0.5],"InitialValuesUnits":0,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"NH4","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Solute, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[0,0,0,0,0,0,0],"InitialValuesUnits":1,"WaterTableConcentration":0,"D0":0,"Exco":null,"FIP":null,"DepthConstant":0,"MaxDepthSoluteAccessible":0,"RunoffEffectivenessAtMovingSolute":0,"MaxEffectiveRunoff":0,"Name":"UREA","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Organic, Models","FOMCNRatio":20,"Thickness":[100,100,200,200,200,200,200],"Carbon":[1.12,1.12,0.77,0.5,0.4,0.28,0.23],"CarbonUnits":1,"SoilCNRatio":[14.5,14.5,14.5,14.5,14.5,14.5,14.5],"FBiom":[0.02,0.02,0.015,0.01,0.01,0.01,0.01],"FInert":[0.36,0.36,0.5,0.59,0.84,0.8,0.8],"FOM":[347.1290323127564,270.3443621919937,163.97214434990104,99.45413288704063,60.32198083112468,36.58713082867487,22.1912165985086],"CarbonMetadata":null,"FOMMetadata":null,"Name":"Organic","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Chemical, Models","Thickness":[100,100,200,200,200,200,200],"PH":[8.2,8.5,9.1,9.2,8.9,9.02,9],"PHUnits":0,"EC":null,"ESP":null,"CEC":null,"ECMetadata":null,"CLMetadata":null,"ESPMetadata":null,"PHMetadata":null,"Name":"Chemical","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Water, Models","Thickness":[100,100,200,200,200,200,200],"InitialValues":[0.15694999999999998,0.1565,0.2074,0.21905,0.24664999999999998,0.248,0.28200000000000003],"InitialPAWmm":8.965,"RelativeTo":"LL15","FilledFromTop":false,"Name":"Water","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Soils.Nutrients.Nutrient, Models","Name":"Nutrient","ResourceName":"Nutrient","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false},{"$type":"Models.MicroClimate, Models","a_interception":0,"b_interception":1,"c_interception":0,"d_interception":0,"SoilHeatFluxFraction":0.4,"MinimumHeightDiffForNewLayer":0,"NightInterceptionFraction":0.5,"ReferenceHeight":2,"Name":"MicroClimate","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Surface.SurfaceOrganicMatter, Models","SurfOM":[],"Canopies":[],"InitialResidueName":"wheat_stubble","InitialResidueType":"wheat","InitialResidueMass":0,"InitialStandingFraction":0,"InitialCPR":0,"InitialCNR":80,"Name":"SurfaceOrganicMatter","ResourceName":"SurfaceOrganicMatter","Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using System.IO;","using System.Collections.Generic;","using System.Text;","using System.Linq;","using System.Data;","using APSIM.Shared.Utilities;","using Models.Utilities;","using Models.Soils;","using Models.PMF;","using Models.Core;","using System;","","namespace Models","{","    [Serializable]","    public class Script : Model","    {","        private IEnumerable<Overrides.Override> undos;","","        [Link] Simulation Simulation;","        [Link] Clock Clock;","        [Link] Summary Summary;","        [Link] public Plant crop;","        [Link] Operations Operations;","        [Link(ByName=true)] private Water Water;","        [Link(ByName=true)] private Solute NO3; ","        [Link(ByName=true)] private Solute NH4; ","        [Link(ByName=true)] private Solute Urea; ","               ","        public string Key { get; set; }","        ","        [Description(\"Index table of experiment\")]","        public string csvFile { get; set; }","","        [Description(\"Site Name\")]","        public string SiteName { get; set; }","                        ","        [Description(\"Season\")]","        public string Season { get; set; }","                        ","        [Description(\"Time of Sowing (TOS1,2,3)\")]","        public string TOS { get; set; }","        ","        [Description(\"Cultivar\")]","        public string Cultivar { get; set; }","         ","        [Description(\"Irrigation\")]","        public string Irr { get; set; }","         ","        [Description(\"Sowing density (/m2)\")]","        public double Population { get; set; } ","","        [Description(\"Sowing depth (mm)\")]","        public double SowingDepth { get; set; }","        ","","        [Description(\"Row spacing (mm)\")]","        public double RowSpacing { get; set; }","        ","        public string sowDate { get; set; }","","        [EventSubscribe(\"Commencing\")]","        private void OnSimulationCommencing(object sender, EventArgs e)","        {","            Key = Simulation.Name.ToLower(); //(SiteName + Season + TOS + \"Cv\" + Cultivar + Irr).ToLower();","            List<string> myCommands = new List<string>();","            List<Operation> myOperations = new List<Operation>();","                        ","            using (StreamReader sr = new StreamReader(Path.GetDirectoryName(Simulation.FileName) + \"/\" + csvFile))","            {","                List<string> headers = SplitStringHonouringQuotes(sr.ReadLine(), \",\");","                var idCol = headers.IndexOf(\"id\");","                if (idCol < 0) {throw new Exception(\"Missing key id '\" + Key + \"'\");}","                ","                var dateCol = headers.IndexOf(\"date\");","                if (dateCol < 0) {throw new Exception(\"Missing date column '\" + Key + \"'\");}","                ","                var cmdCol = headers.IndexOf(\"command\");","                if (cmdCol < 0) {throw new Exception(\"Missing command column '\" + Key + \"'\");}","","                while (!sr.EndOfStream)","                {","                    string[] rows = SplitStringHonouringQuotes( sr.ReadLine(), \",\" ).ToArray();","                    var id = rows[idCol].ToLower();","                    if (id == Key &&","                        rows[dateCol].Replace(\"\\\"\", \"\").ToLower() == \"init\") {","                        myCommands.Add(rows[cmdCol].Replace(\"\\\"\", \"\"));","                    } else if (id == Key.ToLower()) {","                        var op = new Operation{Date = rows[dateCol], Action = rows[cmdCol].Replace(\"\\\"\", \"\")};","                        myOperations.Add(op);","                    }","                }","             }","","             if (myCommands.Count <= 0) {","                Summary.WriteMessage(this, \"No commands for '\" + Key + \"'\", MessageType.Information);","                Clock.EndDate = Clock.Today;","                //throw new Exception(\"No commands for '\" + Key + \"'\");","             } else {","                Summary.WriteMessage(this, \"Applying commands for '\" + Key + \"'\\n\" +","                                     string.Join(\"\\n\", myCommands), MessageType.Information);","                undos = Overrides.Apply(Simulation, Overrides.ParseStrings(myCommands.ToArray()));","             }","             ","             ","             if (myOperations.Count > 0) {","                 Summary.WriteMessage(this, \"Setting operations for '\" + Key + \"'\\n\" +","                                      string.Join(\"\\n\", myOperations.Select(x => x.Date + \" : \" + x.Action)), ","                                      MessageType.Information);","               ","                Operations.Operation = myOperations; // should check if nothign already there?","            }","        }","","        [EventSubscribe(\"Completed\")]","        private void OnSimulationCompleted(object sender, EventArgs e)","        {","            if (undos != null)","            {","                Overrides.Apply(Simulation, undos);","                undos = null;","            }","        }","               ","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","          if (sowDate != null) {","            if (DateUtilities.DatesAreEqual(sowDate, Clock.Today) &&","                !crop.IsAlive )","            {","                   crop.Sow(population: Population, cultivar: Cultivar, depth: SowingDepth, rowSpacing: RowSpacing);","            }","          }","        }","","        [Link(ByName=true)] private Report Daily;","        [EventSubscribe(\"DoReport\")]","        private void OnDoReport(object sender, EventArgs e) {","            if (crop.IsAlive) ","               Daily.DoOutput();","        }","        ","        [Link(ByName=true)] private Report Harvests;","        private bool hasReported = false;","        ","        [EventSubscribe(\"EndOfDay\")]","        private void OnDoCalculations(object sender, EventArgs e)","        {","            if (crop.IsReadyForHarvesting)","            {","                crop.Harvest();","                hasReported = true;","                crop.EndCrop();","                Clock.EndDate = Clock.Today;","            }","        }","        // Make sure something is written","        [EventSubscribe(\"EndOfSimulation\")]","        private void OnEndOfSimulation(object sender, EventArgs e) ","        {","            if (!hasReported)","            {","                Harvests.DoOutput();","                hasReported = true;","            }","        }","        ","                /// <summary>","        /// This method splits values on a comma but also honours double quotes","        /// ensuring something in double quotes is never split.","        ///     eg: if text = value1, \"value 2, 2a\", value3","        ///     then: words[0] = value1","        ///           words[1] = value2, 2a","        ///           words[2] = value3","        /// All values returned have been trimmed of spaces and double quotes.","        /// </summary>","        public List<string> SplitStringHonouringQuotes(string text, string delimiters)","        {","            List<string> ReturnStrings = new List<string>();","            if (text.Trim() == \"\")","                return ReturnStrings;","","            bool InsideQuotes = false;","            int Start = IndexNotOfAny(text, \" \".ToCharArray());","            for (int i = Start; i < text.Length; i++)","            {","                if (text[i] == '\"')","                    InsideQuotes = !InsideQuotes; // toggle","","                else if (!InsideQuotes)","                {","                    if (delimiters.IndexOf(text[i]) != -1)","                    {","                        // Found a word - store it.","                        if (Start != i)","                            ReturnStrings.Add(text.Substring(Start, i - Start).Trim(\" \".ToCharArray()));","                        Start = i+1;","","                    }","                }","            }","            if (Start != text.Length)","                ReturnStrings.Add(text.Substring(Start, text.Length - Start).Trim(\" \".ToCharArray()));","","            // remove leading and trailing quote if necessary.","            for (int i = 0; i < ReturnStrings.Count; i++)","            {","                if (ReturnStrings[i][0] == '\"' && ReturnStrings[i][ReturnStrings[i].Length - 1] == '\"')","                {","                    ReturnStrings[i] = ReturnStrings[i].Substring(1, ReturnStrings[i].Length - 2).Trim();","                    if (ReturnStrings[i] == \"\")","                    {","                        ReturnStrings.RemoveAt(i);","                        i--;","                    }","                }","            }","            return ReturnStrings;","        }","        public int IndexNotOfAny(string text, char[] delimiters)","        {","            return IndexNotOfAny(text, delimiters, 0);","        }","","        /// <summary>","        /// This method complements the string function IndexOfAny by","        /// providing a NOT version. Returns -1 if non of the specified","        /// characters are found in specified string.","        /// </summary>","        public int IndexNotOfAny(string text, char[] delimiters, int pos)","        {","            string DelimitersString = new string(delimiters);","            for (int i = pos; i < text.Length; i++)","            {","                if (DelimitersString.IndexOf(text[i]) == -1)","                    return i;","            }","            return -1;","        }","   }","}"],"Parameters":[{"Key":"csvFile","Value":"Lentil.operations.csv"},{"Key":"SiteName","Value":"Horsham"},{"Key":"Season","Value":"01"},{"Key":"TOS","Value":"TOS1"},{"Key":"Cultivar","Value":"junk"},{"Key":"Irr","Value":""},{"Key":"Population","Value":152},{"Key":"SowingDepth","Value":"30"},{"Key":"RowSpacing","Value":"1000"}],"Name":"Manager","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Manager, Models","CodeArray":["using Models.Interfaces;","using System;","using System.Linq;","using Models.Core;","using System.Collections.Generic;","using System.Text;","using Models.Soils;","using Models.PMF;","using Models;","using System.Xml.Serialization;","using APSIM.Shared.Utilities;","using Models.Interfaces;","namespace Models","{","    [Serializable] ","    public class Script : Model","    {","        [Link] private Zone zone;","        [Link] private Irrigation irrigation;","        [Link] private ISoilWater waterBalance;","        [Link] private IPhysical soilPhysical;","        public double FASW { get; set; }","        public double WaterDeficit  { get; set; }","    ","","","        [Description(\"Crop to irrigate\")]","        public IPlant Crop { get; set; }","        ","        [Description(\"Auto irrigation on?\")]","        public bool AutoIrrigationOn { get; set; }","","        [Description(\"Threshold fraction available water (0-1)\")]","        public double FASWThreshold { get; set; }","","        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]","        public double FASWDepth { get; set; }","","        [Description(\"Minimum weeks between irrigations\")]","        public double weeks { get; set; }","","        [Description(\"Minimum days after sowing for first irrigation\")]","        public int afterSowing { get; set; }","","        private double irrigationGap = 0;    // gap between irrigations","","        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>","        [EventSubscribe(\"StartOfSimulation\")]","        private void ErrorChecking(object sender, EventArgs args)","        {","            if (Crop == null)","                throw new Exception(\"No crop was specified in script \" + Parent.Name);","        }","","        [EventSubscribe(\"DoManagement\")]","        private void OnDoManagement(object sender, EventArgs e)","        {","            if (AutoIrrigationOn && Crop.IsAlive)","            {","                   irrigationGap += 1;                // increment gap between irrigations","                CalculateFASW();                // calc FASW and WaterDeficit","                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))","                {","                    irrigation.Apply(WaterDeficit, depth: 0);","                    irrigationGap = 0;            // reset","                }","            }","            else","            {","                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown","            }","        }","","        // Calculate the fraction of the potential available sw","        // Calculate the deficit amount from DUL","        private void CalculateFASW()","        {","            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);","            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);","        ","            int nlayr = GetLayerIndex(FASWDepth);","            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr","","            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);","","            // note that results may be strange if swdep < ll15","            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])","                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","","            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])","                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);","            ","            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);","            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);","        }","","        // Get index of the layer that has this depth in it ","        private int GetLayerIndex(double pointDepth)","        {","            double[] cumThickness = soilPhysical.ThicknessCumulative;","            int layerIdx = 0;","            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))","            {","                layerIdx += 1;","            }","","            return layerIdx;","        }","    }","}"],"Parameters":[{"Key":"Crop","Value":"[Lentil]"},{"Key":"AutoIrrigationOn","Value":"False"},{"Key":"FASWThreshold","Value":"0.9"},{"Key":"FASWDepth","Value":"600"},{"Key":"weeks","Value":"3"},{"Key":"afterSowing","Value":"2"}],"Name":"AutomaticIrrigation","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.Operations, Models","Operation":[],"Name":"Operations","ResourceName":null,"Children":[],"Enabled":true,"ReadOnly":false},{"$type":"Models.PMF.Plant, Models","Name":"Lentil","ResourceName":"Mungbean","Children":[],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}],"Enabled":true,"ReadOnly":false}
