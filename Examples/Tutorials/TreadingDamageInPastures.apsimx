{
  "$type": "Models.Core.Simulations, Models",
  "Version": 203,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Factorial.Experiment, Models",
      "DisabledSimNames": null,
      "Name": "Experiment",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Factorial.Factors, Models",
          "Name": "Factors",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Factorial.Permutation, Models",
              "Name": "Permutation",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Factorial.Factor, Models",
                  "Specification": "[Damage].Script.CowLiveweight = 0, 450",
                  "Name": "CowLW",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Simulation, Models",
          "Descriptors": [
            {
              "$type": "Models.Core.Run.SimulationDescription+Descriptor, Models",
              "Name": "Experiment",
              "Value": "Experiment"
            },
            {
              "$type": "Models.Core.Run.SimulationDescription+Descriptor, Models",
              "Name": "SimulationName",
              "Value": "ExperimentRegion3BayOfPlentySoils4Pumice"
            },
            {
              "$type": "Models.Core.Run.SimulationDescription+Descriptor, Models",
              "Name": "Zone",
              "Value": "Field"
            },
            {
              "$type": "Models.Core.Run.SimulationDescription+Descriptor, Models",
              "Name": "Region",
              "Value": "3BayOfPlenty"
            },
            {
              "$type": "Models.Core.Run.SimulationDescription+Descriptor, Models",
              "Name": "Soils",
              "Value": "4Pumice"
            }
          ],
          "Name": "SimBase",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Clock, Models",
              "Start": "2010-07-01T00:00:00",
              "End": "2014-06-30T00:00:00",
              "Name": "Clock",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Climate.Weather, Models",
              "ConstantsFile": null,
              "FileName": "C:\\aaUnderVC\\ApsimX\\Examples\\WeatherFiles\\NZ_Hamilton.met",
              "ExcelWorkSheetName": "",
              "Name": "Weather",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "ResourceName": "MicroClimate",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.ForageDigestibility.Forages, Models",
              "Parameters": [
                {
                  "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
                  "Name": "SurfaceOrganicMatter.Residue",
                  "LiveDigestibility": "0.7",
                  "DeadDigestibility": "0.3",
                  "LiveFractionConsumable": 0.0,
                  "DeadFractionConsumable": 0.0,
                  "LiveMinimumBiomass": 0.0,
                  "DeadMinimumBiomass": 0.0
                },
                {
                  "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
                  "Name": "AGPRyegrass.Leaf",
                  "LiveDigestibility": "FromModel",
                  "DeadDigestibility": "FromModel",
                  "LiveFractionConsumable": 1.0,
                  "DeadFractionConsumable": 1.0,
                  "LiveMinimumBiomass": 10.0,
                  "DeadMinimumBiomass": 0.0
                },
                {
                  "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
                  "Name": "AGPRyegrass.Stem",
                  "LiveDigestibility": "FromModel",
                  "DeadDigestibility": "FromModel",
                  "LiveFractionConsumable": 1.0,
                  "DeadFractionConsumable": 1.0,
                  "LiveMinimumBiomass": 10.0,
                  "DeadMinimumBiomass": 0.0
                },
                {
                  "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
                  "Name": "AGPRyegrass.Stolon",
                  "LiveDigestibility": "FromModel",
                  "DeadDigestibility": "FromModel",
                  "LiveFractionConsumable": 1.0,
                  "DeadFractionConsumable": 1.0,
                  "LiveMinimumBiomass": 10.0,
                  "DeadMinimumBiomass": 0.0
                },
                {
                  "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
                  "Name": "AGPWhiteClover.Leaf",
                  "LiveDigestibility": "FromModel",
                  "DeadDigestibility": "FromModel",
                  "LiveFractionConsumable": 1.0,
                  "DeadFractionConsumable": 1.0,
                  "LiveMinimumBiomass": 10.0,
                  "DeadMinimumBiomass": 0.0
                },
                {
                  "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
                  "Name": "AGPWhiteClover.Stem",
                  "LiveDigestibility": "FromModel",
                  "DeadDigestibility": "FromModel",
                  "LiveFractionConsumable": 1.0,
                  "DeadFractionConsumable": 1.0,
                  "LiveMinimumBiomass": 10.0,
                  "DeadMinimumBiomass": 0.0
                },
                {
                  "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
                  "Name": "AGPWhiteClover.Stolon",
                  "LiveDigestibility": "FromModel",
                  "DeadDigestibility": "FromModel",
                  "LiveFractionConsumable": 1.0,
                  "DeadFractionConsumable": 1.0,
                  "LiveMinimumBiomass": 10.0,
                  "DeadMinimumBiomass": 0.0
                }
              ],
              "Name": "Forages",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
              "Name": "SoilArbitrator",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Summary, Models",
              "Verbosity": 100,
              "Name": "Summary",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "CanopyType": null,
              "Name": "Field",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today as Date",
                    "[Clock].Today.Month as ProductionMonth",
                    "Sum of ([AGPRyegrass].HarvestedWt + [AGPWhiteClover].HarvestedWt) from 1-Jul to [Clock].Today as HarvestedWt",
                    "Max of ([Damage].Script.DamageUnitsSoil) from [Report].DayAfterLastOutput to [Clock].Today as MaxDamage",
                    "Mean of ([Damage].Script.DamageUnitsSoil) from [Report].DayAfterLastOutput to [Clock].Today as MeanDamage",
                    "Max of ([Damage].Script.WaterFactor) from [Report].DayAfterLastOutput to [Clock].Today as MaxWaterFactor",
                    "Mean of ([Damage].Script.WaterFactor) from [Report].DayAfterLastOutput to [Clock].Today as MeanWaterFactor"
                  ],
                  "EventNames": [
                    "[Clock].EndOfWeek"
                  ],
                  "GroupByVariableName": null,
                  "Name": "Report",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.SimpleGrazing, Models",
                  "GrazingRotationType": 1,
                  "SimpleGrazingFrequencyString": "28",
                  "SimpleMinGrazable": 0.0,
                  "SimpleGrazingResidual": 1500.0,
                  "PreGrazeDMArray": [
                    2800.0,
                    2800.0,
                    2800.0,
                    2800.0,
                    2800.0,
                    2800.0,
                    2800.0,
                    2800.0,
                    2800.0,
                    2800.0,
                    2800.0,
                    2800.0
                  ],
                  "PostGrazeDMArray": [
                    1800.0,
                    1800.0,
                    1800.0,
                    1800.0,
                    1250.0,
                    1000.0,
                    1000.0,
                    1250.0,
                    1800.0,
                    1800.0,
                    1800.0,
                    1900.0
                  ],
                  "FlexibleExpressionForTimingOfGrazing": null,
                  "FlexibleGrazePostDM": 0.0,
                  "MaximumRotationLengthArray": [
                    50.0,
                    50.0,
                    50.0,
                    50.0,
                    60.0,
                    60.0,
                    90.0,
                    70.0,
                    50.0,
                    50.0,
                    50.0,
                    50.0
                  ],
                  "MinimumRotationLengthArray": [
                    21.0,
                    21.0,
                    21.0,
                    21.0,
                    21.0,
                    21.0,
                    21.0,
                    21.0,
                    21.0,
                    21.0,
                    21.0,
                    21.0
                  ],
                  "NoGrazingStartString": null,
                  "NoGrazingEndString": null,
                  "IsCutAndCarry": false,
                  "FractionClippingsReturned": 0.0,
                  "FractionIntakeNToAnimal": [
                    0.1
                  ],
                  "DungNConc": 2.6,
                  "FractionOfDungUrineOffPaddock": [
                    0.05
                  ],
                  "DepthUrineIsAdded": 200.0,
                  "ShowAdvancedExcretaOptions": false,
                  "SendDungElsewhere": 0.0,
                  "SendUrineElsewhere": 0.0,
                  "UsePatching": false,
                  "PseudoPatches": true,
                  "ZoneCount": 25,
                  "UrineReturnPattern": 2,
                  "PseudoRandomSeed": 666,
                  "MaxEffectiveNConcentration": 3.5,
                  "FractionPopulationDecline": 0.0,
                  "TramplingOn": false,
                  "MaximumPropLitterMovedToSoil": 0.1,
                  "PastureConsumedAtMaximumRateOfLitterRemoval": 1200.0,
                  "Name": "SimpleGrazing",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "CodeArray": [
                    "//using Newtonsoft.Json;",
                    "using APSIM.Shared.Utilities;",
                    "using Models.Utilities;",
                    "using Models.Soils;",
                    "using Models.PMF;",
                    "using Models.Core;",
                    "using System;",
                    "using System.Linq;",
                    "using Models.AgPasture;",
                    "",
                    "namespace Models",
                    "{",
                    "\t[Serializable]",
                    "\tpublic class Script : Model",
                    "\t{",
                    "\t\t[Link] private Clock clock;",
                    "\t\t",
                    "\t\t//[Link] private Fertiliser fertiliser;",
                    "\t\t[Link] private ISummary summary;",
                    "\t\t",
                    "\t\t//[Link] private Soil soil;",
                    "\t\t",
                    "\t\t//private Nutrient nutrient;",
                    "\t\t",
                    "\t\t//private Nutrient soilN;",
                    "\t\t",
                    "\t\t[Link] private IPhysical physical;",
                    "\t\t[Link] private Swim3 swim3;",
                    "\t\t",
                    "\t\t//[Link] private Nutrient Nutrient;",
                    "\t\t",
                    "\t\t//[Link(Path=\"[SurfaceOrganicMatter].SurfaceResidue.Decomposition\")]",
                    "\t\t",
                    "\t\t//private OrganicFlow ResidueDecomposition;",
                    "\t\t",
                    "\t\t",
                    "        [Separator(\"Sets up the damage events - will be replaced eventually with dynamic causes\")]",
                    "        [Separator(\"Note: Treading damage is also affected by the soil water content in the top 100 mm\")]",
                    "",
                    "\t\t//[Description(\"Grazing on the same day(s) each year? If no, then must include the year below\")]",
                    "\t\tpublic bool EachYear {get; set;}",
                    "\t\t",
                    "\t\t//[Description(\"Dates for one or more grazing events (dd-mmm or dd-mmm-yyyy)\")]",
                    "\t\tpublic string[] Dates {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Month for the single grazing event\")]",
                    "\t\tpublic string Month {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Day for the single grazing event\")]",
                    "\t\tpublic int Day {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Cow liveweight (kg)\")]",
                    "\t\tpublic double CowLiveweight {get; set;}",
                    "",
                    "\t\t[Description(\"Stocking density during the milking season (cows /ha)\")]",
                    "\t\tpublic double CowStockingDensityMilking {get; set;}",
                    " ",
                    "\t\t[Description(\"Stocking density when cows are dry, May to July (cows /ha)\")]",
                    "\t\tpublic double CowStockingDensityDry {get; set;}",
                    " ",
                    "\t\tpublic double CowStockingDensity {get; set;}",
                    "",
                    "\t\t[Description(\"Grazing duration (hours)\")]",
                    "\t\tpublic double GrazingDuration {get; set;}",
                    "",
                    "",
                    "        [Separator(\"Calculation of the damage effect from grazing pressure\")]",
                    "",
                    "\t\t[Description(\"Multiplier on grazing pressure for the exponent (*10^-3)\")]",
                    "\t\tpublic double PressureMultiplier {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Damage ryegrass?\")]",
                    "\t\tpublic bool DamageRyegrass {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Damage clover?\")]",
                    "\t\tpublic bool DamageClover {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Damage soil?\")]",
                    "\t\tpublic bool DamageSoil {get; set;}",
                    "\t\t",
                    "\t\t",
                    "        [Separator(\"Effect of the damage on the plants. Damage is 1:1 on the GLFGeneric.\")]",
                    "",
                    "\t\t[Description(\"Grass species\")] public PastureSpecies Grass {get; set;}",
                    "",
                    "\t\t[Description(\"Recovery rate for grass (/d)\")]",
                    "\t\tpublic double RecoveryRateGrass {get; set;}",
                    "",
                    "\t\t[Description(\"Clover species\")] public PastureSpecies Clover {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Recovery rate for clover (/d)\")]",
                    "\t\tpublic double RecoveryRateClover {get; set;}",
                    "",
                    "        [Separator(\"Effect of the damage on the soil properties\")]",
                    "",
                    "\t\t[Description(\"Depth in the soil before damage starts decreasing (mm)\")]",
                    "\t\tpublic double DepthDamage100Soil {get; set;}",
                    "",
                    "\t\t[Description(\"Depth in the soil where damage is <5% of surface damage (mm)\")]",
                    "\t\tpublic double DepthDamage005Soil {get; set;}",
                    "",
                    "\t\t[Description(\"Recovery rate for soil - applies to both Ks and macroporosity (/d)\")]",
                    "\t\tpublic double RecoveryRateSoil {get; set;}",
                    "",
                    "",
                    "",
                    "        // outputs",
                    "\t\tpublic double DamageUnitsGrass {get; set;}",
                    "\t\tpublic double DamageUnitsClover {get; set;}",
                    "\t\tpublic double DamageUnitsSoil {get; set;}",
                    "\t\t",
                    "\t\tpublic double[] MaxPossChangeMacroporosity {get; set;}",
                    "\t\tpublic double[] MaxPossChangeConductivity {get; set;}",
                    "\t\tpublic double[] DepthFunctionForDamage {get; set;}",
                    "\t\t",
                    "\t\tpublic double GrazingPressure {get; set;}",
                    "\t\tpublic double EffectiveGrazingPressure {get; set;}",
                    "\t\tpublic double WaterFactor {get; set;}",
                    "\t\tpublic double TreadingEffect {get; set;}",
                    "\t\tpublic double[] DepthDamageFunction {get; set;}",
                    "\t\t",
                    "\t\tpublic double MinimumMacroporosity {get; set;}",
                    "\t\t",
                    "\t\tpublic double[] UndamagedKSat {get; set;}",
                    "\t\tpublic double[] UndamagedMacroporosity {get; set;}",
                    "\t\tpublic double[] UndamagedSAT {get; set;}",
                    "\t\tpublic double[] UndamagedDUL {get; set;}",
                    "\t\t",
                    "\t\t//public double DecayConstantDamageDepthSoil {get; set;}",
                    "",
                    "\t\t",
                    "\t\t//[Description(\"Extent (0-1) of a damage event - effect on plants\")]",
                    "\t\t//public double DamageEvent {get; set;}",
                    "",
                    "",
                    "\t\t",
                    "        [EventSubscribe(\"StartOfSimulation\")]",
                    "        private void OnStartOfSimulation(object sender, EventArgs e)",
                    "\t\t{",
                    "\t\t\t//Debugger.Break();",
                    "            EachYear = true;",
                    "            Dates = new string[1];",
                    "            Dates[0] = Day + \"-\" + Month;",
                    "            if ((Month == \"may\") || (Month == \"jun\") || (Month == \"jul\"))",
                    "                CowStockingDensity = CowStockingDensityDry;",
                    "            else",
                    "                CowStockingDensity = CowStockingDensityMilking;",
                    "",
                    "            ",
                    "            MaxPossChangeConductivity = new double[physical.Thickness.Length];",
                    "            MaxPossChangeMacroporosity = new double[physical.Thickness.Length];",
                    "            DepthFunctionForDamage = new double[physical.Thickness.Length];",
                    "            DepthDamageFunction = new double[physical.Thickness.Length];",
                    "            ",
                    "            UndamagedMacroporosity = new double[physical.Thickness.Length];",
                    "            ",
                    "            MinimumMacroporosity = 0.02;",
                    "            UndamagedSAT = (double[]) physical.SAT.Clone();",
                    "            UndamagedDUL = (double[]) physical.DUL.Clone();",
                    "            UndamagedKSat = (double[]) physical.KS.Clone();",
                    "",
                    "\t\t\t",
                    "\t\t\t// get the maximum possible changes in soil properties by depth",
                    "            for (int i = 0; i < physical.Thickness.Length; i++)",
                    "            {",
                    "                UndamagedMacroporosity[i] =  physical.SAT[i] - physical.DUL[i] - MinimumMacroporosity; ",
                    "",
                    "                // Assume that the minimum Ks is twice the K and DUL",
                    "                // or maybe should make this some percentage of existing Ks above KDUL",
                    "                MaxPossChangeConductivity[i] = physical.KS[i] - 2.0 * swim3.KDul;  // we are assuming that the change in soil physical propoerties is above DUL",
                    "",
                    "                // Macroporosity is taken as the pore space from DUL to Total Porosity but still allowing for a little antrapped air ",
                    "                MaxPossChangeMacroporosity[i] = physical.SAT[i] - MinimumMacroporosity - physical.DUL[i] ;   // this is the total porosity above DUL excluding 0.05 for the entrapped air (https://acsess.onlinelibrary.wiley.com/doi/10.2136/vzj2005.0139)",
                    "",
                    "                // set up the depth function for damage to the soil",
                    "                DepthFunctionForDamage[i] = Math.Min(1.0,Math.Max(0.0,1.0 - (DepthDamage005Soil - physical.DepthMidPoints[i])/(DepthDamage005Soil-DepthDamage100Soil)));",
                    "                DepthFunctionForDamage[i] = Math.Exp(-4.0 * DepthFunctionForDamage[i]);",
                    "                if (DepthFunctionForDamage[i] < 0.02)",
                    "                    DepthFunctionForDamage[i] = 0.0;",
                    "            }",
                    "\t\t}",
                    "\t\t",
                    "\t\t[EventSubscribe(\"DoManagement\")]",
                    "\t\tprivate void OnDoManagement(object sender, EventArgs e)",
                    "\t\t{",
                    "            GrazingPressure = 0.0;",
                    "\t\t    EffectiveGrazingPressure = 0.0;",
                    "\t\t    TreadingEffect = 0.0;",
                    "\t\t\t",
                    "            // only needed on grazing days but up here for outputting",
                    "            WaterFactor = 0.0;",
                    "            double SatTo100mm = 0.0;",
                    "            double DulTo100mm = 0.0;",
                    "            double ThetaTo100mm = 0.0;",
                    "            for (int i = 0; physical.DepthMidPoints[i] < DepthDamage100Soil; i++)",
                    "            {",
                    "                SatTo100mm += physical.SATmm[i];",
                    "                DulTo100mm += physical.DULmm[i];",
                    "                ThetaTo100mm += swim3.SWmm[i];",
                    "            }",
                    "            WaterFactor += Math.Max(0.0, (ThetaTo100mm - DulTo100mm) / (SatTo100mm - DulTo100mm));",
                    "",
                    "\t\t\tif (OnDamageDate()) // this will be eventually be replaced with grazing pressure > 0",
                    "\t\t\t{",
                    "                // calculate the grazing pressures",
                    "                ",
                    "                ",
                    "                GrazingPressure = CowLiveweight * CowStockingDensity * GrazingDuration / 1000.0;   // t LW /ha /hour",
                    "                EffectiveGrazingPressure = GrazingPressure * WaterFactor;",
                    "                TreadingEffect = 1.0 - Math.Exp(EffectiveGrazingPressure * PressureMultiplier / 1000.0);",
                    "",
                    "                // finally add this into the dynamic damage units ",
                    "\t\t\t\tif (DamageRyegrass)",
                    "    \t\t\t\tDamageUnitsGrass = Math.Max(Math.Min(DamageUnitsGrass + TreadingEffect, 1.0), 0.0);",
                    "\t\t\t\tif (DamageClover)",
                    "    \t\t\t\tDamageUnitsClover = Math.Max(Math.Min(DamageUnitsClover + TreadingEffect, 1.0), 0.0);",
                    "\t\t\t\tif (DamageSoil)",
                    "\t\t\t\t{",
                    "\t\t\t\t    DamageUnitsSoil = Math.Max(Math.Min(DamageUnitsSoil + TreadingEffect, 1.0), 0.0);",
                    "                    for (int i = 0; i < physical.Thickness.Length; i++)",
                    "                        DepthDamageFunction[i] = DamageUnitsSoil * DepthFunctionForDamage[i];",
                    "                 }",
                    "\t\t\t}",
                    "\t\t\telse // no recovery on the damage day",
                    "\t\t\t{",
                    "    \t\t    DamageUnitsGrass -= DamageUnitsGrass * RecoveryRateGrass;",
                    "\t\t\t    DamageUnitsClover -= DamageUnitsClover * RecoveryRateClover;",
                    "\t\t\t    DamageUnitsSoil -= DamageUnitsSoil * RecoveryRateSoil;",
                    "\t\t\t\t",
                    "\t\t\t\tfor (int i = 0; i < physical.Thickness.Length; i++)",
                    "                    DepthDamageFunction[i] = DamageUnitsSoil * DepthFunctionForDamage[i];",
                    "\t\t\t}",
                    "",
                    "    \t\t// now have the damage units affect the plants and soil",
                    "    \t\tGrass.GlfGeneric = 1.0 - DamageUnitsGrass;",
                    "\t\t\tClover.GlfGeneric = 1.0 - DamageUnitsClover;",
                    "        \tfor (int i = 0; i < physical.Thickness.Length; i++)",
                    "            {",
                    "                physical.KS[i] = UndamagedKSat[i] - MaxPossChangeConductivity[i] * DepthDamageFunction[i];",
                    "                physical.DUL[i] = UndamagedDUL[i] + MaxPossChangeMacroporosity[i] * DepthDamageFunction[i];",
                    "            }",
                    "\t\t}",
                    "\t\t",
                    "\t\t/// <summary>Checks if today's date is one of the specified fertiliser application dates.</summary>",
                    "\t\tprivate bool OnDamageDate()",
                    "\t\t{",
                    "\t\t\tif (EachYear)",
                    "\t\t\t\treturn Dates.Any(d => DateUtilities.DatesEqual(d, clock.Today));",
                    "\t\t\tDateTime[] dates = Dates.Select(d => DateTime.ParseExact(d, \"d-MMM-yyyy\", null)).ToArray();",
                    "\t\t\treturn dates.Any(d => SameDate(d, clock.Today));",
                    "\t\t}",
                    "\t\t",
                    "\t\tprivate bool SameDate(DateTime d1, DateTime d2)",
                    "\t\t{",
                    "\t\t\treturn d1.Year == d2.Year && d1.DayOfYear == d2.DayOfYear;",
                    "\t\t}",
                    "\t}",
                    "}"
                  ],
                  "Parameters": [
                    {
                      "Key": "Month",
                      "Value": "aug"
                    },
                    {
                      "Key": "Day",
                      "Value": "11"
                    },
                    {
                      "Key": "CowLiveweight",
                      "Value": "450"
                    },
                    {
                      "Key": "CowStockingDensityMilking",
                      "Value": "100"
                    },
                    {
                      "Key": "CowStockingDensityDry",
                      "Value": "300"
                    },
                    {
                      "Key": "GrazingDuration",
                      "Value": "24"
                    },
                    {
                      "Key": "PressureMultiplier",
                      "Value": "-0.639471"
                    },
                    {
                      "Key": "DamageRyegrass",
                      "Value": "True"
                    },
                    {
                      "Key": "DamageClover",
                      "Value": "True"
                    },
                    {
                      "Key": "DamageSoil",
                      "Value": "True"
                    },
                    {
                      "Key": "Grass",
                      "Value": "[AGPRyegrass]"
                    },
                    {
                      "Key": "RecoveryRateGrass",
                      "Value": "0.015"
                    },
                    {
                      "Key": "Clover",
                      "Value": "[AGPWhiteClover]"
                    },
                    {
                      "Key": "RecoveryRateClover",
                      "Value": "0.015"
                    },
                    {
                      "Key": "DepthDamage100Soil",
                      "Value": "100"
                    },
                    {
                      "Key": "DepthDamage005Soil",
                      "Value": "250"
                    },
                    {
                      "Key": "RecoveryRateSoil",
                      "Value": "0.015"
                    }
                  ],
                  "Name": "DamageOld",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "CodeArray": [
                    "using Newtonsoft.Json;",
                    "using APSIM.Shared.Utilities;",
                    "using Models.Utilities;",
                    "using Models.Soils;",
                    "using Models.PMF;",
                    "using Models.Core;",
                    "using System;",
                    "using System.Linq;",
                    "using Models.AgPasture;",
                    "using System.Diagnostics;",
                    "",
                    "namespace Models",
                    "{",
                    "\t[Serializable]",
                    "\tpublic class Script : Model",
                    "\t{",
                    "\t\t[Link] private Clock clock;",
                    "\t\t",
                    "\t\t[Link] private ISummary summary;",
                    "\t\t[Link] private SimpleGrazing simpleGrazing;",
                    "\t\t",
                    "\t\t",
                    "\t\t//[Link] private Soil soil;",
                    "\t\t",
                    "\t\t//private Nutrient nutrient;",
                    "\t\t",
                    "\t\t//private Nutrient soilN;",
                    "\t\t",
                    "\t\t[Link] private IPhysical physical;",
                    "\t\t[Link] private Swim3 swim3;",
                    "\t\t",
                    "\t\t//[Link] private Nutrient Nutrient;",
                    "\t\t",
                    "\t\t//[Link(Path=\"[SurfaceOrganicMatter].SurfaceResidue.Decomposition\")]",
                    "\t\t",
                    "\t\t//private OrganicFlow ResidueDecomposition;",
                    "\t\t",
                    "\t\t",
                    "        [Separator(\"Sets up the damage events - will be replaced eventually with dynamic causes\")]",
                    "        [Separator(\"Note: Treading damage is also affected by the soil water content in the top 100 mm\")]",
                    "",
                    "\t\t//[Description(\"Grazing on the same day(s) each year? If no, then must include the year below\")]",
                    "\t\tpublic bool EachYear {get; set;}",
                    "\t\t",
                    "\t\t//[Description(\"Dates for one or more grazing events (dd-mmm or dd-mmm-yyyy)\")]",
                    "\t\tpublic string[] Dates {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Month for the single grazing event\")]",
                    "\t\tpublic string Month {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Day for the single grazing event\")]",
                    "\t\tpublic int Day {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Cow liveweight (kg)\")]",
                    "\t\tpublic double CowLiveweight {get; set;}",
                    "",
                    "\t\t[Description(\"Stocking density during the milking season (cows /ha)\")]",
                    "\t\tpublic double CowStockingDensityMilking {get; set;}",
                    " ",
                    "\t\t[Description(\"Stocking density when cows are dry, May to July (cows /ha)\")]",
                    "\t\tpublic double CowStockingDensityDry {get; set;}",
                    " ",
                    "\t\tpublic double CowStockingDensity {get; set;}",
                    "",
                    "\t\t[Description(\"Grazing duration (hours)\")]",
                    "\t\tpublic double GrazingDuration {get; set;}",
                    "",
                    "",
                    "        [Separator(\"Calculation of the damage effect from grazing pressure\")]",
                    "",
                    "\t\t[Description(\"Multiplier on grazing pressure for the exponent (*10^-3)\")]",
                    "\t\tpublic double PressureMultiplier {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Damage ryegrass?\")]",
                    "\t\tpublic bool DamageRyegrass {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Damage clover?\")]",
                    "\t\tpublic bool DamageClover {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Damage soil?\")]",
                    "\t\tpublic bool DamageSoil {get; set;}",
                    "\t\t",
                    "\t\t",
                    "        [Separator(\"Effect of the damage on the plants. Damage is 1:1 on the GLFGeneric.\")]",
                    "",
                    "\t\t[Description(\"Grass species\")] public PastureSpecies Grass {get; set;}",
                    "",
                    "\t\t[Description(\"Recovery rate for grass (/d)\")]",
                    "\t\tpublic double RecoveryRateGrass {get; set;}",
                    "",
                    "\t\t[Description(\"Clover species\")] public PastureSpecies Clover {get; set;}",
                    "\t\t",
                    "\t\t[Description(\"Recovery rate for clover (/d)\")]",
                    "\t\tpublic double RecoveryRateClover {get; set;}",
                    "",
                    "        [Separator(\"Effect of the damage on the soil properties\")]",
                    "",
                    "\t\t[Description(\"Depth in the soil before damage starts decreasing (mm)\")]",
                    "\t\tpublic double DepthDamage100Soil {get; set;}",
                    "",
                    "\t\t[Description(\"Depth in the soil where damage is <5% of surface damage (mm)\")]",
                    "\t\tpublic double DepthDamage005Soil {get; set;}",
                    "",
                    "\t\t[Description(\"Recovery rate for soil - applies to both Ks and macroporosity (/d)\")]",
                    "\t\tpublic double RecoveryRateSoil {get; set;}",
                    "",
                    "",
                    "",
                    "        // outputs",
                    "\t\tpublic double DamageUnitsGrass {get; set;}",
                    "\t\tpublic double DamageUnitsClover {get; set;}",
                    "\t\tpublic double DamageUnitsSoil {get; set;}",
                    "\t\t",
                    "\t\tpublic double[] MaxPossChangeMacroporosity {get; set;}",
                    "\t\tpublic double[] MaxPossChangeConductivity {get; set;}",
                    "\t\tpublic double[] DepthFunctionForDamage {get; set;}",
                    "\t\t",
                    "\t\tpublic double GrazingPressure {get; set;}",
                    "\t\tpublic double EffectiveGrazingPressure {get; set;}",
                    "\t\tpublic double WaterFactor {get; set;}",
                    "\t\tpublic double TreadingEffect {get; set;}",
                    "\t\tpublic double[] DepthDamageFunction {get; set;}",
                    "\t\t",
                    "\t\tpublic double MinimumMacroporosity {get; set;}",
                    "\t\t",
                    "\t\tpublic double[] UndamagedKSat {get; set;}",
                    "\t\tpublic double[] UndamagedMacroporosity {get; set;}",
                    "\t\tpublic double[] UndamagedSAT {get; set;}",
                    "\t\tpublic double[] UndamagedDUL {get; set;}",
                    "\t\t",
                    "\t\t//public double DecayConstantDamageDepthSoil {get; set;}",
                    "",
                    "\t\t",
                    "\t\t//[Description(\"Extent (0-1) of a damage event - effect on plants\")]",
                    "\t\t//public double DamageEvent {get; set;}",
                    "",
                    "",
                    "\t\t",
                    "        [EventSubscribe(\"StartOfSimulation\")]",
                    "        private void OnStartOfSimulation(object sender, EventArgs e)",
                    "\t\t{",
                    "\t\t\t//Debugger.Break();",
                    "            EachYear = true;",
                    "            Dates = new string[1];",
                    "            Dates[0] = Day + \"-\" + Month;",
                    "            if ((Month == \"may\") || (Month == \"jun\") || (Month == \"jul\"))",
                    "                CowStockingDensity = CowStockingDensityDry;",
                    "            else",
                    "                CowStockingDensity = CowStockingDensityMilking;",
                    "",
                    "            ",
                    "            MaxPossChangeConductivity = new double[physical.Thickness.Length];",
                    "            MaxPossChangeMacroporosity = new double[physical.Thickness.Length];",
                    "            DepthFunctionForDamage = new double[physical.Thickness.Length];",
                    "            DepthDamageFunction = new double[physical.Thickness.Length];",
                    "            ",
                    "            UndamagedMacroporosity = new double[physical.Thickness.Length];",
                    "            ",
                    "            MinimumMacroporosity = 0.02;",
                    "            UndamagedSAT = (double[]) physical.SAT.Clone();",
                    "            UndamagedDUL = (double[]) physical.DUL.Clone();",
                    "            UndamagedKSat = (double[]) physical.KS.Clone();",
                    "",
                    "\t\t\t",
                    "\t\t\t// get the maximum possible changes in soil properties by depth",
                    "            for (int i = 0; i < physical.Thickness.Length; i++)",
                    "            {",
                    "                UndamagedMacroporosity[i] =  physical.SAT[i] - physical.DUL[i] - MinimumMacroporosity; ",
                    "",
                    "                // Assume that the minimum Ks is twice the K and DUL",
                    "                // or maybe should make this some percentage of existing Ks above KDUL",
                    "                MaxPossChangeConductivity[i] = physical.KS[i] - 2.0 * swim3.KDul;  // we are assuming that the change in soil physical propoerties is above DUL",
                    "",
                    "                // Macroporosity is taken as the pore space from DUL to Total Porosity but still allowing for a little antrapped air ",
                    "                MaxPossChangeMacroporosity[i] = physical.SAT[i] - MinimumMacroporosity - physical.DUL[i] ;   // this is the total porosity above DUL excluding 0.05 for the entrapped air (https://acsess.onlinelibrary.wiley.com/doi/10.2136/vzj2005.0139)",
                    "",
                    "                // set up the depth function for damage to the soil",
                    "                DepthFunctionForDamage[i] = Math.Min(1.0,Math.Max(0.0,1.0 - (DepthDamage005Soil - physical.DepthMidPoints[i])/(DepthDamage005Soil-DepthDamage100Soil)));",
                    "                DepthFunctionForDamage[i] = Math.Exp(-4.0 * DepthFunctionForDamage[i]);",
                    "                if (DepthFunctionForDamage[i] < 0.02)",
                    "                    DepthFunctionForDamage[i] = 0.0;",
                    "            }",
                    "\t\t}",
                    "",
                    "",
                    "\t\t[EventSubscribe(\"Grazed\")]",
                    "\t\tprivate void OnGrazed(object sender, EventArgs e)",
                    "\t\t{",
                    "\t\t    // eventually will need to ...",
                    "\t\t    // get the amound of DM removed",
                    "\t\t    // get the number and LW of the stock",
                    "\t\t    // do the damage",
                    "\t\t    ",
                    "\t\t    // initially set the SD and LW etc - the last four parameters in the first bracket",
                    "\t\t    ",
                    "                // calculate the grazing pressures",
                    "            GrazingPressure = CowLiveweight * CowStockingDensity * GrazingDuration / 1000.0;   // t LW /ha /hour",
                    "            EffectiveGrazingPressure = GrazingPressure * WaterFactor;",
                    "            TreadingEffect = 1.0 - Math.Exp(EffectiveGrazingPressure * PressureMultiplier / 1000.0);",
                    "",
                    "            // finally add this into the dynamic damage units ",
                    "\t        if (DamageRyegrass)",
                    "    \t\t\tDamageUnitsGrass = Math.Max(Math.Min(DamageUnitsGrass + TreadingEffect, 1.0), 0.0);",
                    "\t\t\tif (DamageClover)",
                    "    \t\t\tDamageUnitsClover = Math.Max(Math.Min(DamageUnitsClover + TreadingEffect, 1.0), 0.0);",
                    "\t\t\tif (DamageSoil)",
                    "\t\t\t{",
                    "\t\t\t    DamageUnitsSoil = Math.Max(Math.Min(DamageUnitsSoil + TreadingEffect, 1.0), 0.0);",
                    "                   for (int i = 0; i < physical.Thickness.Length; i++)",
                    "                       DepthDamageFunction[i] = DamageUnitsSoil * DepthFunctionForDamage[i];",
                    "            }",
                    "",
                    "    \t\t// now have the damage units affect the plants and soil",
                    "    \t\tGrass.GlfGeneric = 1.0 - DamageUnitsGrass;",
                    "\t\t\tClover.GlfGeneric = 1.0 - DamageUnitsClover;",
                    "        \tfor (int i = 0; i < physical.Thickness.Length; i++)",
                    "            {",
                    "                physical.KS[i] = UndamagedKSat[i] - MaxPossChangeConductivity[i] * DepthDamageFunction[i];",
                    "                physical.DUL[i] = UndamagedDUL[i] + MaxPossChangeMacroporosity[i] * DepthDamageFunction[i];",
                    "            }",
                    "",
                    "        }",
                    "\t\t",
                    "\t\t[EventSubscribe(\"DoManagement\")]",
                    "\t\tprivate void OnDoManagement(object sender, EventArgs e)",
                    "\t\t{",
                    "            GrazingPressure = 0.0;",
                    "\t\t    EffectiveGrazingPressure = 0.0;",
                    "\t\t    TreadingEffect = 0.0;",
                    "\t\t\t",
                    "            // only needed on grazing days but up here for outputting",
                    "            WaterFactor = 0.0;",
                    "            double SatTo100mm = 0.0;",
                    "            double DulTo100mm = 0.0;",
                    "            double ThetaTo100mm = 0.0;",
                    "            for (int i = 0; physical.DepthMidPoints[i] < DepthDamage100Soil; i++)",
                    "            {",
                    "                SatTo100mm += physical.SATmm[i];",
                    "                DulTo100mm += physical.DULmm[i];",
                    "                ThetaTo100mm += swim3.SWmm[i];",
                    "            }",
                    "            WaterFactor += Math.Max(0.0, (ThetaTo100mm - DulTo100mm) / (SatTo100mm - DulTo100mm));",
                    "",
                    "\t\t\t// no recovery on the damage day",
                    "    \t\t    DamageUnitsGrass -= DamageUnitsGrass * RecoveryRateGrass;",
                    "\t\t\t    DamageUnitsClover -= DamageUnitsClover * RecoveryRateClover;",
                    "\t\t\t    DamageUnitsSoil -= DamageUnitsSoil * RecoveryRateSoil;",
                    "\t\t\t\t",
                    "\t\t\t\tfor (int i = 0; i < physical.Thickness.Length; i++)",
                    "                    DepthDamageFunction[i] = DamageUnitsSoil * DepthFunctionForDamage[i];",
                    "",
                    "    \t\t// now have the damage units affect the plants and soil",
                    "    \t\tGrass.GlfGeneric = 1.0 - DamageUnitsGrass;",
                    "\t\t\tClover.GlfGeneric = 1.0 - DamageUnitsClover;",
                    "        \tfor (int i = 0; i < physical.Thickness.Length; i++)",
                    "            {",
                    "                physical.KS[i] = UndamagedKSat[i] - MaxPossChangeConductivity[i] * DepthDamageFunction[i];",
                    "                physical.DUL[i] = UndamagedDUL[i] + MaxPossChangeMacroporosity[i] * DepthDamageFunction[i];",
                    "            }",
                    "\t\t}",
                    "\t\t",
                    "\t\t",
                    "\t\tprivate bool SameDate(DateTime d1, DateTime d2)",
                    "\t\t{",
                    "\t\t\treturn d1.Year == d2.Year && d1.DayOfYear == d2.DayOfYear;",
                    "\t\t}",
                    "\t}",
                    "}"
                  ],
                  "Parameters": [
                    {
                      "Key": "Month",
                      "Value": "aug"
                    },
                    {
                      "Key": "Day",
                      "Value": "11"
                    },
                    {
                      "Key": "CowLiveweight",
                      "Value": "450"
                    },
                    {
                      "Key": "CowStockingDensityMilking",
                      "Value": "100"
                    },
                    {
                      "Key": "CowStockingDensityDry",
                      "Value": "300"
                    },
                    {
                      "Key": "GrazingDuration",
                      "Value": "24"
                    },
                    {
                      "Key": "PressureMultiplier",
                      "Value": "-0.639471"
                    },
                    {
                      "Key": "DamageRyegrass",
                      "Value": "True"
                    },
                    {
                      "Key": "DamageClover",
                      "Value": "True"
                    },
                    {
                      "Key": "DamageSoil",
                      "Value": "True"
                    },
                    {
                      "Key": "Grass",
                      "Value": "[AGPRyegrass]"
                    },
                    {
                      "Key": "RecoveryRateGrass",
                      "Value": "0.015"
                    },
                    {
                      "Key": "Clover",
                      "Value": "[AGPWhiteClover]"
                    },
                    {
                      "Key": "RecoveryRateClover",
                      "Value": "0.015"
                    },
                    {
                      "Key": "DepthDamage100Soil",
                      "Value": "100"
                    },
                    {
                      "Key": "DepthDamage005Soil",
                      "Value": "250"
                    },
                    {
                      "Key": "RecoveryRateSoil",
                      "Value": "0.015"
                    }
                  ],
                  "Name": "Damage",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "CodeArray": [
                    "using Models.Climate;",
                    "using APSIM.Shared.Utilities;",
                    "using Models.Soils.Nutrients;",
                    "using Models.Soils;",
                    "using Models.PMF;",
                    "using Models.Core;",
                    "using System.Xml.Serialization;",
                    "using System;",
                    "using Models.AgPasture;",
                    "using Models.Interfaces;",
                    "using System.Linq;",
                    "",
                    "namespace Models",
                    "{",
                    "    [Serializable] ",
                    "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                    "    public class Script : Model",
                    "    {",
                    "        [Link] Clock clock;",
                    "        [Link] ISummary summary;",
                    "        [Link] private Swim3 swim;",
                    "        [Link] private Physical physical;",
                    "        [Link] private Water water;",
                    "        //[Link] private PastureSpecies ryegrass;",
                    "        //[Link] private SimpleGrazing grazing;",
                    "        ",
                    "        public enum LowerBCTypeOptions {gradient,seepage,potential};",
                    "        ",
                    "        public double SetCurrentWTDepth { get; set; }",
                    "        public double CurrentWTDepth { get; set; }",
                    "        public double SoilDepth { get; set; }",
                    "",
                    "        [Separator(\"Sets the lower boundary condition type (and value if set to 'potential' for SWIM3. The change is applied at the beginning of the first day of the simulation.\")]",
                    "        [Description(\"Mean water table depth? (mm) \")] public double MeanWTDepth { get; set; }",
                    "        [Description(\"Amplitude of the annual fluctuations in water table as a proportion of mean depth? (mm) \")] public double AmpWTDepthProp { get; set; }",
                    "",
                    "",
                    "        [Description(\"Proprtion of SAT-DUL water-filled for WT depth reporting?\")] public double CriticalWTFilled { get; set; }",
                    "",
                    "        public double LowerBCValue  { get; set; }",
                    "        public double AmpWTDepth  { get; set; }",
                    "        ",
                    "        double PhaseShift = 59.0; // days",
                    "",
                    "        [EventSubscribe(\"StartOfFirstDay\")]",
                    "        private void DoStartOfFirstDay(object sender, EventArgs e)",
                    "        {",
                    "            //System.Diagnostics.Debugger.Break();",
                    "            ",
                    "            AmpWTDepth = AmpWTDepthProp * MeanWTDepth;",
                    "",
                    "            SetCurrentWTDepth = Math.Sin((clock.Today.DayOfYear - 59.0)/365.25 * Math.PI * 2.0) * AmpWTDepth + MeanWTDepth;   // this is in mm",
                    "            SoilDepth = physical.ThicknessCumulative.Last();",
                    "            LowerBCValue = (SoilDepth - SetCurrentWTDepth) / 10.0 ;  // to put it into cm for SWIM",
                    "",
                    "            swim.SetLowerBCForGivenPotential(bbcPotential: LowerBCValue); ",
                    "",
                    "        }",
                    "",
                    "        [EventSubscribe(\"DoDailyInitialisation\")]",
                    "        private void DoDailyInitialisation(object sender, EventArgs e)",
                    "        {",
                    "            SetCurrentWTDepth = Math.Sin((clock.Today.DayOfYear - 59.0)/365.25 * Math.PI * 2.0) * AmpWTDepth + MeanWTDepth;   // this is in mm",
                    "            LowerBCValue = (SoilDepth - SetCurrentWTDepth) / 10.0 ;  // to put it into cm for SWIM",
                    "            swim.SetLowerBCForGivenPotential(bbcPotential: LowerBCValue); ",
                    "        }",
                    "",
                    "        [EventSubscribe(\"DoManagement\")]",
                    "        private void DoDailyCalculations(object sender, EventArgs e)",
                    "        {",
                    "        }",
                    "",
                    "        [EventSubscribe(\"DoReportCalculations\")]",
                    "        private void DoReportCalculations(object sender, EventArgs e)",
                    "        {",
                    "            // find the apparent WT depth",
                    "            for (int i = swim.Thickness.Length-1; i > 0; i--)",
                    "            {",
                    "                double test = (physical.SAT[i] - water.Volumetric[i]) / (physical.SAT[i] - physical.DUL[i]);",
                    "                if (test < CriticalWTFilled)",
                    "                     CurrentWTDepth = SoilUtilities.ToCumThickness(swim.Thickness)[i-1];",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                  ],
                  "Parameters": [
                    {
                      "Key": "MeanWTDepth",
                      "Value": "1000"
                    },
                    {
                      "Key": "AmpWTDepthProp",
                      "Value": "0.45"
                    },
                    {
                      "Key": "CriticalWTFilled",
                      "Value": "0.01"
                    }
                  ],
                  "Name": "SetWatertable",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "CodeArray": [
                    "using APSIM.Core;",
                    "using System;",
                    "using Models.Core;",
                    "using Models.Soils.Nutrients;",
                    "using Models.Soils;",
                    "using Models.PMF;",
                    "using APSIM.Shared.Utilities;",
                    "using System.Linq;",
                    "using Models.Interfaces;",
                    "",
                    "namespace Models",
                    "{",
                    "    [Serializable]",
                    "    public class Script : Model, IStructureDependency",
                    "    {",
                    "        [Link] private Clock clock;",
                    "        [Link] private Fertiliser fertiliser;",
                    "        [Link] private ISummary summary;",
                    "        [Link] private Soil soil;",
                    "        private Nutrient nutrient;",
                    "        private Nutrient soilN;",
                    "        [Link]",
                    "        private IPhysical soilPhysical;",
                    "        [Link]",
                    "        private Nutrient Nutrient;",
                    "        [Link(Path=\"[SurfaceOrganicMatter].SurfaceResidue.Decomposition\")]",
                    "        private OrganicFlow ResidueDecomposition;",
                    "        public IStructure Structure { private get; set; }",
                    "        ",
                    "        ",
                    "",
                    "",
                    "        [Separator(\"Fertiliser will be applied on the date(s) below\")]",
                    "        [Description(\"Apply fertiliser on the same day(s) each year? If no, then must include the year of appliaction below\")]",
                    "        public bool EachYear { get; set; }",
                    "",
                    "        [Description(\"Dates for one or more fertiliser applications (dd-mmm or dd-mmm-yyyy) as a list with a comma between dates\")]",
                    "        public string[] Dates { get; set; }",
                    "",
                    "        [Separator(\"Test for the mineral N in the soil and don't apply the fertiliser if greater than X kgN/ha is stored in the soil above a depth of Y mm\")]",
                    "        [Description(\"Use a critical soil mineral N to prevent application above a threshold?\")]",
                    "        public bool UseCritNThreshold { get; set; }",
                    "",
                    "        [Description(\"Don't add fertiliser if N in the soil to the depth below exceeds (kg/ha)\")]",
                    "        public double CritNThreshold { get; set; }",
                    "",
                    "        [Description(\"Depth to which the amount of N in the soil should be calculated (mm)\")]",
                    "        public double CritNDepth { get; set; }",
                    "",
                    "        [Separator(\"Fertiliser application details\")]",
                    "        [Description(\"Depth at which to apply the fertiliser (mm)\")]",
                    "        public double Depth { get; set; }",
                    "",
                    "        [Description(\"Amount of fertiliser to apply (kg N /ha) per application\")]",
                    "        public double Amount { get; set; }",
                    "",
                    "        [Description(\"Fertiliser type - select from the list\")]",
                    "        [Display(Type = DisplayType.FertiliserType)]public string FertiliserType { get; set; }",
                    "",
                    "",
                    "        [EventSubscribe(\"StartOfSimulation\")]",
                    "        private void FindSoilNOrNutrient(object sender, EventArgs e)",
                    "        {",
                    "            nutrient =  Structure.Find<Nutrient>() as Nutrient;",
                    "            soilN =  Structure.Find<Nutrient>() as Nutrient;",
                    "",
                    "            if (nutrient == null && soilN == null)",
                    "                throw new Exception(string.Format(\"Error in script {0}: Unable to find nutrient or soilN.\", Name));",
                    "        }",
                    "",
                    "        [EventSubscribe(\"DoManagement\")]",
                    "        private void OnDoManagement(object sender, EventArgs e)",
                    "        {",
                    "            if (OnApplicationDate())",
                    "            {",
                    "                if (NContentBelowThreshold())",
                    "                    fertiliser.Apply(Amount, FertiliserType, Depth);",
                    "                else",
                    "                    summary.WriteMessage(this, \"Skipping fertiliser application due to soil mineral N content being above critical threshold.\", MessageType.Diagnostic);",
                    "            }",
                    "        }",
                    "",
                    "        /// <summary>Checks if today's date is one of the specified fertiliser application dates.</summary>",
                    "        private bool OnApplicationDate()",
                    "        {",
                    "            if (EachYear)",
                    "                return Dates.Any(d => DateUtilities.DatesEqual(d, clock.Today));",
                    "            ",
                    "            DateTime[] dates = Dates.Select(d => DateTime.ParseExact(d, \"d-MMM-yyyy\", null)).ToArray();",
                    "            return dates.Any(d => SameDate(d, clock.Today));",
                    "        }",
                    "",
                    "        /// <summary>Checks if N content in soil is below critical threshold.</summary>",
                    "        private bool NContentBelowThreshold()",
                    "        {",
                    "            if (!UseCritNThreshold)",
                    "                return true;",
                    "            ",
                    "            double[] weights = GetLayerWeights();",
                    "            double cumSoilN = 0;",
                    "",
                    "            for (int i = 0; i < soilPhysical.Thickness.Length; i++)",
                    "            {",
                    "                if (nutrient != null)",
                    "                    cumSoilN += weights[i] * nutrient.MineralN[i];",
                    "                else if (soilN != null)",
                    "                    cumSoilN += weights[i] * soilN.MineralN[i];",
                    "            }",
                    "",
                    "            return cumSoilN <= CritNThreshold;",
                    "        }",
                    "",
                    "        private double[] GetLayerWeights()",
                    "        {",
                    "            double[] weights = new double[soilPhysical.Thickness.Length];",
                    "            double cumDepth = 0;",
                    "",
                    "            for (int i = 0; i < soilPhysical.Thickness.Length; i++)",
                    "            {",
                    "                cumDepth += soilPhysical.Thickness[i];",
                    "                if (cumDepth < CritNDepth)",
                    "                    weights[i] = 1;",
                    "                else if (cumDepth - soilPhysical.Thickness[i] <= CritNDepth)",
                    "                    weights[i] = (CritNDepth - (cumDepth - soilPhysical.Thickness[i])) / soilPhysical.Thickness[i];",
                    "                else",
                    "                    weights[i] = 0;",
                    "            }",
                    "",
                    "            return weights;",
                    "        }",
                    "",
                    "        private bool SameDate(DateTime d1, DateTime d2)",
                    "        {",
                    "            return d1.Year == d2.Year && d1.DayOfYear == d2.DayOfYear;",
                    "        }",
                    "    }",
                    "}"
                  ],
                  "Parameters": [
                    {
                      "Key": "EachYear",
                      "Value": "True"
                    },
                    {
                      "Key": "Dates",
                      "Value": "15-aug, 15-sep, 15-oct, 25-apr"
                    },
                    {
                      "Key": "UseCritNThreshold",
                      "Value": "False"
                    },
                    {
                      "Key": "CritNThreshold",
                      "Value": "50"
                    },
                    {
                      "Key": "CritNDepth",
                      "Value": "75"
                    },
                    {
                      "Key": "Depth",
                      "Value": "33"
                    },
                    {
                      "Key": "Amount",
                      "Value": "0"
                    },
                    {
                      "Key": "FertiliserType",
                      "Value": "UreaN"
                    }
                  ],
                  "Name": "Fertilise",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "CodeArray": [
                    "using Models.Soils;",
                    "using System;",
                    "using System.Linq;",
                    "using System.Diagnostics;",
                    "using Models.Core;",
                    "using Models.Interfaces;",
                    "using APSIM.Shared.Utilities;",
                    "",
                    "namespace Models",
                    "{",
                    "    [Serializable]",
                    "    public class Script : Model",
                    "    {",
                    "        [Link] Clock clock;",
                    "        [Link] IWeather weather;",
                    "        [Link] Irrigation irrigation;",
                    "        [Link] ISummary summary;",
                    "        [Link] Physical physical;",
                    "        [Link] Water water;",
                    "        ",
                    "        ",
                    "        [Description(\"Turn irrigation on?\")] public bool allowIrrigation { get; set; }",
                    "",
                    "        [Separator(\"All soils\")]",
                    "",
                    "        [Description(\"Start of irrigation season (dd-mmm)\")] ",
                    "        public string IrrigStart { get; set; }",
                    "",
                    "        [Description(\"End of irrigation season (dd-mmm)\")] ",
                    "        public string IrrigEnd { get; set; }",
                    "",
                    "        [Description(\"Enter the depth to which water deficit is computed (mm)\")] ",
                    "        public double SoilDepth { get; set; }",
                    "        ",
                    "        [Description(\"PAW below which soil is considered 'shallow' (mm)\")] ",
                    "        public double CritPAWForShallow { get; set; }",
                    "",
                    "        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")] ",
                    "        public double CritRainToPause { get; set; }",
                    "",
                    "        [Description(\"Number of days to pause irrigator after critical delay (days)\")] ",
                    "        public double DaysToPauseOnCritRain { get; set; }",
                    "        ",
                    "        [Separator(\"Shallow soils\")]",
                    "        ",
                    "        [Description(\"Irrigation return period for shallow soils (days)\")] ",
                    "        public double IrrigReturnShallow { get; set; }",
                    "",
                    "        [Description(\"Effective irrigation amount for shallow soils (mm)\")] ",
                    "        public double IrrigAmtShallow { get; set; }",
                    "",
                    "        [Description(\"Percentage of PAW at which to irrigate shallow soils (%)\")] ",
                    "        public double PercPAWIrrigDeficitShallow { get; set; }",
                    "",
                    "        [Description(\"Irrigation efficiency for shallow soils (%)\")] ",
                    "        public double IrrigEffShallow { get; set; }",
                    "",
                    "        [Separator(\"Deep soils\")]",
                    "        ",
                    "        [Description(\"Irrigation return period for deep soils (days)\")] ",
                    "        public double IrrigReturnDeep { get; set; }",
                    "",
                    "        [Description(\"Effective irrigation amount for deep soils (mm)\")] ",
                    "        public double IrrigAmtDeep { get; set; }",
                    "",
                    "        [Description(\"Percentage of PAW at which to irrigate deep soils (%)\")] ",
                    "        public double IrrigDeficitDeep { get; set; }",
                    "",
                    "        [Description(\"Irrigation efficiency for deep soils (%)\")] ",
                    "        public double IrrigEffDeep { get; set; }",
                    "",
                    "",
                    "        // Output variables",
                    "        [Units(\"mm\")]",
                    "        public double TodayDeficit {get; set; }",
                    "         ",
                    "        [Units(\"mm\")]",
                    "        public double TodayDeficit_nve {get; set; }",
                    "         ",
                    "        [Units(\"\")]",
                    "        public double IrrigDay {get; set; }",
                    "         ",
                    "        [Units(\"\")]",
                    "        public double SoilPAW {get; set; }",
                    "         ",
                    "        [Units(\"\")]",
                    "        public double IrrigDeficit {get; set; }",
                    "        ",
                    "        [Units(\"\")]",
                    "        public double IrrigReturn {get; set; }",
                    "        ",
                    "        [Units(\"\")]",
                    "        public double IrrigAmt {get; set; }",
                    "        ",
                    "        [Units(\"\")]",
                    "        public double IrrigEff {get; set; }",
                    "        ",
                    "        [Units(\"mm\")]",
                    "        public double Rain3 {get; set; }",
                    "        ",
                    "        [Units(\"mm\")]",
                    "        public double[] Rain_3 {get; set; } = new double[3];",
                    "        ",
                    "        [Units(\"\")]",
                    "        public double Days2Pause {get; set; }",
                    "",
                    "         // private variables",
                    "        private double irrigDeficitShallow {get; set; }",
                    "",
                    "        ",
                    "        [EventSubscribe(\"StartOfSimulation\")]",
                    "        private void OnStartOfSimulation(object sender, EventArgs e)",
                    "        {",
                    "            IrrigDay = 5000;  // so will reset to 1 on first day",
                    "",
                    "            Rain3 = 0.0;",
                    "            Rain_3[0] = 0.0; Rain_3[1] = 0.0; Rain_3[2] = 0.0;",
                    "",
                    "            SoilPAW = 0.0;",
                    "            double mySoilDepth = 0;",
                    "            for (int z = 0; z <= physical.Thickness.Length - 1; z++)",
                    "            {",
                    "                mySoilDepth = mySoilDepth + physical.Thickness[z];",
                    "                if (mySoilDepth <= SoilDepth)",
                    "                    SoilPAW = SoilPAW + physical.DULmm[z] - physical.LL15mm[z];",
                    "            }",
                    "            if (SoilPAW <= CritPAWForShallow)",
                    "            {",
                    "                IrrigDeficit = PercPAWIrrigDeficitShallow / (double)100 * SoilPAW;",
                    "                IrrigReturn = IrrigReturnShallow;",
                    "                IrrigAmt = IrrigAmtShallow;",
                    "                IrrigEff = IrrigEffShallow;",
                    "                summary.WriteMessage(this, \"Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW, MessageType.Information);",
                    "            }",
                    "            else",
                    "            {",
                    "                IrrigDeficit = IrrigDeficitDeep;",
                    "                IrrigReturn = IrrigReturnDeep;",
                    "                IrrigAmt = IrrigAmtDeep;",
                    "                IrrigEff = IrrigEffDeep;",
                    "                summary.WriteMessage(this, \"Soil is considered to be deep\", MessageType.Information);",
                    "            }",
                    "",
                    "            summary.WriteMessage(this, $\"Irrigation critical deficit (mm): {IrrigDeficit}\", MessageType.Information);",
                    "            summary.WriteMessage(this, $\"        Irrigation return (days): {IrrigReturn}\", MessageType.Information);",
                    "            summary.WriteMessage(this, $\"   Irrigation pumped amount (mm): {IrrigAmt}\", MessageType.Information);",
                    "            summary.WriteMessage(this, $\"       Irrigation efficiency (%): {IrrigEff}\", MessageType.Information);",
                    "        }",
                    "        ",
                    "        ",
                    "        [EventSubscribe(\"DoManagement\")]",
                    "        private void OnDoManagement(object sender, EventArgs e)",
                    "        {",
                    "            Rain_3[2] = Rain_3[1];",
                    "            Rain_3[1] = Rain_3[0];",
                    "            Rain_3[0] = weather.Rain;",
                    "            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2];",
                    "            if (Rain3 >= CritRainToPause)",
                    "                Days2Pause = DaysToPauseOnCritRain;",
                    "            else",
                    "                Days2Pause = Days2Pause - 1;",
                    "",
                    "            TodayDeficit = 0.0;",
                    "            SoilPAW = 0.0;",
                    "            double mySoilDepth = 0;",
                    "",
                    "            for (int z = 0; z <= physical.Thickness.Length - 1; z++)",
                    "            {",
                    "                mySoilDepth = mySoilDepth + physical.Thickness[z];",
                    "                if (mySoilDepth <= SoilDepth)",
                    "                {",
                    "                    SoilPAW = SoilPAW + physical.DULmm[z] - physical.LL15mm[z];",
                    "                    TodayDeficit = TodayDeficit + physical.DULmm[z] - Math.Min(physical.DULmm[z], water.MM[z]);",
                    "                }",
                    "            }",
                    "            TodayDeficit_nve = -1 * TodayDeficit;",
                    "",
                    "            if (DateUtilities.WithinDates(IrrigStart, clock.Today, IrrigEnd))",
                    "            {",
                    "                if (SoilPAW <= CritPAWForShallow)",
                    "                {",
                    "                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;",
                    "                    IrrigReturn = IrrigReturnShallow;",
                    "                    IrrigAmt = IrrigAmtShallow;",
                    "                    IrrigEff = IrrigEffShallow;",
                    "                }",
                    "                else",
                    "                {",
                    "                    IrrigDeficit = IrrigDeficitDeep;",
                    "                    IrrigReturn = IrrigReturnDeep;",
                    "                    IrrigAmt = IrrigAmtDeep;",
                    "                    IrrigEff = IrrigEffDeep;",
                    "                }",
                    "",
                    "                if (Days2Pause < 0.5)",
                    "                {",
                    "                    IrrigDay = IrrigDay + 1;",
                    "                    if (IrrigDay > IrrigReturn)",
                    "                        IrrigDay = 1;// and day = 1 is when the irrigation happens",
                    "",
                    "                    if (TodayDeficit >= IrrigDeficit)",
                    "                    {",
                    "                        if ((IrrigDay == 1) && (allowIrrigation))",
                    "                            irrigation.Apply(amount: IrrigAmt / (IrrigEff / 100.0));",
                    "                    }",
                    "                }",
                    "            }",
                    "        }    ",
                    "    }",
                    "}"
                  ],
                  "Parameters": [
                    {
                      "Key": "allowIrrigation",
                      "Value": "False"
                    },
                    {
                      "Key": "IrrigStart",
                      "Value": "1-sep"
                    },
                    {
                      "Key": "IrrigEnd",
                      "Value": "30-apr"
                    },
                    {
                      "Key": "SoilDepth",
                      "Value": "500"
                    },
                    {
                      "Key": "CritPAWForShallow",
                      "Value": "60"
                    },
                    {
                      "Key": "CritRainToPause",
                      "Value": "30"
                    },
                    {
                      "Key": "DaysToPauseOnCritRain",
                      "Value": "3"
                    },
                    {
                      "Key": "IrrigReturnShallow",
                      "Value": "2"
                    },
                    {
                      "Key": "IrrigAmtShallow",
                      "Value": "10"
                    },
                    {
                      "Key": "PercPAWIrrigDeficitShallow",
                      "Value": "0"
                    },
                    {
                      "Key": "IrrigEffShallow",
                      "Value": "100"
                    },
                    {
                      "Key": "IrrigReturnDeep",
                      "Value": "4"
                    },
                    {
                      "Key": "IrrigAmtDeep",
                      "Value": "20"
                    },
                    {
                      "Key": "IrrigDeficitDeep",
                      "Value": "25"
                    },
                    {
                      "Key": "IrrigEffDeep",
                      "Value": "100"
                    }
                  ],
                  "Name": "Irrigate",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Irrigation, Models",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "Name": "Fertiliser",
                  "ResourceName": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "SurfOM": [],
                  "Canopies": [],
                  "InitialResidueName": "Sward",
                  "InitialResidueType": "grass",
                  "InitialResidueMass": 1000.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 15.0,
                  "Name": "SurfaceOrganicMatter",
                  "ResourceName": "SurfaceOrganicMatter",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "doyGermination": 275,
                  "daysEmergenceToAnthesis": 120,
                  "daysAnthesisToMaturity": 85,
                  "degreesDayForAnthesis": 1100.0,
                  "degreesDayForMaturity": 900.0,
                  "daysAnnualsFactor": 45,
                  "FVPDFunction": {
                    "$type": "Models.Functions.LinearInterpolationFunction, Models",
                    "Name": "LinearInterpolationFunction",
                    "ResourceName": null,
                    "Children": [],
                    "Enabled": true,
                    "ReadOnly": false
                  },
                  "CanopyType": "PastureSpecies",
                  "LightProfile": null,
                  "InitialShootDM": 1500.0,
                  "InitialRootDM": 450.0,
                  "InitialRootDepth": 600.0,
                  "initialDMFractionsGrasses": [
                    0.15,
                    0.25,
                    0.25,
                    0.05,
                    0.05,
                    0.1,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "initialDMFractionsLegumes": [
                    0.16,
                    0.23,
                    0.22,
                    0.05,
                    0.03,
                    0.05,
                    0.05,
                    0.01,
                    0.04,
                    0.08,
                    0.08
                  ],
                  "initialDMFractionsForbs": [
                    0.2,
                    0.2,
                    0.15,
                    0.05,
                    0.1,
                    0.15,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "PhotosyntheticEfficiency": 0.01,
                  "PhotosynthesisCurveFactor": 0.8,
                  "FractionPAR": 0.5,
                  "ReferenceCO2": 380.0,
                  "CO2EffectScaleFactor": 700.0,
                  "CO2EffectOffsetFactor": 600.0,
                  "CO2EffectMinimum": 0.7,
                  "CO2EffectExponent": 2.0,
                  "ReproSeasonDurationCoeff": 2.0,
                  "ReproSeasonShouldersLengthFactor": 1.0,
                  "ReproSeasonOnsetDurationFactor": 0.6,
                  "RelativeTurnoverEmerging": 2.0,
                  "DetachmentDroughtCoefficient": 3.0,
                  "DetachmentDroughtEffectMin": 0.1,
                  "TurnoverStockFactor": 0.01,
                  "TurnoverDefoliationEffectMin": 0.025,
                  "MinimumGreenLeafProp": 0.8,
                  "MinimumGreenRootProp": 0.5,
                  "Name": "AGPRyegrass",
                  "ResourceName": "AGPRyegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "doyGermination": 275,
                  "daysEmergenceToAnthesis": 120,
                  "daysAnthesisToMaturity": 85,
                  "degreesDayForAnthesis": 1100.0,
                  "degreesDayForMaturity": 900.0,
                  "daysAnnualsFactor": 45,
                  "FVPDFunction": {
                    "$type": "Models.Functions.LinearInterpolationFunction, Models",
                    "Name": "LinearInterpolationFunction",
                    "ResourceName": null,
                    "Children": [],
                    "Enabled": true,
                    "ReadOnly": false
                  },
                  "CanopyType": "PastureSpecies",
                  "LightProfile": null,
                  "InitialShootDM": 500.0,
                  "InitialRootDM": 150.0,
                  "InitialRootDepth": 300.0,
                  "initialDMFractionsGrasses": [
                    0.15,
                    0.25,
                    0.25,
                    0.05,
                    0.05,
                    0.1,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "initialDMFractionsLegumes": [
                    0.16,
                    0.23,
                    0.22,
                    0.05,
                    0.03,
                    0.05,
                    0.05,
                    0.01,
                    0.04,
                    0.08,
                    0.08
                  ],
                  "initialDMFractionsForbs": [
                    0.2,
                    0.2,
                    0.15,
                    0.05,
                    0.1,
                    0.15,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "PhotosyntheticEfficiency": 0.01,
                  "PhotosynthesisCurveFactor": 0.8,
                  "FractionPAR": 0.5,
                  "ReferenceCO2": 380.0,
                  "CO2EffectScaleFactor": 700.0,
                  "CO2EffectOffsetFactor": 600.0,
                  "CO2EffectMinimum": 0.7,
                  "CO2EffectExponent": 2.0,
                  "ReproSeasonDurationCoeff": 2.0,
                  "ReproSeasonShouldersLengthFactor": 1.0,
                  "ReproSeasonOnsetDurationFactor": 0.6,
                  "RelativeTurnoverEmerging": 2.0,
                  "DetachmentDroughtCoefficient": 3.0,
                  "DetachmentDroughtEffectMin": 0.1,
                  "TurnoverStockFactor": 0.01,
                  "TurnoverDefoliationEffectMin": 0.025,
                  "MinimumGreenLeafProp": 0.8,
                  "MinimumGreenRootProp": 0.5,
                  "Name": "AGPWhiteClover",
                  "ResourceName": "AGPWhiteClover",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 1259,
                  "ASCOrder": "Gley",
                  "ASCSubOrder": null,
                  "SoilType": "Silt loam",
                  "LocalName": "Taho (Silt loam (Opotiki No1347))",
                  "Site": "Crooked Rd, south of junction with Dickenson Rd",
                  "NearestTown": "Opotiki",
                  "Region": "BayOfPlenty",
                  "State": null,
                  "Country": "New Zealand",
                  "NaturalVegetation": "long term grass",
                  "ApsoilNumber": "1347",
                  "Latitude": -38.031,
                  "Longitude": 177.25,
                  "LocationAccuracy": "+/-50 m",
                  "YearOfSampling": "1983",
                  "DataSource": "The database of New Zealand soils was compiled by AgResearch (www.agresearch.co.nz) and based on soil properties gathered, mainly from publications, in the course of conducting several simulation-based research projects but particularly from the Pastoral 21 Environment program which was funded by the New Zealand Ministry for Business, Innovation and Employment,  Dairy NZ, Fonterra and Meat & Wool NZ.",
                  "Comments": "The data is a combination of published or supplied measurements, pedotransfer functions, and expert opinion. See Cichota et al. (2013; Soil Research 51: 92-111, http://dx.doi.org/10.1071/SR12338) for a description of the pedotransfer functions. The soil carbon and fresh organic matter settings have been set as those broadly appropriate for permanent productive pastoral systems, see Cichota el al. (2012; Soil Research 50: 694-707, http://dx.doi.org/10.1071/SR12208). Users should take care to adapt these to local conditions before using the data in simulations. FOM values estimated to be 900 kg/ha of FOM in top 600mm of soil and another 100 kg/ha below.",
                  "Name": "Soil",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Thickness": [
                        150.0,
                        250.0,
                        250.0,
                        200.0,
                        300.0,
                        1850.0
                      ],
                      "ParticleSizeSand": [
                        34.0,
                        22.0,
                        32.0,
                        25.0,
                        52.0,
                        50.0
                      ],
                      "ParticleSizeSilt": [
                        52.0,
                        51.0,
                        53.0,
                        45.0,
                        36.0,
                        38.0
                      ],
                      "ParticleSizeClay": [
                        14.0,
                        27.0,
                        15.0,
                        30.0,
                        12.0,
                        12.0
                      ],
                      "Rocks": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        2.0
                      ],
                      "Texture": null,
                      "BD": [
                        1.03,
                        1.08,
                        0.89,
                        1.16,
                        1.14,
                        1.176
                      ],
                      "AirDry": [
                        0.056,
                        0.074,
                        0.048,
                        0.09,
                        0.06,
                        0.056
                      ],
                      "LL15": [
                        0.17,
                        0.224,
                        0.144,
                        0.273,
                        0.183,
                        0.171
                      ],
                      "DUL": [
                        0.411,
                        0.4,
                        0.375,
                        0.43,
                        0.378,
                        0.356
                      ],
                      "SAT": [
                        0.531,
                        0.533,
                        0.59,
                        0.504,
                        0.493,
                        0.47
                      ],
                      "KS": [
                        3186.27,
                        358.981,
                        795.543,
                        135.676,
                        2876.485,
                        2676.044
                      ],
                      "BDMetadata": [
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility"
                      ],
                      "AirDryMetadata": [
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge"
                      ],
                      "LL15Metadata": [
                        "Laboratory measured",
                        "Laboratory measured",
                        "Laboratory measured",
                        "Laboratory measured",
                        "Laboratory measured",
                        "Laboratory measured"
                      ],
                      "DULMetadata": [
                        "Laboratory measured",
                        "Laboratory measured",
                        "Laboratory measured",
                        "Laboratory measured",
                        "Laboratory measured",
                        "Laboratory measured"
                      ],
                      "SATMetadata": [
                        "Calculated from measured, estimated or calculated BD",
                        "Calculated from measured, estimated or calculated BD",
                        "Calculated from measured, estimated or calculated BD",
                        "Calculated from measured, estimated or calculated BD",
                        "Calculated from measured, estimated or calculated BD",
                        "Calculated from measured, estimated or calculated BD"
                      ],
                      "KSMetadata": null,
                      "RocksMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "TextureMetadata": null,
                      "ParticleSizeSandMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "ParticleSizeSiltMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "ParticleSizeClayMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "Name": "Physical",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.17,
                            0.224,
                            0.144,
                            0.273,
                            0.183,
                            0.171
                          ],
                          "KL": [
                            0.06,
                            0.06,
                            0.056,
                            0.04,
                            0.04,
                            0.023
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": [
                            "Estimated based on local knowledge",
                            "Estimated based on local knowledge",
                            "Estimated based on local knowledge",
                            "Estimated based on local knowledge",
                            "Estimated based on local knowledge",
                            "Estimated based on local knowledge"
                          ],
                          "KLMetadata": [
                            null,
                            null,
                            null,
                            null,
                            null,
                            null
                          ],
                          "XFMetadata": [
                            null,
                            null,
                            null,
                            null,
                            null,
                            null
                          ],
                          "Name": "AGPRyegrassSoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.17,
                            0.224,
                            0.144,
                            0.273,
                            0.183,
                            0.171
                          ],
                          "KL": [
                            0.06,
                            0.06,
                            0.056,
                            0.04,
                            0.04,
                            0.023
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": [
                            "Estimated based on local knowledge",
                            "Estimated based on local knowledge",
                            "Estimated based on local knowledge",
                            "Estimated based on local knowledge",
                            "Estimated based on local knowledge",
                            "Estimated based on local knowledge"
                          ],
                          "KLMetadata": [
                            null,
                            null,
                            null,
                            null,
                            null,
                            null
                          ],
                          "XFMetadata": [
                            null,
                            null,
                            null,
                            null,
                            null,
                            null
                          ],
                          "Name": "AGPWhiteCloverSoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Swim3, Models",
                      "Salb": 0.13,
                      "CN2Bare": 0.0,
                      "CNRed": 0.0,
                      "CNCov": 0.8,
                      "KDul": 1.0,
                      "PSIDul": -100.0,
                      "VC": true,
                      "DTMin": 0.0,
                      "DTMax": 1440.0,
                      "MaxWaterIncrement": 10.0,
                      "SpaceWeightingFactor": 0.0,
                      "SoluteSpaceWeightingFactor": 1.0,
                      "Dis": 0.0,
                      "Disp": 1.0,
                      "A": 2.0,
                      "DTHC": 0.1,
                      "DTHP": 2.0,
                      "vcon1": 7.28E-09,
                      "vcon2": 7.26E-07,
                      "eo_time": "06:00",
                      "eo_durn": 720.0,
                      "default_rain_time": "00:00",
                      "default_rain_duration": 720.0,
                      "Diagnostics": false,
                      "Name": "Swim3",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        150.0,
                        250.0,
                        250.0,
                        200.0,
                        300.0,
                        1850.0
                      ],
                      "Carbon": [
                        3.6,
                        1.0,
                        0.5,
                        0.4,
                        0.5,
                        0.5
                      ],
                      "CarbonUnits": 0,
                      "SoilCNRatio": [
                        11.25,
                        11.25,
                        11.25,
                        11.25,
                        11.25,
                        11.25
                      ],
                      "FBiom": [
                        0.078,
                        0.017,
                        0.008,
                        0.008,
                        0.008,
                        0.008
                      ],
                      "FInert": [
                        0.497,
                        0.514,
                        0.911,
                        0.963,
                        0.99,
                        0.994
                      ],
                      "FOM": [
                        92.83909909067731,
                        56.30976001859504,
                        34.15359589233852,
                        22.893839970834982,
                        12.56440577086876,
                        6.239299256685404
                      ],
                      "CarbonMetadata": null,
                      "FOMMetadata": null,
                      "Name": "Organic",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Thickness": [
                        150.0,
                        250.0,
                        250.0,
                        200.0,
                        300.0,
                        1850.0
                      ],
                      "PH": [
                        6.5,
                        6.5,
                        6.5,
                        6.5,
                        6.5,
                        6.5
                      ],
                      "PHUnits": 0,
                      "EC": null,
                      "ESP": null,
                      "CEC": [
                        12.6,
                        9.2,
                        6.7,
                        7.9,
                        5.8,
                        5.8
                      ],
                      "ECMetadata": null,
                      "CLMetadata": null,
                      "CECMetadata": null,
                      "ESPMetadata": null,
                      "PHMetadata": [
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge"
                      ],
                      "Name": "Chemical",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Nutrients.Nutrient, Models",
                      "Name": "Nutrient",
                      "ResourceName": "Nutrient",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        250.0,
                        250.0,
                        200.0,
                        300.0,
                        1850.0
                      ],
                      "InitialValues": [
                        6.0,
                        2.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "FIP": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "ConcInSolution": null,
                      "Name": "NO3",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        250.0,
                        250.0,
                        200.0,
                        300.0,
                        1850.0
                      ],
                      "InitialValues": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "FIP": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "ConcInSolution": null,
                      "Name": "NH4",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        250.0,
                        250.0,
                        200.0,
                        300.0,
                        1850.0
                      ],
                      "InitialValues": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "InitialValuesUnits": 1,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "FIP": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "ConcInSolution": null,
                      "Name": "Urea",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Water, Models",
                      "Thickness": [
                        150.0,
                        250.0,
                        250.0,
                        200.0,
                        300.0,
                        1850.0
                      ],
                      "InitialValues": [
                        0.411,
                        0.4,
                        0.375,
                        0.43,
                        0.378,
                        0.356
                      ],
                      "FilledFromTop": false,
                      "Name": "Water",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.LayerStructure, Models",
                      "Thickness": [
                        10.0,
                        20.0,
                        30.0,
                        40.0,
                        50.0,
                        50.0,
                        50.0,
                        50.0,
                        200.0,
                        250.0,
                        250.0,
                        500.0,
                        500.0,
                        500.0,
                        300.0,
                        100.0,
                        100.0
                      ],
                      "Name": "LayerStructure",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilTemp.SoilTemperature, Models",
                      "Thickness": null,
                      "InitialValues": null,
                      "Name": "Temperature",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": "NaN",
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Graph",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": 0,
              "FactorToVaryColours": "SimulationName",
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 0,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "HarvestedWt",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Series",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Storage.DataStore, Models",
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}