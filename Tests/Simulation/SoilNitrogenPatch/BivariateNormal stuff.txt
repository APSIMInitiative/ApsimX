        [Separator("Bivariate normal parameters for ArrayLoad and ArrayVol from Paul Shorten")]
        
        // - Paramters for this manager
        // excreta return parameters
        
        [Description("Use the old (yes/on/ticked) or new statistical (off/no/unticked, parameters below) method to generate load-volume pairs?")]
        //[Units("-")]
        public bool RealisationType { get; set; }

        [Description("Number of realisaitons to be generated: ")] public int NumRealisations { get; set; }
        [Description("First mean load of the generated distribution (g N): ")] public double MeanLoadToGenerate { get; set; }
        [Description("Amount to add to the first mean every day (g N): ")] public double AmountAddMeanLoad { get; set; }
        [Description("Means of the original distributions, mu_i load (gN) first and then mu_j volume (L): ")] public double[] VectorOfMeans { get; set; }
        [Description("Covariance matrix - in order of E_ii, E_ij, E_ij, E_jj: ")] public double[] CovarianceMatrix { get; set; }




        private void CalculateLoadVol()
        {
        	if (RealisationType) // use the old method
			{
		         ArrayLoad = new double[] {5.4,5.644,5.692,5.744,5.827,5.894,5.953,5.985,6.038,6.099,6.176,6.238,6.312,6.411,6.503,6.638,6.696,6.735,6.778,6.86,6.958,7.002,7.031,7.061,7.138,7.176,
		         7.204,7.234,7.272,7.303,7.332,7.347,7.398,7.418,7.451,7.485,7.518,7.557,7.571,7.655,7.682,7.71,7.745,7.794,7.848,7.873,7.933,7.974,8.005,8.055,8.076,8.126,8.139,8.182,8.217,8.243,
		         8.289,8.328,8.348,8.382,8.395,8.421,8.474,8.511,8.516,8.557,8.577,8.617,8.644,8.691,8.748,8.791,8.815,8.83,8.859,8.877,8.901,8.96,8.977,9.006,9.035,9.05,9.08,9.122,9.143,9.174,9.192,
		         9.216,9.25,9.281,9.324,9.343,9.391,9.408,9.439,9.471,9.501,9.536,9.559,9.586,9.615,9.651,9.664,9.675,9.717,9.76,9.82,9.85,9.871,9.904,9.938,9.968,9.988,10.004,10.031,10.088,10.11,10.119,
		         10.147,10.169,10.193,10.218,10.25,10.265,10.299,10.326,10.352,10.39,10.412,10.436,10.475,10.5,10.524,10.558,10.598,10.623,10.642,10.68,10.699,10.717,10.735,10.759,10.78,10.793,10.803,10.815,
		         10.846,10.871,10.889,10.903,10.921,10.949,10.989,11.025,11.041,11.061,11.096,11.114,11.126,11.135,11.154,11.17,11.201,11.23,11.261,11.294,11.311,11.336,11.365,11.388,11.424,11.465,11.481,
		         11.495,11.521,11.557,11.583,11.611,11.646,11.659,11.681,11.738,11.769,11.791,11.824,11.848,11.888,11.909,11.952,11.966,11.983,12.014,12.04,12.067,12.107,12.12,12.157,12.182,12.206,12.243,
		         12.301,12.34,12.356,12.392,12.431,12.468,12.506,12.534,12.565,12.588,12.608,12.626,12.644,12.66,12.688,12.726,12.78,12.805,12.84,12.868,12.916,12.949,12.986,13.007,13.053,13.063,13.09,
		         13.118,13.147,13.175,13.208,13.227,13.248,13.27,13.314,13.334,13.353,13.375,13.416,13.468,13.51,13.518,13.541,13.557,13.588,13.628,13.655,13.692,13.713,13.765,13.797,13.829,13.852,13.901,
		         13.951,13.969,13.987,14.025,14.039,14.051,14.097,14.115,14.137,14.175,14.192,14.208,14.239,14.278,14.293,14.323,14.364,14.402,14.43,14.447,14.474,14.503,14.523,14.543,14.576,14.624,14.654,
		         14.684,14.711,14.748,14.768,14.787,14.811,14.821,14.861,14.893,14.906,14.931,14.947,14.982,15.024,15.033,15.06,15.081,15.103,15.142,15.199,15.246,15.266,15.304,15.337,15.384,15.408,15.463,
		         15.516,15.548,15.562,15.587,15.609,15.622,15.646,15.674,15.722,15.75,15.767,15.825,15.869,15.9,15.926,15.943,15.981,16.026,16.057,16.079,16.097,16.137,16.173,16.203,16.228,16.27,16.335,
		         16.36,16.387,16.437,16.456,16.486,16.515,16.543,16.56,16.589,16.645,16.681,16.698,16.715,16.743,16.784,16.801,16.847,16.866,16.898,16.953,16.985,17.002,17.059,17.103,17.171,17.217,17.274,
		         17.306,17.33,17.368,17.419,17.453,17.486,17.507,17.538,17.562,17.595,17.632,17.665,17.71,17.752,17.798,17.83,17.902,17.924,17.971,17.994,18.026,18.043,18.084,18.122,18.157,18.209,18.237,
		         18.266,18.307,18.363,18.373,18.419,18.466,18.499,18.514,18.559,18.631,18.671,18.707,18.723,18.763,18.813,18.861,18.911,18.963,19.006,19.043,19.077,19.135,19.168,19.194,19.232,19.305,19.341,
		         19.409,19.464,19.513,19.545,19.597,19.635,19.686,19.735,19.817,19.855,19.894,19.911,19.974,20.02,20.073,20.128,20.162,20.245,20.28,20.339,20.421,20.469,20.569,20.598,20.645,20.667,20.698,
		         20.761,20.83,20.88,20.925,21.005,21.067,21.134,21.166,21.225,21.275,21.322,21.377,21.429,21.5,21.553,21.643,21.742,21.78,21.829,21.958,22.004,22.05,22.076,22.156,22.224,22.251,22.353,
		         22.434,22.48,22.573,22.637,22.692,22.793,22.862,22.929,23.02,23.073,23.266,23.306,23.364,23.421,23.466,23.558,23.626,23.7,23.761,23.845,23.909,23.969,24.051,24.141,24.324,24.365,24.482,
		         24.648,24.736,24.82,24.909,24.994,25.058,25.157,25.314,25.363,25.449,25.663,25.794,25.975,26.137,26.248,26.401,26.447,26.523,26.635,26.781,26.83,26.933,27.025,27.09,27.22,27.348,27.622,
		         27.768,27.859,27.955,28.051,28.234,28.524,28.681,28.815,28.914,29.03,29.261,29.417,29.576,29.724,29.937,30.075,30.304,30.469,30.606,30.811,31.222,31.727,31.939,32.115,32.362,33.001,
		         33.45,33.698,34.094,34.633,35.175,36.29};

		         ArrayVol = new double[] {1.258,1.204,1.227,1.213,1.226,1.591,1.262,1.311,1.595,1.24,1.259,1.402,1.707,1.111,1.096,1.186,1.733,1.532,1.246,1.587,1.395,1.611,1.495,1.634,1.356,1.694,2.063,
		         1.761,1.231,1.779,1.241,1.335,1.562,1.322,1.352,1.658,1.443,1.391,1.235,1.585,2.151,1.25,1.786,1.468,1.715,2.209,1.637,1.64,2.029,1.735,1.667,1.697,1.982,2.37,1.325,1.604,1.584,1.614,1.496,
		         1.391,2.012,1.772,2.257,2.274,1.699,1.326,2.091,1.943,1.698,1.672,1.421,2.03,1.608,2.301,2.048,1.526,2.114,2.094,1.948,1.346,1.413,1.946,1.513,1.458,1.878,1.685,2.057,2.234,2.18,1.968,2.164,
		         2.181,1.535,1.907,1.829,1.504,1.531,2.693,1.77,1.906,1.735,2.008,2.469,1.512,1.732,1.932,1.366,1.907,1.736,1.63,1.463,1.567,1.3,2.119,2.843,1.52,1.64,1.852,2.2,2.338,2.063,2.546,2.297,
		         1.953,2.156,2.242,2.331,2.254,2.572,1.665,1.531,1.843,2.85,2.496,2.476,1.518,2.191,1.522,1.59,1.797,1.99,2.138,2.382,2.467,1.564,2.324,1.715,2.154,2.343,2.994,1.48,1.592,1.671,2.17,1.511,
		         1.875,2.23,1.484,2.143,1.913,1.563,2.092,1.638,1.992,2.253,2.077,1.831,2.603,2.163,1.843,2.71,1.546,1.807,2.287,1.93,1.621,2.234,1.77,2.476,2.144,2.065,2.312,2.211,2.453,2.791,2.194,3.076,
		         1.99,2.791,2.187,1.691,2.152,2.532,2.203,2.23,2.305,2.632,1.46,2.129,2.47,2.03,1.993,2.607,2.695,1.822,2.629,1.632,2.055,2.158,2.38,1.551,2.182,2.545,2.015,3.447,1.654,3.234,2.174,2.765,2.982,
		         2.356,2.476,2.64,2.378,1.978,2.736,1.879,2.439,2.221,2.54,1.948,2.644,1.638,1.925,2.443,2.036,2.157,2.659,3.081,2.025,2.32,1.949,2.283,2.664,2.645,2.827,2.078,1.978,2.228,2.37,3.176,2.719,1.94,
		         2.108,2.594,2.5,3.446,1.896,3.229,2.346,2.782,2.399,3.755,3.016,3.383,3.421,2.02,3.252,3.205,2.481,2.886,2.37,1.967,3.349,2.231,2.858,2.205,2.485,2.714,2.427,1.757,2.706,3.03,2.116,2.994,1.745,
		         3.943,3.058,2.751,1.967,3.702,2.64,2.985,3.101,2.222,3.072,2.024,2.948,3.504,2.257,2.346,2.303,3.542,3.75,2.073,2.579,3.58,2.905,3.066,2.536,3.686,2.005,1.994,3.464,1.912,2.589,3.855,2.668,2.886,
		         2.189,2.008,2.801,2.868,2.46,3.73,1.919,2.863,2.443,2.543,2.547,3.094,2.082,3.329,2.498,2.427,2.753,2.496,3.844,3.38,3.692,2.472,2.842,2.418,3.619,3.409,3.927,2.059,2.422,3.188,3.038,4.305,
		         3.372,2.973,2.329,2.792,3.243,2.307,3.487,3.195,3.196,2.244,3.182,4.087,2.226,3.215,4.177,3.126,2.828,2.409,2.292,2.912,2.767,3.331,2.023,3.613,2.667,3.31,3.74,4.283,3.501,3.176,3.095,2.866,
		         2.322,2.987,2.678,3.987,3.258,3.235,3.315,2.663,2.962,2.933,3.199,2.913,3.366,2.528,3.93,2.96,2.443,4.611,4.139,2.265,2.409,3.229,2.694,2.328,3.937,2.584,3.253,3.565,3.727,2.373,4.084,2.45,
		         3.979,3.397,2.36,2.797,3.02,2.976,2.93,2.879,2.985,3.656,2.35,2.979,3.469,3.002,3.642,2.582,2.502,3.443,4.223,2.654,3.618,2.681,2.881,3.538,2.906,4.29,2.708,2.981,2.758,3.989,4.256,4.322,
		         2.669,2.498,3.301,3.494,2.557,4.664,3.5,4.479,3.196,2.594,3.657,3.963,3.593,3.107,4.16,3.304,3.835,2.695,4.474,4.23,3.07,4.624,2.654,3.087,3.257,3.214,3.449,3.552,4.248,4.466,4.788,4.582,
		         3.39,3.803,4.866,4.042,4.559,3.583,4.804,3.238,2.878,3.918,3.975,4.786,3.82,3.14,2.791,3.069,2.907,2.521,2.557,3.022,3.511,5.006,3.627,5.006,3.446,4.262,3.826,4.348,2.902,5.012,4.604,3.589,
		         3.691,3.554,5.265,3.294,3.829,4.415,3.381,3.405,4.119,3.952,3.35,4.237,4.071,3.175,3.495,5.116,4.473,4.224,3.461,4.182,4.069,3.526,4.776,4.081,5.084,3.622,3.601,5.185,3.562,5.013,3.234,4.756,
		         4.659,3.522,5.373,3.688,5.299,4.73,4.815,4.35,4.199,3.987,5.38,4.409,4.764};

			}
        	if (!RealisationType) // use the new method
        	{
	        	var RandomNumGenerator = new Random(666);
            
    	        // Defines parameters of transformed distribution.
    	        var loadToGenerate = MeanLoadToGenerate + AmountAddMeanLoad;
    	        double NormalMeanLoadToGenerate = Math.Log10(loadToGenerate) - 0.5 * CovarianceMatrix[0];

    	        double[,] TransformedMu = { { NormalMeanLoadToGenerate },
                                        { VectorOfMeans[1] }};

    	        double[,] SigmaRows = { { CovarianceMatrix[0], CovarianceMatrix[1] },
                                    { CovarianceMatrix[2], CovarianceMatrix[3] } };

    	        double[,] SigmaColumns = { { 1} };

    	        // Converts parameters to MathNet matrices.
    	        Matrix<double> TransformedMuMatrix = Matrix<double>.Build.DenseOfArray(TransformedMu);
    	        Matrix<double> SigmaRowsMatrix = Matrix<double>.Build.DenseOfArray(SigmaRows);
    	        Matrix<double> SigmaColumnsMatrix = Matrix<double>.Build.DenseOfArray(SigmaColumns);

    	        // Initializes transformed distribution.
    	        var TransformedMVN = new MatrixNormal(TransformedMuMatrix,
                                                  SigmaRowsMatrix,
                                                  SigmaColumnsMatrix,
                                                  RandomNumGenerator);

    	        // Generates samples and transforms them back to lognormal space.
    	        double[] LogNormalLoadSamples = new double[NumRealisations];
    	        double[] LogNormalVolumeSamples = new double[NumRealisations];

    	        for (int i = 0; i < NumRealisations; i++)
    	        {
    	            Matrix<double> LoadVolumeSample = TransformedMVN.Sample();
    	            LogNormalLoadSamples[i] = Math.Pow(10.0, LoadVolumeSample[0,0]);
    	            LogNormalVolumeSamples[i] = Math.Pow(10.0, LoadVolumeSample[1,0]);
    	        }

    	        // Updates some script parameters.
    	        ArrayLoad = LogNormalLoadSamples;
    	        ArrayVol = LogNormalVolumeSamples;
    	    }
    	    else
    	    	throw new Exception("Non-valid load-volume generation method");
        }
