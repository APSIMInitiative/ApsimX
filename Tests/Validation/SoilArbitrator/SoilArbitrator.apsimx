{
  "$type": "Models.Core.Simulations, Models",
  "Version": 165,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Memo, Models",
      "Text": "\r\n# The APSIM Soil Arbitrator Model\r\n\r\n_Huth, N.I., Fainges, J.L. and Holzworth, D.P._",
      "Name": "TitlePage",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": true,
      "GraphsPerPage": 6,
      "Name": "Simple Test Using Split Populations",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "\r\nThis test compares the water and nitrogen competition for simulations where a static crop canopy with LAI of 3, rooting depth of 1m and a daily N demand of 0.15 kgN/ha is a single crop, two half-populations or three one third-populations.  In each case the total canopy size and water demand of each of the single or split populations will be the same.  If the soil arbitrator is operating correctly the overall water and nitrogen balance of each simulation should be the same.  In the case of the split populations, the water and nitrogen supplies provided by the soil arbitrator to the sub-populations should sum to the same value calculated in the simulation for the full population.\r\n\r\nThis test simulation also tests that the uptakes provided by the arbitrator are passed to the correct instances of each crop model within a multiple zone simulation.  In such a simulation there may be multiple instances of a wheat model for example.  The arbitrator must communicate such that the correct information is supplied to each instance of each particular crop model.\r\n\r\nThe simulation includes 3 fields with up to three crops in each.\r\n\r\nField 1\r\n\r\nWheat: LAI = 3 (m^2^/m^2^), N demand = 0.15 (kg/ha)\r\n\r\nField 2\r\n\r\nWheat: LAI = 1.5 (m^2^/m^2^), N demand = 0.075 (kg/ha)\r\n\r\nBarley: LAI = 1.5 (m^2^/m^2^), N demand = 0.075 (kg/ha)\r\n\r\nField 3\r\n\r\nWheat: LAI = 1.0 (m^2^/m^2^), N demand = 0.05 (kg/ha)\r\n\r\nBarley: LAI = 1.0 (m^2^/m^2^), N demand = 0.05 (kg/ha)\r\n\r\nOats:   LAI = 1.0 (m^2^/m^2^), N demand = 0.05 (kg/ha)\r\n\r\nThe crops are simple instances of a static plant model and so the crop type is only of use in referencing the various instances of the models.\r\n",
          "Name": "Memo",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Simulation, Models",
          "Descriptors": null,
          "Name": "SplitPopulations",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Clock, Models",
              "Start": "1900-01-01T00:00:00",
              "End": "1904-12-31T00:00:00",
              "Name": "Clock",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Summary, Models",
              "Verbosity": 100,
              "Name": "SummaryFile",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Climate.Weather, Models",
              "ConstantsFile": null,
              "FileName": "%root%\\Examples\\WeatherFiles\\Dalby.met",
              "ExcelWorkSheetName": null,
              "Name": "Weather",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
              "Name": "SoilArbitrator",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "Field1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today",
                    "sum([Soil].Water.MM) as SWTotal",
                    "sum([Soil].NO3.kgha) as NO3Total",
                    "sum([Soil].NH4.kgha) as NH4Total",
                    "[Wheat].PotentialEP",
                    "[Wheat].EP"
                  ],
                  "EventNames": [
                    "[Clock].EndOfDay"
                  ],
                  "GroupByVariableName": null,
                  "Name": "Report1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "Name": "Fertiliser",
                  "ResourceName": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": "Vertosol",
                  "ASCSubOrder": "Black",
                  "SoilType": "Clay",
                  "LocalName": null,
                  "Site": "Norwin",
                  "NearestTown": "Norwin",
                  "Region": "Darling Downs and Granite Belt",
                  "State": "Queensland",
                  "Country": "Australia",
                  "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
                  "ApsoilNumber": "900",
                  "Latitude": -27.581836,
                  "Longitude": 151.320206,
                  "LocationAccuracy": " +/- 20m",
                  "YearOfSampling": null,
                  "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
                  "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
                  "Name": "Soil",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "ParticleSizeClay": null,
                      "ParticleSizeSand": null,
                      "ParticleSizeSilt": null,
                      "Rocks": null,
                      "Texture": null,
                      "BD": [
                        1.01056473311131,
                        1.07145631083388,
                        1.09393858528057,
                        1.15861335018721,
                        1.17301160318016,
                        1.16287303586874,
                        1.18749547755906
                      ],
                      "AirDry": [
                        0.130250054518252,
                        0.198689390775399,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "LL15": [
                        0.260500109036505,
                        0.248361738469248,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "DUL": [
                        0.52100021807301,
                        0.496723476938497,
                        0.488437607673005,
                        0.480296969355493,
                        0.471583596524955,
                        0.457070570557793,
                        0.452331759845006
                      ],
                      "SAT": [
                        0.588654817693846,
                        0.565676863836273,
                        0.557192986686577,
                        0.532787415023694,
                        0.527354112007486,
                        0.531179986464627,
                        0.521888499034317
                      ],
                      "KS": [
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0
                      ],
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "RocksMetadata": null,
                      "TextureMetadata": null,
                      "ParticleSizeSandMetadata": null,
                      "ParticleSizeSiltMetadata": null,
                      "ParticleSizeClayMetadata": null,
                      "Name": "Physical",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.06,
                            0.06,
                            0.06,
                            0.03,
                            0.03,
                            0.03,
                            0.03
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "WheatSoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.WaterModel.WaterBalance, Models",
                      "SummerDate": "1-Nov",
                      "SummerU": 5.0,
                      "SummerCona": 5.0,
                      "WinterDate": "1-Apr",
                      "WinterU": 5.0,
                      "WinterCona": 5.0,
                      "DiffusConst": 40.0,
                      "DiffusSlope": 16.0,
                      "Salb": 0.12,
                      "CN2Bare": 73.0,
                      "CNRed": 20.0,
                      "CNCov": 0.8,
                      "DischargeWidth": "NaN",
                      "CatchmentArea": "NaN",
                      "PSIDul": -100.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "SWCON": [
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3
                      ],
                      "KLAT": null,
                      "Name": "SoilWater",
                      "ResourceName": "WaterBalance",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Nutrients.Nutrient, Models",
                      "Name": "Nutrient",
                      "ResourceName": "Nutrient",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "Carbon": [
                        1.2,
                        0.96,
                        0.6,
                        0.3,
                        0.18,
                        0.12,
                        0.12
                      ],
                      "CarbonUnits": 0,
                      "SoilCNRatio": [
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0
                      ],
                      "FBiom": [
                        0.04,
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "FInert": [
                        0.4,
                        0.6,
                        0.8,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "FOM": [
                        347.1290323127564,
                        270.3443621919937,
                        163.97214434990104,
                        99.45413288704063,
                        60.32198083112468,
                        36.58713082867487,
                        22.1912165985086
                      ],
                      "CarbonMetadata": null,
                      "FOMMetadata": null,
                      "Name": "Organic",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "PH": [
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0
                      ],
                      "PHUnits": 0,
                      "EC": null,
                      "ESP": null,
                      "CEC": null,
                      "ECMetadata": null,
                      "CLMetadata": null,
                      "ESPMetadata": null,
                      "PHMetadata": null,
                      "Name": "Chemical",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Water, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.52100021807301,
                        0.496723476938497,
                        0.488437607673005,
                        0.480296969355493,
                        0.471583596524955,
                        0.457070570557793,
                        0.452331759845006
                      ],
                      "InitialPAWmm": 361.2454283127387,
                      "RelativeTo": "LL15",
                      "FilledFromTop": false,
                      "Name": "Water",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "Temperature",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "NO3",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1
                      ],
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "NH4",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "InitialValuesUnits": 1,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "Urea",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "SurfOM": [],
                  "Canopies": [],
                  "InitialResidueName": "wheat_stubble",
                  "InitialResidueType": "wheat",
                  "InitialResidueMass": 500.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 100.0,
                  "Name": "SurfaceOrganicMatter",
                  "ResourceName": "SurfaceOrganicMatter",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.MicroClimate, Models",
                  "a_interception": 0.0,
                  "b_interception": 1.0,
                  "c_interception": 0.0,
                  "d_interception": 0.0,
                  "SoilHeatFluxFraction": 0.4,
                  "MinimumHeightDiffForNewLayer": 0.0,
                  "NightInterceptionFraction": 0.5,
                  "ReferenceHeight": 2.0,
                  "Name": "MicroClimate",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "wheat",
                  "LAI": 3.0,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.15,
                  "Name": "wheat",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "Field2",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today",
                    "sum([Soil].Water.MM) as SWTotal",
                    "sum([Soil].NO3.kgha) as NO3Total",
                    "sum([Soil].NH4.kgha) as NH4Total",
                    "[Wheat].PotentialEP",
                    "[Barley].PotentialEP",
                    "([Wheat].PotentialEP+[Barley].PotentialEP) as TotalPEP",
                    "[Wheat].EP",
                    "[Barley].EP",
                    "([Wheat].EP+[Barley].EP) as TotalEP"
                  ],
                  "EventNames": [
                    "[Clock].EndOfDay"
                  ],
                  "GroupByVariableName": null,
                  "Name": "Report2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "Name": "Fertiliser",
                  "ResourceName": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": "Vertosol",
                  "ASCSubOrder": "Black",
                  "SoilType": "Clay",
                  "LocalName": null,
                  "Site": "Norwin",
                  "NearestTown": "Norwin",
                  "Region": "Darling Downs and Granite Belt",
                  "State": "Queensland",
                  "Country": "Australia",
                  "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
                  "ApsoilNumber": "900",
                  "Latitude": -27.581836,
                  "Longitude": 151.320206,
                  "LocationAccuracy": " +/- 20m",
                  "YearOfSampling": null,
                  "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
                  "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
                  "Name": "Soil",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "ParticleSizeClay": null,
                      "ParticleSizeSand": null,
                      "ParticleSizeSilt": null,
                      "Rocks": null,
                      "Texture": null,
                      "BD": [
                        1.01056473311131,
                        1.07145631083388,
                        1.09393858528057,
                        1.15861335018721,
                        1.17301160318016,
                        1.16287303586874,
                        1.18749547755906
                      ],
                      "AirDry": [
                        0.130250054518252,
                        0.198689390775399,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "LL15": [
                        0.260500109036505,
                        0.248361738469248,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "DUL": [
                        0.52100021807301,
                        0.496723476938497,
                        0.488437607673005,
                        0.480296969355493,
                        0.471583596524955,
                        0.457070570557793,
                        0.452331759845006
                      ],
                      "SAT": [
                        0.588654817693846,
                        0.565676863836273,
                        0.557192986686577,
                        0.532787415023694,
                        0.527354112007486,
                        0.531179986464627,
                        0.521888499034317
                      ],
                      "KS": [
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0
                      ],
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "RocksMetadata": null,
                      "TextureMetadata": null,
                      "ParticleSizeSandMetadata": null,
                      "ParticleSizeSiltMetadata": null,
                      "ParticleSizeClayMetadata": null,
                      "Name": "Physical",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.03,
                            0.03,
                            0.03,
                            0.015,
                            0.015,
                            0.015,
                            0.015
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "WheatSoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.03,
                            0.03,
                            0.03,
                            0.015,
                            0.015,
                            0.015,
                            0.015
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "BarleySoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.WaterModel.WaterBalance, Models",
                      "SummerDate": "1-Nov",
                      "SummerU": 5.0,
                      "SummerCona": 5.0,
                      "WinterDate": "1-Apr",
                      "WinterU": 5.0,
                      "WinterCona": 5.0,
                      "DiffusConst": 40.0,
                      "DiffusSlope": 16.0,
                      "Salb": 0.12,
                      "CN2Bare": 73.0,
                      "CNRed": 20.0,
                      "CNCov": 0.8,
                      "DischargeWidth": "NaN",
                      "CatchmentArea": "NaN",
                      "PSIDul": -100.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "SWCON": [
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3
                      ],
                      "KLAT": null,
                      "Name": "SoilWater",
                      "ResourceName": "WaterBalance",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Nutrients.Nutrient, Models",
                      "Name": "Nutrient",
                      "ResourceName": "Nutrient",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "Carbon": [
                        1.2,
                        0.96,
                        0.6,
                        0.3,
                        0.18,
                        0.12,
                        0.12
                      ],
                      "CarbonUnits": 0,
                      "SoilCNRatio": [
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0
                      ],
                      "FBiom": [
                        0.04,
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "FInert": [
                        0.4,
                        0.6,
                        0.8,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "FOM": [
                        347.1290323127564,
                        270.3443621919937,
                        163.97214434990104,
                        99.45413288704063,
                        60.32198083112468,
                        36.58713082867487,
                        22.1912165985086
                      ],
                      "CarbonMetadata": null,
                      "FOMMetadata": null,
                      "Name": "Organic",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "PH": [
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0
                      ],
                      "PHUnits": 0,
                      "EC": null,
                      "ESP": null,
                      "CEC": null,
                      "ECMetadata": null,
                      "CLMetadata": null,
                      "ESPMetadata": null,
                      "PHMetadata": null,
                      "Name": "Chemical",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Water, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.52100021807301,
                        0.496723476938497,
                        0.488437607673005,
                        0.480296969355493,
                        0.471583596524955,
                        0.457070570557793,
                        0.452331759845006
                      ],
                      "InitialPAWmm": 361.2454283127387,
                      "RelativeTo": "LL15",
                      "FilledFromTop": false,
                      "Name": "Water",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "Temperature",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "NO3",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1
                      ],
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "NH4",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "InitialValuesUnits": 1,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "Urea",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "SurfOM": [],
                  "Canopies": [],
                  "InitialResidueName": "wheat_stubble",
                  "InitialResidueType": "wheat",
                  "InitialResidueMass": 500.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 100.0,
                  "Name": "SurfaceOrganicMatter",
                  "ResourceName": "SurfaceOrganicMatter",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.MicroClimate, Models",
                  "a_interception": 0.0,
                  "b_interception": 1.0,
                  "c_interception": 0.0,
                  "d_interception": 0.0,
                  "SoilHeatFluxFraction": 0.4,
                  "MinimumHeightDiffForNewLayer": 0.0,
                  "NightInterceptionFraction": 0.5,
                  "ReferenceHeight": 2.0,
                  "Name": "MicroClimate",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "wheat",
                  "LAI": 1.5,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.075,
                  "Name": "wheat",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "barley",
                  "LAI": 1.5,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.075,
                  "Name": "barley",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "Field3",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today",
                    "sum([Soil].Water.MM) as SWTotal",
                    "sum([Soil].NO3.kgha) as NO3Total",
                    "sum([Soil].NH4.kgha) as NH4Total",
                    "[Wheat].PotentialEP",
                    "[Barley].PotentialEP",
                    "[Oats].PotentialEP",
                    "([Wheat].PotentialEP+[Barley].PotentialEP+[Oats].PotentialEP) as TotalPEP",
                    "[Wheat].EP",
                    "[Barley].EP",
                    "[Oats].EP",
                    "([Wheat].EP+[Barley].EP+[Oats].EP) as TotalEP"
                  ],
                  "EventNames": [
                    "[Clock].EndOfDay"
                  ],
                  "GroupByVariableName": null,
                  "Name": "Report3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "Name": "Fertiliser",
                  "ResourceName": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": "Vertosol",
                  "ASCSubOrder": "Black",
                  "SoilType": "Clay",
                  "LocalName": null,
                  "Site": "Norwin",
                  "NearestTown": "Norwin",
                  "Region": "Darling Downs and Granite Belt",
                  "State": "Queensland",
                  "Country": "Australia",
                  "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
                  "ApsoilNumber": "900",
                  "Latitude": -27.581836,
                  "Longitude": 151.320206,
                  "LocationAccuracy": " +/- 20m",
                  "YearOfSampling": null,
                  "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
                  "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
                  "Name": "Soil",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "ParticleSizeClay": null,
                      "ParticleSizeSand": null,
                      "ParticleSizeSilt": null,
                      "Rocks": null,
                      "Texture": null,
                      "BD": [
                        1.01056473311131,
                        1.07145631083388,
                        1.09393858528057,
                        1.15861335018721,
                        1.17301160318016,
                        1.16287303586874,
                        1.18749547755906
                      ],
                      "AirDry": [
                        0.130250054518252,
                        0.198689390775399,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "LL15": [
                        0.260500109036505,
                        0.248361738469248,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "DUL": [
                        0.52100021807301,
                        0.496723476938497,
                        0.488437607673005,
                        0.480296969355493,
                        0.471583596524955,
                        0.457070570557793,
                        0.452331759845006
                      ],
                      "SAT": [
                        0.588654817693846,
                        0.565676863836273,
                        0.557192986686577,
                        0.532787415023694,
                        0.527354112007486,
                        0.531179986464627,
                        0.521888499034317
                      ],
                      "KS": [
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0
                      ],
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "RocksMetadata": null,
                      "TextureMetadata": null,
                      "ParticleSizeSandMetadata": null,
                      "ParticleSizeSiltMetadata": null,
                      "ParticleSizeClayMetadata": null,
                      "Name": "Physical",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.02,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "WheatSoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.02,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "BarleySoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.02,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "OatsSoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.WaterModel.WaterBalance, Models",
                      "SummerDate": "1-Nov",
                      "SummerU": 5.0,
                      "SummerCona": 5.0,
                      "WinterDate": "1-Apr",
                      "WinterU": 5.0,
                      "WinterCona": 5.0,
                      "DiffusConst": 40.0,
                      "DiffusSlope": 16.0,
                      "Salb": 0.12,
                      "CN2Bare": 73.0,
                      "CNRed": 20.0,
                      "CNCov": 0.8,
                      "DischargeWidth": "NaN",
                      "CatchmentArea": "NaN",
                      "PSIDul": -100.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "SWCON": [
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3
                      ],
                      "KLAT": null,
                      "Name": "SoilWater",
                      "ResourceName": "WaterBalance",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Nutrients.Nutrient, Models",
                      "Name": "Nutrient",
                      "ResourceName": "Nutrient",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "Carbon": [
                        1.2,
                        0.96,
                        0.6,
                        0.3,
                        0.18,
                        0.12,
                        0.12
                      ],
                      "CarbonUnits": 0,
                      "SoilCNRatio": [
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0
                      ],
                      "FBiom": [
                        0.04,
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "FInert": [
                        0.4,
                        0.6,
                        0.8,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "FOM": [
                        347.1290323127564,
                        270.3443621919937,
                        163.97214434990104,
                        99.45413288704063,
                        60.32198083112468,
                        36.58713082867487,
                        22.1912165985086
                      ],
                      "CarbonMetadata": null,
                      "FOMMetadata": null,
                      "Name": "Organic",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "PH": [
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0
                      ],
                      "PHUnits": 0,
                      "EC": null,
                      "ESP": null,
                      "CEC": null,
                      "ECMetadata": null,
                      "CLMetadata": null,
                      "ESPMetadata": null,
                      "PHMetadata": null,
                      "Name": "Chemical",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Water, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.52100021807301,
                        0.496723476938497,
                        0.488437607673005,
                        0.480296969355493,
                        0.471583596524955,
                        0.457070570557793,
                        0.452331759845006
                      ],
                      "InitialPAWmm": 361.2454283127387,
                      "RelativeTo": "LL15",
                      "FilledFromTop": false,
                      "Name": "Water",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "Temperature",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "NO3",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1
                      ],
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "NH4",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Solute, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "InitialValuesUnits": 1,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "Urea",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "SurfOM": [],
                  "Canopies": [],
                  "InitialResidueName": "wheat_stubble",
                  "InitialResidueType": "wheat",
                  "InitialResidueMass": 500.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 100.0,
                  "Name": "SurfaceOrganicMatter",
                  "ResourceName": "SurfaceOrganicMatter",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.MicroClimate, Models",
                  "a_interception": 0.0,
                  "b_interception": 1.0,
                  "c_interception": 0.0,
                  "d_interception": 0.0,
                  "SoilHeatFluxFraction": 0.4,
                  "MinimumHeightDiffForNewLayer": 0.0,
                  "NightInterceptionFraction": 0.5,
                  "ReferenceHeight": 2.0,
                  "Name": "MicroClimate",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "wheat",
                  "LAI": 1.0,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.05,
                  "Name": "wheat",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "barley",
                  "LAI": 1.0,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.05,
                  "Name": "barley",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "oats",
                  "LAI": 1.0,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.05,
                  "Name": "oats",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "Note: Soil water levels are identical under single or split populations.",
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Total Soil Water (mm)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "SoilWater",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report1",
              "XFieldName": "Clock.Today",
              "YFieldName": "SWTotal",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field1",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report2",
              "XFieldName": "Clock.Today",
              "YFieldName": "SWTotal",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field2",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report3",
              "XFieldName": "Clock.Today",
              "YFieldName": "SWTotal",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field3",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "Note: Soil nitrate levels are identical under single or split populations.",
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Total soil NO3 (kg/ha)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "SoilNO3",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report1",
              "XFieldName": "Clock.Today",
              "YFieldName": "NO3Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field1",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report2",
              "XFieldName": "Clock.Today",
              "YFieldName": "NO3Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field2",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report3",
              "XFieldName": "Clock.Today",
              "YFieldName": "NO3Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field3",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "Note: Soil ammonium levels are identical under single or split populations.",
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Total Soil NH4 (kg/ha)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "SoilNH4",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report1",
              "XFieldName": "Clock.Today",
              "YFieldName": "NH4Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field1",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report2",
              "XFieldName": "Clock.Today",
              "YFieldName": "NH4Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field2",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report3",
              "XFieldName": "Clock.Today",
              "YFieldName": "NH4Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field3",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "Note that potential EP is identical across single or split populations.  This shows that the calculations in the Microclimate model are effective in handling split populations also.",
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Total Potential Evapotranspiration (mm)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "PotentialEP",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report1",
              "XFieldName": "Clock.Today",
              "YFieldName": "Wheat.PotentialEP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field1",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report2",
              "XFieldName": "Clock.Today",
              "YFieldName": "TotalPEP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field2",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report3",
              "XFieldName": "Clock.Today",
              "YFieldName": "TotalPEP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field3",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "Note that actual EP summed across single or split populations is identical for each simulation.",
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Total Actual Evapotranspiration (mm)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "ActualEP",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report1",
              "XFieldName": "Clock.Today",
              "YFieldName": "Wheat.EP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field1",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report2",
              "XFieldName": "Clock.Today",
              "YFieldName": "TotalEP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field2",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report3",
              "XFieldName": "Clock.Today",
              "YFieldName": "TotalEP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field3",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Intercrop test",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "\r\nThis test compares the water demands and uptakes from two instances of Slurp, running in the same field (an intercrop). Both slurp instances are configured identically and so the water demands and uptakes for each are also identical.",
          "Name": "Memo",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Clock, Models",
          "Start": "1900-01-01T00:00:00",
          "End": "1904-12-31T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "SummaryFile",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "%root%\\Examples\\WeatherFiles\\Dalby.met",
          "ExcelWorkSheetName": null,
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "Soil Arbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Field",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Slurp1].Root.Depth",
                "[Slurp2].Root.Depth",
                "[Slurp1].Leaf.LAI",
                "[Slurp2].Leaf.LAI",
                "[Slurp1].Root.WaterUptake",
                "[Slurp2].Root.WaterUptake",
                "[Slurp1].Leaf.WaterDemand",
                "[Slurp2].Leaf.WaterDemand",
                "[ExtraVariables].Script.AccumEO",
                "[ExtraVariables].Script.AccumEP",
                "[ExtraVariables].Script.AccumES",
                "[ExtraVariables].Script.AccumDrainage",
                "[ExtraVariables].Script.AccumRunoff",
                "[ExtraVariables].Script.AccumRainfall",
                "[ExtraVariables].Script.AccumIrrigation",
                "[ExtraVariables].Script.AccumOutflowLat",
                "[ExtraVariables].Script.SoilWaterDeficit"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "Intercrop",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "",
                "using Models.Soils;",
                "using APSIM.Shared.Utilities;",
                "using Models.PMF;",
                "using Models.Core;",
                "using System;",
                "using System.Linq;",
                "        ",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                "    public class Script : Model",
                "    {",
                "        [Link] Clock Clock;",
                "",
                "        [Description(\"Cultivar\")]",
                "        public string CultivarName { get; set; }",
                "        [Description(\"Initial Root Depth\")]",
                "        public double InitialRootDepth { get; set; }",
                "        [Description(\"Sowing Date\")]",
                "        public DateTime SowingDate { get; set; }",
                "",
                "               ",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            if (Clock.Today.Date == SowingDate)",
                "            {",
                "                foreach (Plant slurp in this.FindAllInScope<Plant>().OfType<IModel>().ToList())",
                "                    slurp.Sow(cultivar: CultivarName, population: 1, depth: InitialRootDepth, rowSpacing: 150);",
                "            }",
                "        }",
                "    }",
                "}",
                "                "
              ],
              "Parameters": [
                {
                  "Key": "CultivarName",
                  "Value": "StaticCrop"
                },
                {
                  "Key": "InitialRootDepth",
                  "Value": "600"
                },
                {
                  "Key": "SowingDate",
                  "Value": "1900-10-01"
                }
              ],
              "Name": "Slurp2Sow",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Norwin",
              "NearestTown": "Norwin",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
              "ApsoilNumber": "900",
              "Latitude": -27.581836,
              "Longitude": 151.320206,
              "LocationAccuracy": " +/- 20m",
              "YearOfSampling": null,
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
              "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
              "Name": "Soil",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeClay": null,
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "Rocks": null,
                  "Texture": null,
                  "BD": [
                    1.01056473311131,
                    1.07145631083388,
                    1.09393858528057,
                    1.15861335018721,
                    1.17301160318016,
                    1.16287303586874,
                    1.18749547755906
                  ],
                  "AirDry": [
                    0.130250054518252,
                    0.198689390775399,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "LL15": [
                    0.260500109036505,
                    0.248361738469248,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "DUL": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "SAT": [
                    0.588654817693846,
                    0.565676863836273,
                    0.557192986686577,
                    0.532787415023694,
                    0.527354112007486,
                    0.531179986464627,
                    0.521888499034317
                  ],
                  "KS": [
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": null,
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClayMetadata": null,
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "WheatSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "BarleySoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "Slurp1Soil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "Slurp2Soil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 5.0,
                  "SummerCona": 5.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 5.0,
                  "WinterCona": 5.0,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "PSIDul": -100.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "Name": "SoilWater",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    1.2,
                    0.96,
                    0.6,
                    0.3,
                    0.18,
                    0.12,
                    0.12
                  ],
                  "CarbonUnits": 0,
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.1290323127564,
                    270.3443621919937,
                    163.97214434990104,
                    99.45413288704063,
                    60.32198083112468,
                    36.58713082867487,
                    22.1912165985086
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "PH": [
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "InitialPAWmm": 361.2454283127387,
                  "RelativeTo": "LL15",
                  "FilledFromTop": false,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "Slurp1",
              "ResourceName": "Slurp",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "Slurp2",
              "ResourceName": "Slurp",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Newtonsoft.Json;",
                "using Models.PMF.Organs;",
                "using Models.Soils.Nutrients;",
                "using Models.Interfaces;",
                "using System;",
                "using Models.Core;",
                "using System.Collections.Generic;",
                "using System.Text;",
                "using Models.Soils;",
                "using Models.PMF;",
                "using Models;",
                "using System.Xml.Serialization;",
                "using APSIM.Shared.Utilities;",
                "using Models.Climate;",
                "",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    public class Script : Model",
                "    {",
                "        [Link] private Clock Clock;",
                "        [Link] private Weather Met;",
                "        [Link] private Fertiliser Fert;",
                "        [Link] private Irrigation Irrig;",
                "        [Link] private Plant Slurp;",
                "        [Link] private Zone zone;",
                "        [Link(ByName = true)]",
                "        private ISolute Urea;",
                "        [Link(ByName = true)]",
                "        private ISolute NO3;",
                "        [Link(ByName = true)]",
                "        private ISolute NH4;",
                "        [Link]",
                "        private Nutrient SoilNitrogen;",
                "        [Link] private Soils.Soil Soil;",
                "        [Link] private Models.Surface.SurfaceOrganicMatter SOM;",
                "        [Link(Type = LinkType.Path, Path = \"[Slurp1].Root\")]",
                "        private Root root;",
                "        [Link]",
                "        private IPhysical soilPhysical;",
                "        [Link]",
                "        private ISoilWater waterBalance;",
                "        [Link(Type=LinkType.Path, Path=\"[Nutrient].SurfaceResidue.Decomposition\")] private CarbonFlow ResidueDecomposition;                    ",
                "        [JsonIgnore] public bool InitialDay { get; set; }",
                "        ",
                "        [JsonIgnore] public double AccumPlantN { get; set; }",
                "        [JsonIgnore] public double AccumMineralisation { get; set; }",
                "        [JsonIgnore] public double AccumDenit { get; set; }",
                "        [JsonIgnore] public double AccumFert { get; set; }",
                "        [JsonIgnore] public double AccumLeach { get; set; }",
                "        [JsonIgnore] public double AccumDetach { get; set; }",
                "        [JsonIgnore] public double DeltaSoilOMN { get; set; }",
                "        [JsonIgnore] public double DeltaSurfaceOMN { get; set; }",
                "        [JsonIgnore] public double DeltaSoilMineralN { get; set; }",
                "        [JsonIgnore] public double SoilNitrogenContent { get; set; }",
                "        ",
                "        [JsonIgnore] public double AccumEO { get; set; }",
                "        [JsonIgnore] public double AccumEP { get; set; }",
                "        [JsonIgnore] public double AccumES { get; set; }",
                "        [JsonIgnore] public double AccumDrainage { get; set; }",
                "        [JsonIgnore] public double AccumRunoff { get; set; }",
                "        [JsonIgnore] public double AccumOutflowLat { get; set; }",
                "        [JsonIgnore] public double AccumIrrigation { get; set; }",
                "        [JsonIgnore] public double AccumRainfall { get; set; }",
                "        [JsonIgnore] public double SoilWaterDeficit { get; set; }",
                "    ",
                "        [JsonIgnore] public double  InitialSoilOMN { get; set; }",
                "        [JsonIgnore] public double  InitialSurfaceOMN { get; set; }",
                "        [JsonIgnore] public double  InitialMineralN { get; set; }",
                "        ",
                "        [JsonIgnore] public double SWC { get; set; }",
                "        [JsonIgnore] public double DUL { get; set; }",
                "        [JsonIgnore] public double OutFlowLat { get; set; }",
                "",
                "        [JsonIgnore] public double FomN { get; set; }",
                "        [JsonIgnore] public double BiomN { get; set; }",
                "        [JsonIgnore] public double HumN { get; set; }",
                "        [JsonIgnore] public double OrganicN { get; set; }",
                "        [JsonIgnore] public double NO3N { get; set; }",
                "        [JsonIgnore] public double NH4N { get; set; }",
                "        [JsonIgnore] public double UreaN { get; set; }",
                "        [JsonIgnore] public double MineralN { get; set; }",
                "        [JsonIgnore] public double DltNMinRes { get; set; }",
                "        [JsonIgnore] public double DltNMinTot { get; set; }",
                "        ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "            InitialDay = true;",
                "        }",
                "        ",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            //!!!!!! Nitrogen balance components !!!!!!",
                "            //!!!!!!^^^^^^^^^^^^^^^^^^^^^^^^^^^^^!!!!!!",
                "            FomN = MathUtilities.Sum(SoilNitrogen.FOM.N);",
                "            HumN = MathUtilities.Sum(SoilNitrogen.Humic.N);",
                "            BiomN = MathUtilities.Sum(SoilNitrogen.Microbial.N);",
                "            OrganicN = FomN + HumN + BiomN;",
                "            NO3N = MathUtilities.Sum(NO3.kgha);",
                "            NH4N = MathUtilities.Sum(NH4.kgha);",
                "            UreaN = MathUtilities.Sum(Urea.kgha);",
                "            MineralN = NO3N + NH4N + UreaN; ",
                "            DltNMinRes = MathUtilities.Sum(ResidueDecomposition.MineralisedN);",
                "            DltNMinTot = MathUtilities.Sum(SoilNitrogen.MineralisedN);",
                "            int layers = soilPhysical.Thickness.Length;",
                "            if (InitialDay == true)",
                "            {",
                "                InitialSurfaceOMN = SOM.N;",
                "                InitialSoilOMN = OrganicN;",
                "                InitialMineralN = MineralN;",
                "                InitialDay = false;",
                "            }",
                "            AccumFert += Fert.NitrogenApplied;",
                "            DeltaSurfaceOMN = SOM.N - InitialSurfaceOMN;",
                "            AccumLeach = AccumLeach - waterBalance.LeachNH4 - waterBalance.LeachNO3 - waterBalance.LeachUrea; //Fails",
                "            AccumMineralisation += MathUtilities.Sum(SoilNitrogen.MineralisedN);",
                "            AccumDenit -= MathUtilities.Sum(SoilNitrogen.DenitrifiedN);",
                "            AccumPlantN -= (double)zone.Get(\"Slurp1.Root.NUptake\");",
                "            DeltaSoilOMN = OrganicN - InitialSoilOMN;",
                "            DeltaSoilMineralN = MineralN - InitialMineralN;",
                "            SoilNitrogenContent = MineralN;",
                "            ",
                "            //!!!!!! Water balance components !!!!!!",
                "            //!!!!!!^^^^^^^^^^^^^^^^^^^^^^^^^^!!!!!!",
                "",
                "            AccumIrrigation += Irrig.IrrigationApplied;",
                "            AccumRainfall += Met.Rain;",
                "            //AccumEP -= (double)zone.Get(\"[Slurp].Leaf.Transpiration\");",
                "            AccumEP -= (double)zone.Get(\"Slurp1.Root.WaterUptake\");",
                "            SoilWaterDeficit = (SWC - DUL);",
                "            double OutFlowLat = MathUtilities.Sum(waterBalance.LateralOutflow);",
                "            AccumOutflowLat -= OutFlowLat;",
                "        }",
                "        ",
                "        [EventSubscribe(\"DoManagementCalculations\")]",
                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                "        {",
                "            FomN = MathUtilities.Sum(SoilNitrogen.FOM.N);",
                "            HumN = MathUtilities.Sum(SoilNitrogen.Humic.N);",
                "            BiomN = MathUtilities.Sum(SoilNitrogen.Microbial.N);",
                "            ",
                "            ",
                "            AccumEO -= waterBalance.Eo;",
                "            AccumES -= waterBalance.Es; ",
                "            AccumDrainage -= waterBalance.Drainage;",
                "            AccumRunoff -= waterBalance.Runoff;",
                "            SWC = MathUtilities.Sum(waterBalance.SWmm);",
                "            DUL = MathUtilities.Sum(soilPhysical.DULmm);",
                "        }",
                "    }",
                "}",
                "       "
              ],
              "Parameters": [],
              "Name": "ExtraVariables",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser1",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Water Demand and Uptake (mm)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Water Demand and Uptakes",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Intercrop",
              "XFieldName": "Clock.Today",
              "YFieldName": "Slurp1.Leaf.WaterDemand",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Slurp1Demand",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -3376729,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Intercrop",
              "XFieldName": "Clock.Today",
              "YFieldName": "Slurp2.Leaf.WaterDemand",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Slurp2Demand",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Intercrop",
              "XFieldName": "Clock.Today",
              "YFieldName": "Slurp1.Root.WaterUptake",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Slurp1Uptake",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -990142,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Intercrop",
              "XFieldName": "Clock.Today",
              "YFieldName": "Slurp2.Root.WaterUptake",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Slurp2Uptake",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": true,
      "GraphsPerPage": 6,
      "Name": "Conceptual Tests of Multiple Crops in a Single Zone",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "The series of test and simulations in this section test the performance of SoilArbitrator when there are multiple plants competing for resources in a single zone.  These tests take place with either a deep or a shallow soil and in the Lincoln (NZ) environment.  The plants vary between one or more Slurps, one or more ryegrasses and then finally a ryegrass â€“ white clover sward.\r\n\r\nThe first test compares simulations with one Slurp against equivalent simulations with two Slurps (each with half the leaf area etc. as the single Slurp).  The point is to demonstrate that the SoilArbitrator can effectively aggregate the multiple Slurps to match the single.\r\n\r\nAgPasture Deep Soil Test simulations have either two deep-rooted ryegrasses or one deep and one shallow rooted.  The simulated plant growth and sward composition are compared when under conditions with and without irrigation and fertiliser.  The exercise is repeated in AgPasture Shallow Soil Test but using a soil with substantially reduced soil water storage.\r\n\r\nAgPasture Test Root Depth Differential repeats AgPasture Deep Soil Test but only under conditions of no irrigation or fertiliser but with a range of rooting depths of the second ryegrass.\r\n\r\n The final test A Ryegrass and White Clover Example is more realistic in that it contains a white clover competing with a ryegrass and examines the changing sward composition as water and/or fertiliser are added to the simulation.\r\n",
          "Name": "Overview",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "01 Basic Conceptual Test",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This 'experiment' does a basic test of the SoilArbitrator comparing a single Slurp to two equal Slurps, both with and without irrigation and fertiliser.  Slurp is a static plant model in which LAI, water and nitrogen demand are user-set constants but in which the uptake of water and N are determined by availability and competition.  \r\n\r\nSuccess in this test is that there should be minimal differences in leaf weight, soil water and soil nitrogen uptake when comparing one Slurp (OneSlurp) to two equal Slurps (TwoSlurp).  The simulations are done under conditions of unlimited irrigation and fertiliser (Plus) and with no irrigation or fertiliser (Minus).  In the graphs below, the relevant outputs from the individual Slurps in TwoSlurp are added together in the Output component.\r\n\r\nOneSlurp models are set up with photosynthesis at 6.0 g C /m2, LAI at 3.5 and N uptake at 2.5 kg N /ha /day.  TwoSlurp simulations are set up with two equal Slurps using values of 3.0 g C /m2, LAI at 1.75 and N uptake at 1.25 kg N /ha /day.  All simulations are run using the Lincoln weather data.\r\n\r\nThe first four graphs below show soil water storage, soil nitrate N storage, cumulative water uptake and cumulative N uptake for the four contrasting simulations.  As expected, there are minimal differences caused by the number of Slurp models in the simulation but there are substantial differences caused by the presence or absence of irrigation and fertiliser.  \r\n\r\nThere are small differences in the soil water storage for the water-limited simulations (first graph, SoilWater) under conditions of severe water shortage.  These are likely to be due to the approximations in the Runge-Kutta method.  While it might be improved with a higher-order solution, the third plot (WaterUptake) shows that there are no persistent differences in water uptake and that the Runge-Kutta solution is likely to be sufficient for the types of simulation for which APSIM is used.\r\n\r\nThe second and fourth graphs minimal differences in N storage and N uptake.\r\n\r\nThe final two plots show the water and N uptake from the TwoSlurp simulations only giving the uptake from the individual crops.  As expected, there are no discernible differences between the crops.\r\n\r\nThe simulations in this section are very simple conceptual tests using the static Slurp model.  They show that the Runge-Kutta method in SoilArbitrator is behaving sensibly in the presence of two equal crops when they are compared to a single equivalent crop.  These were intentionally simple tests.  Slurp is a static model and will not reduce its water or N demand in response to stress (i.e. no feedback to crop performance).  The next series of tests will use a dynamic model that will include that feedback.",
              "Name": "Memo BasicConceptualTest",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWater",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "sum(LismoreSoil.Water.MM)",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNO3",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "sum(LismoreSoil.NO3.kgha)",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "WaterTakenUp",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NUptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "NTakenUp",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Individual_Water_Uptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "Slurp1.Root.WaterUptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "NumSlurps = 2",
                  "Name": "Slurp1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 9,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "Slurp2.Root.WaterUptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "NumSlurps = 2",
                  "Name": "Slurp2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Individual_N_Uptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "Slurp1.Root.NTakenUp",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "NumSlurps = 2",
                  "Name": "Slurp1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 9,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "Slurp2.Root.NTakenUp",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "NumSlurps = 2",
                  "Name": "Slurp2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment01",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "",
                      "Name": "Factor",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[SlurpSowMulitple].Script.NumSlurps = 1",
                            "[SetProduction].Script.OverRidePhoto = 6.0",
                            "[SetProduction].Script.OverRideLAI = 3.5",
                            "[SetProduction].Script.OverRideNUp = 2.5",
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "OneSlurp_Plus",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[SlurpSowMulitple].Script.NumSlurps = 2",
                            "[SetProduction].Script.OverRidePhoto = 3.0",
                            "[SetProduction].Script.OverRideLAI = 1.75",
                            "[SetProduction].Script.OverRideNUp = 1.25",
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "TwoSlurp_Plus",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[SlurpSowMulitple].Script.NumSlurps = 1",
                            "[SetProduction].Script.OverRidePhoto = 6.0",
                            "[SetProduction].Script.OverRideLAI = 3.5",
                            "[SetProduction].Script.OverRideNUp = 2.5",
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "OneSlurp_Minus",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[SlurpSowMulitple].Script.NumSlurps = 2",
                            "[SetProduction].Script.OverRidePhoto = 3.0",
                            "[SetProduction].Script.OverRideLAI = 1.75",
                            "[SetProduction].Script.OverRideNUp = 1.25",
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "TwoSlurp_Minus",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "Descriptors": null,
                  "Name": "BasicConceptualTest",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "1980-07-01T00:00:00",
                      "End": "1981-06-30T00:00:00",
                      "Name": "Clock",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.Weather, Models",
                      "ConstantsFile": null,
                      "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                      "ExcelWorkSheetName": null,
                      "Name": "Weather",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Field",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn fertiliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int FertOn { get; set; }",
                                "",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount * FertOn, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "FertOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "500"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "200"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "OnOffFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")]",
                                "        public answerType allowIrrigation { get; set; }",
                                "        ",
                                "        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int IrrigOn { get; set; }",
                                "",
                                "",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply * IrrigOn);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "IrrigOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "15-Aug"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "30-May"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "75"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "30"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "300"
                                }
                              ],
                              "Name": "OnOffIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "",
                                "using Models.Soils;",
                                "using System;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link(ByName = true)] Plant Slurp1;",
                                "        [Link(ByName = true)] Plant Slurp2;",
                                "        [Link] Clock Clock;",
                                "",
                                "        [Description(\"How many Slurps should be sown?\")] public int NumSlurps { get; set; }",
                                "        [Description(\"Cultivar\")] public string CultivarName { get; set; }",
                                "        [Description(\"Initial Root Depth\")] public double InitialRootDepth { get; set; }",
                                "        [Description(\"Sowing Date\")] public DateTime SowingDate { get; set; }",
                                "",
                                "               ",
                                "        [EventSubscribe(\"DoManagement\")] private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            if (Clock.Today.Date == SowingDate)",
                                "            {",
                                "                Slurp1.Sow(cultivar: CultivarName, population: 1, depth: InitialRootDepth, rowSpacing: 150);",
                                "                if (NumSlurps > 1)",
                                "                    Slurp2.Sow(cultivar: CultivarName, population: 1, depth: InitialRootDepth, rowSpacing: 150);                ",
                                "            }",
                                "        }",
                                "    }",
                                "}",
                                "                "
                              ],
                              "Parameters": [
                                {
                                  "Key": "NumSlurps",
                                  "Value": "1"
                                },
                                {
                                  "Key": "CultivarName",
                                  "Value": "StaticCrop"
                                },
                                {
                                  "Key": "InitialRootDepth",
                                  "Value": "600"
                                },
                                {
                                  "Key": "SowingDate",
                                  "Value": "1980-07-01"
                                }
                              ],
                              "Name": "SlurpSowMulitple",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Models.Soils;",
                                "using System;",
                                "using Models.Core;",
                                "using System.Collections.Generic;",
                                "using System.Text;",
                                "using Models.PMF;",
                                "using Models;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] Plant Plant;",
                                "        [Link(ByName = true)] Plant Slurp1;",
                                "        [Link(ByName = true)] Plant Slurp2;",
                                "        [Link] Clock Clock;",
                                "        [Link] Zone zone;",
                                "        ",
                                "        public int myNumSlurps { get; set; }",
                                "        public string OverRidePath { get; set; }",
                                "        ",
                                "        [Description(\"Change Date\")] public DateTime ChangeDate { get; set; }",
                                "        [Description(\"Value for Leaf.Photosynthesis.FixedValue\")] public double OverRidePhoto { get; set; }",
                                "        [Description(\"Value for Leaf.Area.FixedValue\")] public double OverRideLAI { get; set; }",
                                "        [Description(\"Value for Root.MaxDailyNUptake.FixedValue\")] public double OverRideNUp { get; set; }",
                                "        //[Description(\"Value for new coefficient Integer\")] public int OverRideInteger { get; set; }",
                                "",
                                "",
                                "",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")] private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            myNumSlurps = (int)zone.Get(\"[SlurpSowMulitple].Script.NumSlurps\");",
                                "            OverRidePath = \"Leaf.Photosynthesis.FixedValue\";",
                                "        }",
                                "        ",
                                "        [EventSubscribe(\"DoManagement\")] private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            if (Clock.Today.Date == ChangeDate)",
                                "            {",
                                "                object ResetValue = OverRidePhoto;",
                                "                OverRidePath = \"Leaf.Photosynthesis.FixedValue\";",
                                "                zone.Set(\"Slurp1.\" + OverRidePath, ResetValue);",
                                "                if (myNumSlurps > 1)",
                                "                    zone.Set(\"Slurp2.\" + OverRidePath, ResetValue);",
                                "",
                                "                ResetValue = OverRideLAI;",
                                "                OverRidePath = \"Leaf.Area.FixedValue\";",
                                "                zone.Set(\"Slurp1.\" + OverRidePath, ResetValue);",
                                "                if (myNumSlurps > 1)",
                                "                    zone.Set(\"Slurp2.\" + OverRidePath, ResetValue);",
                                "",
                                "                ResetValue = OverRidePhoto;",
                                "                OverRidePath = \"Root.MaxDailyNUptake.FixedValue\";",
                                "                zone.Set(\"Slurp1.\" + OverRidePath, ResetValue);",
                                "                if (myNumSlurps > 1)",
                                "                    zone.Set(\"Slurp2.\" + OverRidePath, ResetValue);",
                                "            }",
                                "        }",
                                "    }",
                                "}",
                                "       "
                              ],
                              "Parameters": [
                                {
                                  "Key": "OverRidePhoto",
                                  "Value": "6"
                                },
                                {
                                  "Key": "OverRideLAI",
                                  "Value": "3.5"
                                },
                                {
                                  "Key": "OverRideNUp",
                                  "Value": "4"
                                },
                                {
                                  "Key": "myNumSlurps",
                                  "Value": "0"
                                },
                                {
                                  "Key": "OverRidePath",
                                  "Value": "Leaf.Photosynthesis.FixedValue"
                                },
                                {
                                  "Key": "ChangeDate",
                                  "Value": "1980-07-01"
                                }
                              ],
                              "Name": "SetProduction",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 0.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 1000.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.PMF.Plant, Models",
                          "Name": "Slurp1",
                          "ResourceName": "Slurp",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.PMF.Plant, Models",
                          "Name": "Slurp2",
                          "ResourceName": "Slurp",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": "NZ_Sedimentary",
                          "LocalName": "Lismore",
                          "Site": "Winchmore",
                          "NearestTown": "Ashburton",
                          "Region": "Canterbury",
                          "State": null,
                          "Country": "New Zealand",
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": -48.48,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "LismoreSoil",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "ParticleSizeClay": [
                                20.0,
                                15.0,
                                12.0,
                                8.0,
                                6.0,
                                5.0,
                                5.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.35,
                                1.0,
                                0.53,
                                0.31,
                                0.3,
                                0.3
                              ],
                              "AirDry": [
                                0.05,
                                0.12,
                                0.055,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "LL15": [
                                0.15,
                                0.14,
                                0.055,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "DUL": [
                                0.36,
                                0.34,
                                0.19,
                                0.065,
                                0.04,
                                0.03,
                                0.03
                              ],
                              "SAT": [
                                0.45,
                                0.43,
                                0.25,
                                0.15,
                                0.11,
                                0.11,
                                0.11
                              ],
                              "KS": [
                                5000.0,
                                2500.0,
                                3000.0,
                                10000.0,
                                17500.0,
                                20000.0,
                                20000.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Slurp1Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Slurp2Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 2.0,
                              "WinterCona": 2.0,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "PSIDul": -100.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "SWCON": [
                                0.5,
                                0.52,
                                0.55,
                                0.6,
                                0.65,
                                0.65,
                                0.65
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "Carbon": [
                                3.0,
                                1.0,
                                0.6,
                                0.4,
                                0.25,
                                0.15,
                                0.1
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.04,
                                0.02,
                                0.02,
                                0.01,
                                0.01,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.5,
                                0.7,
                                0.83,
                                0.9,
                                0.95,
                                0.99,
                                0.99
                              ],
                              "FOM": [
                                331.337020409173,
                                245.4605019055056,
                                164.53709493722965,
                                121.89207790753734,
                                73.93128242700234,
                                40.57434806729268,
                                22.267674346259405
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.3495,
                                0.33,
                                0.18325,
                                0.0625,
                                0.0385,
                                0.028999999999999998,
                                0.028999999999999998
                              ],
                              "InitialPAWmm": 109.725,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "[SlurpSowMulitple].Script.NumSlurps as NumSlurps",
                            "[Slurp1].Leaf.Wt",
                            "[Slurp2].Leaf.Wt",
                            "[Slurp1].Root.NTakenUp",
                            "[Slurp2].Root.NTakenUp",
                            "[Slurp1].Root.WaterUptake",
                            "[Slurp2].Root.WaterUptake",
                            "([Slurp1].Leaf.Wt+[Slurp2].Leaf.Wt) as LeafWt",
                            "([Slurp1].Leaf.LAI+[Slurp2].Leaf.LAI) as LAI",
                            "([Slurp1].Root.WaterUptake+[Slurp2].Root.WaterUptake) as WaterTakenUp",
                            "([Slurp1].Root.NTakenUp+[Slurp2].Root.NTakenUp) as NTakenUp",
                            "sum([LismoreSoil].Nutrient.NO3.kgha)",
                            "sum([LismoreSoil].SoilWater.SWmm)"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "BasicConceptualTest",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "02 AgPasture Deep Soil Test",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This next series of tests uses a dynamic (full) crop model so that any discrepancies in water or N supply to the plant will produce feedbacks into demand and subsequent uptake.  In this series of tests each simulation contains two ryegrass models.  In the Equal simulations both ryegrasses have a rooting depth of 750 mm while in the Unequal simulations Rye1 has a 750 mm root depth but Rye2 has a 150 mm root depth.  In all other respects the crops are equal.  Simulations are run with unlimited irrigation and fertiliser (IrrigFert) and without either input supplied (DryNofert).  The simulations use a soil with 132 mm of PAW to 750 mm deep in the Lincoln environment. \r\n\r\nThe first two graphs show that there is no difference in standing herbage between the ryegrasses if they have the same rooting depth.  Graphs 3 and 4 show the significant advantage that the deeper-rooting Rye1 has over Rye2 in the Unequal simulations.  \r\n\r\nThe fifth graph Yield shows that there is a slight yield advantage, persistent despite inputs of irrigation or fertiliser, when the rooting depths are equal and deep.  This shows that the yield from the deeper-rooting Rye1 cannot completely compensate for the loss of yield from the shallow-rooting Rye2.  The sixth graph shows the proportion of the total yield originating from Rye1.  In the Equal simulations this sits, of course, at 0.5.  However, in the Unequal simulations the proportion of yield from Rye1 rises to 0.65 with earlier increases in this proportion when no irrigation or fertiliser is applied. \r\n",
              "Name": "Memo AgPastureDeepSoilTest",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage EqualIrrigFert",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 8,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualIrrigFert'",
                  "Name": "Rye1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualIrrigFert'",
                  "Name": "Rye2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage EqualDryNofert",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 8,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualDryNofert'",
                  "Name": "Rye1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualDryNofert'",
                  "Name": "Rye2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage UnequalIrrigFert",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 8,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalIrrigFert'",
                  "Name": "Rye1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalIrrigFert'",
                  "Name": "Rye2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage UnequalDryNofert",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 8,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalDryNofert'",
                  "Name": "Rye1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalIrrigFert'",
                  "Name": "Rye2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Yield",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Yield",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Yield",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.45,
                  "Maximum": 0.7,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PropRye1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": "Factor",
                  "FactorToVaryLines": "Factor",
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "PropYieldRye1",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "PropRye1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment02",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "",
                      "Name": "Factor",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "EqualIrrigFert",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "EqualDryNofert",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 150",
                            "[Rye2].InitialRootDepth = 150"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "UnequalIrrigFert",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 150",
                            "[Rye2].InitialRootDepth = 150"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "UnequalDryNofert",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "Descriptors": null,
                  "Name": "AgPastureDeepSoilTest",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "1971-07-01T00:00:00",
                      "End": "1972-06-30T00:00:00",
                      "Name": "Clock",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.Weather, Models",
                      "ConstantsFile": null,
                      "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                      "ExcelWorkSheetName": null,
                      "Name": "Weather",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Field",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn fertiliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int FertOn { get; set; }",
                                "",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount * FertOn, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "FertOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "200"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "15"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "25"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "14"
                                }
                              ],
                              "Name": "OnOffFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")]",
                                "        public answerType allowIrrigation { get; set; }",
                                "        ",
                                "        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int IrrigOn { get; set; }",
                                "",
                                "",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply * IrrigOn);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "IrrigOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "15-Aug"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "30-May"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "75"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "30"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "300"
                                }
                              ],
                              "Name": "OnOffIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }",
                                "        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }",
                                "        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }",
                                "        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }",
                                "        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }",
                                "        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }",
                                "        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }",
                                "        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }",
                                "        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }",
                                "        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }",
                                "        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }",
                                "        // Description: Pasture DM defoliated today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }",
                                "        // Description: Pasture N defoliate today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }",
                                "        // Description: Pasture DM harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }",
                                "        // Description: Pasture N harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }",
                                "        // Description: Pasture DM removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }",
                                "        // Description: Pasture N removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }",
                                "        // Description: Residue DM returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }",
                                "        // Description: Residue N returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }",
                                "        // Description: Harvested N returned as dung (SurfaceOM)",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }",
                                "        // Description: Harvested N returned as urine (urea)",
                                "        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }",
                                "        // Description: Number of days after last defoliation",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                                "        ",
                                "        // - Internal variables",
                                "        // fraction of harvested Dm to actually remove from field",
                                "        private double fractionDM2Remove = 1.0;",
                                "        // flag whether defoliation is allowed",
                                "        //private bool rotationAllowed = true;",
                                "        // number of days for each defoliation event",
                                "        private int cuttingDuration = 0;",
                                "        // counter for day within each defoliation",
                                "        private int daysCutting = 0;",
                                "        // type of interval (Fixed or target)",
                                "        private string intervalType;",
                                "        // total herbage to remove in g/m2 per day",
                                "        private double herbageToRemove;",
                                "        // type of DM amount (ResidualDM or DMToRemove)",
                                "        private string amountType;",
                                "        // auxiliary flag for defoliation",
                                "        private bool aCutHasHappened = false;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "",
                                "            // reset variables",
                                "            DaysAfterCut = 0;",
                                "            resetVariables();",
                                "            cuttingDuration = DurationOfCut;",
                                "            ",
                                "            // get the type of amount given",
                                "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                                "                amountType = \"SetResidueAmount\";",
                                "            else",
                                "                amountType = \"SetRemoveAmount\";",
                                "",
                                "            // get the type of amount given",
                                "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                                "                intervalType = \"Fixed\";",
                                "            else",
                                "                intervalType = \"Target\";",
                                "",
                                "            // make sure that rotation starts when startDate < simulationStartDay",
                                "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                                "                CutRotationStartDate = Clock.Today;",
                                "        }",
                                "        ",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            if (rotationAllowed)",
                                "            {",
                                "                if (Clock.Today == CutRotationStartDate)",
                                "                    DaysAfterCut = CutInterval;",
                                "",
                                "                bool SwardIsAlive = false;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                {",
                                "                    if (species.IsAlive)",
                                "                        SwardIsAlive = true;",
                                "                }",
                                "                ",
                                "                // Check whether we can defoliate",
                                "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))",
                                "                {",
                                "                    // Check whether we should start a defoliation",
                                "                    if (DaysAfterCut >= (CutInterval - 1))",
                                "                    {",
                                "                        Graze(AmountGiven, amountType, DurationOfCut);",
                                "                    }",
                                "                }",
                                "            }",
                                "",
                                "            // Check whether we need to continue cutting",
                                "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                                "            {",
                                "                // reset outputs",
                                "                resetVariables();",
                                "",
                                "                removeDM(herbageToRemove);",
                                "                returnExcreta();",
                                "                daysCutting += 1;",
                                "                if (daysCutting == cuttingDuration)",
                                "                {",
                                "                    PostHarvestDM = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        PostHarvestDM += species.Standing.Wt;",
                                "                }",
                                "            }",
                                "",
                                "            // reset outputs",
                                "            if (daysCutting < 0)",
                                "            {",
                                "                resetVariables();",
                                "                daysCutting = 0;",
                                "            }",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            // Check whether a cutting has finished",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                aCutHasHappened = true;",
                                "                daysCutting = -1;",
                                "            }",
                                "",
                                "            // Increase the counter for days after cutting",
                                "            if (aCutHasHappened && (daysCutting == 0))",
                                "                DaysAfterCut += 1;",
                                "        }",
                                "",
                                "        public enum removeAmountTypes",
                                "        {",
                                "            /// <summary>Setting DM amount to remove</summary>",
                                "            DMToRemove,",
                                "            /// <summary>Setting residual DM amount</summary>",
                                "            ResidualDM",
                                "        }",
                                "",
                                "        public enum rotationIntervalTypes",
                                "        {",
                                "            /// <summary>Setting a fixed interval</summary>",
                                "            FixedInterval,",
                                "            /// <summary>Setting a target (minimum) inteval</summary>",
                                "            TargetInterval",
                                "        }",
                                "",
                                "        public enum removeDMTypes",
                                "        {",
                                "            /// <summary>Remove all DM</summary>",
                                "            RemoveAll,",
                                "            /// <summary>Remove no DM</summary>",
                                "            RemoveNone,",
                                "            /// <summary>Remove a fraction based on digestibility</summary>",
                                "            BasedOnDigestibility",
                                "        }",
                                "",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "        ",
                                "                ",
                                "        // Resets the values of all outputs",
                                "        private void resetVariables()",
                                "        {",
                                "            DefoliatedWt = 0.0;",
                                "            DefoliatedN = 0.0;",
                                "            HarvestedWt = 0.0;",
                                "            HarvestedN = 0.0;",
                                "            RemovedWt = 0.0;",
                                "            RemovedN = 0.0;",
                                "            ReturnedWt = 0.0;",
                                "            ReturnedN = 0.0;",
                                "            NReturnedInDung = 0.0;",
                                "            NReturnedInUrine = 0.0;",
                                "        }",
                                "",
                                "        // Description: Perform the basic calculations for defoliation",
                                "        public void Graze(double amountDM, string amountType, int duration)",
                                "        {",
                                "            // Get the existing plant amount",
                                "            PreHarvestDM = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                PreHarvestDM += species.Standing.Wt;",
                                "            ",
                                "            // Check the amount to remove and print some info",
                                "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = amountDM / duration;",
                                "            }",
                                "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                                "            }",
                                "            else",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                                "                if (intervalType == \"Fixed\")",
                                "                    DaysAfterCut = -duration;",
                                "                return;",
                                "            }",
                                "",
                                "            cuttingDuration = duration;",
                                "            // Preform first defoliation",
                                "            removeDM(herbageToRemove);",
                                "            returnExcreta();",
                                "            daysCutting = 1;",
                                "            DaysAfterCut = 0;",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                PostHarvestDM = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    PostHarvestDM += species.Standing.Wt;",
                                "            }",
                                "        }",
                                "",
                                "        // Do the DM removal",
                                "        private void removeDM(double removeAmount)",
                                "        {",
                                "            double existingWt = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                existingWt += species.Harvestable.Wt;",
                                "",
                                "",
                                "            // Check whether we harvest anything",
                                "            if (existingWt >= removeAmount)",
                                "            {",
                                "                foreach (AgPasture.PastureSpecies species in Pasture)",
                                "                {",
                                "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                                "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                                "                }",
                                "                ",
                                "                // get total harvested",
                                "                DefoliatedWt = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedWt += species.HarvestedWt;",
                                "                DefoliatedN = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedN += species.HarvestedN;",
                                "                HarvestedWt = DefoliatedWt;",
                                "                HarvestedN = DefoliatedN;",
                                "",
                                "                // get amounts actually removed from field and that to be returned (dung/urine)",
                                "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                                "                    fractionDM2Remove = 1.0;",
                                "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                                "                    fractionDM2Remove = 0.0;",
                                "                else",
                                "                {",
                                "                    fractionDM2Remove = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;",
                                "                    fractionDM2Remove /= removeAmount;",
                                "                }",
                                "                ",
                                "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                                "                RemovedN = HarvestedN * FractionN2Remove;",
                                "                ReturnedWt = HarvestedWt - RemovedWt;",
                                "                ReturnedN = HarvestedN - RemovedN;",
                                "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                                "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                                "            }",
                                "        }",
                                "",
                                "        // Return dung and urine",
                                "        private void returnExcreta()",
                                "        {",
                                "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                                "            {",
                                "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                                "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                                "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                                "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                                "                float[] dltp = new float[] { 0 };",
                                "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                                "",
                                "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                                "                BiomassDung.dm_type = type;",
                                "                BiomassDung.dlt_crop_dm = dltdm;",
                                "                BiomassDung.dlt_dm_n = dltn;",
                                "                BiomassDung.dlt_dm_p = dltp;",
                                "                BiomassDung.fraction_to_residue = fraction;",
                                "                BiomassRemoved.Invoke(BiomassDung);",
                                "            }",
                                "",
                                "            if (NReturnedInUrine > 0.0)",
                                "            {",
                                "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "21"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "1000"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"kg/kg\")] public double PropYieldRye1 { get; set; }",
                                "        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye1 { get; set; }",
                                "        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye2 { get; set; }",
                                "        ",
                                "        // - Internal variables",
                                "        //private double fractionDM2Remove = 1.0;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        //public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "            YieldRye1 = 0.0;",
                                "            YieldRye2 = 0.0;",
                                "            PropYieldRye1 = 0.0;",
                                "        }",
                                "        ",
                                "",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                //Pasture.Add(species);",
                                "            }",
                                "            YieldRye1 += Pasture[0].HarvestedWt;",
                                "            YieldRye2 += Pasture[1].HarvestedWt;",
                                "            if ((YieldRye1 + YieldRye2) > 0.0)",
                                "                PropYieldRye1 = YieldRye1 / (YieldRye1 + YieldRye2);",
                                "        }",
                                "",
                                "    }",
                                "}"
                              ],
                              "Parameters": [],
                              "Name": "PropRye1",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 0.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 1000.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "Rye1",
                          "ResourceName": "AGPRyegrass",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "Rye2",
                          "ResourceName": "AGPRyegrass",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": null,
                          "Site": null,
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "TempletonABlock",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "PH": [
                                6.6,
                                6.2,
                                5.7,
                                5.5,
                                5.5,
                                5.5
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.27,
                                0.27,
                                0.29,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "InitialPAWmm": 222.0,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "ParticleSizeClay": null,
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.0,
                                1.0,
                                1.59,
                                1.57,
                                1.6,
                                1.6
                              ],
                              "AirDry": [
                                0.05,
                                0.05,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "DUL": [
                                0.27,
                                0.27,
                                0.29,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "SAT": [
                                0.42,
                                0.4,
                                0.36,
                                0.37,
                                0.37,
                                0.32
                              ],
                              "KS": [
                                4832.0,
                                389.0,
                                16.0,
                                16.0,
                                98.0,
                                98.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye1Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye2Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 9.0,
                              "SummerCona": 4.4,
                              "WinterDate": "1-Apr",
                              "WinterU": 9.0,
                              "WinterCona": 4.4,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.4,
                              "Salb": 0.18,
                              "CN2Bare": 68.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": "NaN",
                              "CatchmentArea": "NaN",
                              "PSIDul": -100.0,
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "SWCON": [
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55
                              ],
                              "KLAT": null,
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 30.0,
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "Carbon": [
                                1.82,
                                1.47,
                                1.2,
                                1.03,
                                0.47,
                                0.47
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5
                              ],
                              "FBiom": [
                                0.025,
                                0.025,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "FInert": [
                                0.3,
                                0.4,
                                0.75,
                                0.9,
                                0.96,
                                0.96
                              ],
                              "FOM": [
                                1243.9310541346904,
                                833.8319214727269,
                                457.61666105087295,
                                251.1453484552152,
                                137.83148958311097,
                                75.64352530338392
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Graph, Models",
                              "Caption": null,
                              "Axis": [
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Depth (mm)",
                                  "Position": 0,
                                  "Inverted": true,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                },
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Volumetric water (mm/mm)",
                                  "Position": 1,
                                  "Inverted": false,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                }
                              ],
                              "LegendPosition": 3,
                              "LegendOrientation": 0,
                              "AnnotationLocation": 0,
                              "DisabledSeries": null,
                              "LegendOutsideGraph": false,
                              "Name": "Graph",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 2,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -3479297,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "[Soil].DUL",
                                  "Y2FieldName": "[Soil].DepthMidPoints",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL15",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16711681,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL151",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -32768,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil]l.DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL152",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -65536,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].AirDry",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "Air dry",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16776961,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].DUL",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "DUL",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16760704,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].SAT",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "SAT",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                27.3,
                                11.4,
                                0.25157232704402605,
                                1.9532908704883236,
                                1.9166666666666667,
                                0.20833333333333334
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                4.3,
                                7.6,
                                4.1,
                                2.7,
                                2.4,
                                0.1
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([TempletonABlock].Nutrient.NO3.kgha) as NO3",
                            "sum([TempletonABlock].SoilWater.SWmm) as SWDep",
                            "[Rye1].AboveGroundWt",
                            "[Rye2].AboveGroundWt",
                            "[Rye1].HarvestedWt",
                            "[Rye2].HarvestedWt",
                            "([Rye1].HarvestedWt + [Rye2].HarvestedWt) as Yield",
                            "[PropRye1].Script.PropYieldRye1 as PropYieldRye1",
                            "([Fertiliser].NitrogenApplied-( 10.0 * [CutRotation].Script.NReturnedInUrine)) as RealFert",
                            "[Rye2].RootDepth"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "AgPastureDeepSoilTest",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "03 AgPasture Shallow Soil Test",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This series of simulations is as for AgPasture Deep Soil Test but substituting a soil with a lower soil water storage - 60 mm to 750 mm deep.  The graphs of the simulations with equal ryegrasses are not repeated but the standing herbage from the equal ryegrass simulations are shown as a reference on the first two graphs.  \r\n\r\nUnder conditions of no irrigation or fertiliser the differences between Rye1 and Rye2 are intensified under the shallow soil compared to the earlier simulations with the deep soil.  The proportion of the total yield from Rye1 is greater in the shallow than the deep soil but still reaches a maximum of 0.67.  The dominance of Rye1 seems limited by the couple of months (in winter) at the beginning of the simulation in which the shallow-rooted Rye2 is not much constrained by its shallow root depth.\r\n",
              "Name": "Memo AgPastureShallowSoilTest",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage UnequalIrrigFert",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalIrrigFert1'",
                  "Name": "Rye1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalIrrigFert1'",
                  "Name": "Rye2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualIrrigFert1'",
                  "Name": "RyeEqualForReference",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage UnequalDryNofert",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalDryNofert1'",
                  "Name": "Rye1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalDryNofert1'",
                  "Name": "Rye2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualDryNofert1'",
                  "Name": "RyeEqualForReference",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Yield",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Yield",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Yield",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.45,
                  "Maximum": 0.75,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PropRye1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": "Factor",
                  "FactorToVaryLines": "Factor",
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "PropYieldRye1",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "PropRye1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment03",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "",
                      "Name": "Factor",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "EqualIrrigFert1",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "EqualDryNofert1",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 150",
                            "[Rye2].InitialRootDepth = 150"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "UnequalIrrigFert1",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 150",
                            "[Rye2].InitialRootDepth = 150"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "UnequalDryNofert1",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "Descriptors": null,
                  "Name": "AgPastureShallowSoilTest",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "1971-07-01T00:00:00",
                      "End": "1972-06-30T00:00:00",
                      "Name": "Clock",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.Weather, Models",
                      "ConstantsFile": null,
                      "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                      "ExcelWorkSheetName": null,
                      "Name": "Weather",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Field",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn fertiliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int FertOn { get; set; }",
                                "",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount * FertOn, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "FertOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "200"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "15"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "25"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "14"
                                }
                              ],
                              "Name": "OnOffFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")]",
                                "        public answerType allowIrrigation { get; set; }",
                                "        ",
                                "        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int IrrigOn { get; set; }",
                                "",
                                "",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply * IrrigOn);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "IrrigOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "15-Aug"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "30-May"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "75"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "30"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "300"
                                }
                              ],
                              "Name": "OnOffIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }",
                                "        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }",
                                "        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }",
                                "        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }",
                                "        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }",
                                "        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }",
                                "        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }",
                                "        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }",
                                "        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }",
                                "        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }",
                                "        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }",
                                "        // Description: Pasture DM defoliated today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }",
                                "        // Description: Pasture N defoliate today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }",
                                "        // Description: Pasture DM harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }",
                                "        // Description: Pasture N harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }",
                                "        // Description: Pasture DM removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }",
                                "        // Description: Pasture N removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }",
                                "        // Description: Residue DM returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }",
                                "        // Description: Residue N returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }",
                                "        // Description: Harvested N returned as dung (SurfaceOM)",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }",
                                "        // Description: Harvested N returned as urine (urea)",
                                "        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }",
                                "        // Description: Number of days after last defoliation",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                                "        ",
                                "        // - Internal variables",
                                "        // fraction of harvested Dm to actually remove from field",
                                "        private double fractionDM2Remove = 1.0;",
                                "        // flag whether defoliation is allowed",
                                "        //private bool rotationAllowed = true;",
                                "        // number of days for each defoliation event",
                                "        private int cuttingDuration = 0;",
                                "        // counter for day within each defoliation",
                                "        private int daysCutting = 0;",
                                "        // type of interval (Fixed or target)",
                                "        private string intervalType;",
                                "        // total herbage to remove in g/m2 per day",
                                "        private double herbageToRemove;",
                                "        // type of DM amount (ResidualDM or DMToRemove)",
                                "        private string amountType;",
                                "        // auxiliary flag for defoliation",
                                "        private bool aCutHasHappened = false;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "",
                                "            // reset variables",
                                "            DaysAfterCut = 0;",
                                "            resetVariables();",
                                "            cuttingDuration = DurationOfCut;",
                                "            ",
                                "            // get the type of amount given",
                                "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                                "                amountType = \"SetResidueAmount\";",
                                "            else",
                                "                amountType = \"SetRemoveAmount\";",
                                "",
                                "            // get the type of amount given",
                                "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                                "                intervalType = \"Fixed\";",
                                "            else",
                                "                intervalType = \"Target\";",
                                "",
                                "            // make sure that rotation starts when startDate < simulationStartDay",
                                "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                                "                CutRotationStartDate = Clock.Today;",
                                "        }",
                                "        ",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            if (rotationAllowed)",
                                "            {",
                                "                if (Clock.Today == CutRotationStartDate)",
                                "                    DaysAfterCut = CutInterval;",
                                "",
                                "                bool SwardIsAlive = false;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                {",
                                "                    if (species.IsAlive)",
                                "                        SwardIsAlive = true;",
                                "                }",
                                "                ",
                                "                // Check whether we can defoliate",
                                "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))",
                                "                {",
                                "                    // Check whether we should start a defoliation",
                                "                    if (DaysAfterCut >= (CutInterval - 1))",
                                "                    {",
                                "                        Graze(AmountGiven, amountType, DurationOfCut);",
                                "                    }",
                                "                }",
                                "            }",
                                "",
                                "            // Check whether we need to continue cutting",
                                "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                                "            {",
                                "                // reset outputs",
                                "                resetVariables();",
                                "",
                                "                removeDM(herbageToRemove);",
                                "                returnExcreta();",
                                "                daysCutting += 1;",
                                "                if (daysCutting == cuttingDuration)",
                                "                {",
                                "                    PostHarvestDM = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        PostHarvestDM += species.Standing.Wt;",
                                "                }",
                                "            }",
                                "",
                                "            // reset outputs",
                                "            if (daysCutting < 0)",
                                "            {",
                                "                resetVariables();",
                                "                daysCutting = 0;",
                                "            }",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            // Check whether a cutting has finished",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                aCutHasHappened = true;",
                                "                daysCutting = -1;",
                                "            }",
                                "",
                                "            // Increase the counter for days after cutting",
                                "            if (aCutHasHappened && (daysCutting == 0))",
                                "                DaysAfterCut += 1;",
                                "        }",
                                "",
                                "        public enum removeAmountTypes",
                                "        {",
                                "            /// <summary>Setting DM amount to remove</summary>",
                                "            DMToRemove,",
                                "            /// <summary>Setting residual DM amount</summary>",
                                "            ResidualDM",
                                "        }",
                                "",
                                "        public enum rotationIntervalTypes",
                                "        {",
                                "            /// <summary>Setting a fixed interval</summary>",
                                "            FixedInterval,",
                                "            /// <summary>Setting a target (minimum) inteval</summary>",
                                "            TargetInterval",
                                "        }",
                                "",
                                "        public enum removeDMTypes",
                                "        {",
                                "            /// <summary>Remove all DM</summary>",
                                "            RemoveAll,",
                                "            /// <summary>Remove no DM</summary>",
                                "            RemoveNone,",
                                "            /// <summary>Remove a fraction based on digestibility</summary>",
                                "            BasedOnDigestibility",
                                "        }",
                                "",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "        ",
                                "                ",
                                "        // Resets the values of all outputs",
                                "        private void resetVariables()",
                                "        {",
                                "            DefoliatedWt = 0.0;",
                                "            DefoliatedN = 0.0;",
                                "            HarvestedWt = 0.0;",
                                "            HarvestedN = 0.0;",
                                "            RemovedWt = 0.0;",
                                "            RemovedN = 0.0;",
                                "            ReturnedWt = 0.0;",
                                "            ReturnedN = 0.0;",
                                "            NReturnedInDung = 0.0;",
                                "            NReturnedInUrine = 0.0;",
                                "        }",
                                "",
                                "        // Description: Perform the basic calculations for defoliation",
                                "        public void Graze(double amountDM, string amountType, int duration)",
                                "        {",
                                "            // Get the existing plant amount",
                                "            PreHarvestDM = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                PreHarvestDM += species.Standing.Wt;",
                                "            ",
                                "            // Check the amount to remove and print some info",
                                "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = amountDM / duration;",
                                "            }",
                                "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                                "            }",
                                "            else",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                                "                if (intervalType == \"Fixed\")",
                                "                    DaysAfterCut = -duration;",
                                "                return;",
                                "            }",
                                "",
                                "            cuttingDuration = duration;",
                                "            // Preform first defoliation",
                                "            removeDM(herbageToRemove);",
                                "            returnExcreta();",
                                "            daysCutting = 1;",
                                "            DaysAfterCut = 0;",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                PostHarvestDM = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    PostHarvestDM += species.Standing.Wt;",
                                "            }",
                                "        }",
                                "",
                                "        // Do the DM removal",
                                "        private void removeDM(double removeAmount)",
                                "        {",
                                "            double existingWt = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                existingWt += species.Harvestable.Wt;",
                                "",
                                "",
                                "            // Check whether we harvest anything",
                                "            if (existingWt >= removeAmount)",
                                "            {",
                                "                foreach (AgPasture.PastureSpecies species in Pasture)",
                                "                {",
                                "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                                "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                                "                }",
                                "                ",
                                "                // get total harvested",
                                "                DefoliatedWt = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedWt += species.HarvestedWt;",
                                "                DefoliatedN = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedN += species.HarvestedN;",
                                "                HarvestedWt = DefoliatedWt;",
                                "                HarvestedN = DefoliatedN;",
                                "",
                                "                // get amounts actually removed from field and that to be returned (dung/urine)",
                                "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                                "                    fractionDM2Remove = 1.0;",
                                "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                                "                    fractionDM2Remove = 0.0;",
                                "                else",
                                "                {",
                                "                    fractionDM2Remove = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;",
                                "                    fractionDM2Remove /= removeAmount;",
                                "                }",
                                "                ",
                                "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                                "                RemovedN = HarvestedN * FractionN2Remove;",
                                "                ReturnedWt = HarvestedWt - RemovedWt;",
                                "                ReturnedN = HarvestedN - RemovedN;",
                                "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                                "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                                "            }",
                                "        }",
                                "",
                                "        // Return dung and urine",
                                "        private void returnExcreta()",
                                "        {",
                                "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                                "            {",
                                "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                                "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                                "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                                "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                                "                float[] dltp = new float[] { 0 };",
                                "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                                "",
                                "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                                "                BiomassDung.dm_type = type;",
                                "                BiomassDung.dlt_crop_dm = dltdm;",
                                "                BiomassDung.dlt_dm_n = dltn;",
                                "                BiomassDung.dlt_dm_p = dltp;",
                                "                BiomassDung.fraction_to_residue = fraction;",
                                "                BiomassRemoved.Invoke(BiomassDung);",
                                "            }",
                                "",
                                "            if (NReturnedInUrine > 0.0)",
                                "            {",
                                "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "21"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "1000"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"kg/kg\")] public double PropYieldRye1 { get; set; }",
                                "        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye1 { get; set; }",
                                "        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye2 { get; set; }",
                                "        ",
                                "        // - Internal variables",
                                "        //private double fractionDM2Remove = 1.0;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        //public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "            YieldRye1 = 0.0;",
                                "            YieldRye2 = 0.0;",
                                "            PropYieldRye1 = 0.0;",
                                "        }",
                                "        ",
                                "",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                //Pasture.Add(species);",
                                "            }",
                                "            YieldRye1 += Pasture[0].HarvestedWt;",
                                "            YieldRye2 += Pasture[1].HarvestedWt;",
                                "            if ((YieldRye1 + YieldRye2) > 0.0)",
                                "                PropYieldRye1 = YieldRye1 / (YieldRye1 + YieldRye2);",
                                "        }",
                                "",
                                "    }",
                                "}"
                              ],
                              "Parameters": [],
                              "Name": "PropRye1",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 0.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 1000.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "Rye1",
                          "ResourceName": "AGPRyegrass",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "Rye2",
                          "ResourceName": "AGPRyegrass",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": "NZ_Sedimentary",
                          "LocalName": "Lismore",
                          "Site": "Winchmore",
                          "NearestTown": "Ashburton",
                          "Region": "Canterbury",
                          "State": null,
                          "Country": "New Zealand",
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": -48.48,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "ShallowSoil",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "ParticleSizeClay": [
                                20.0,
                                15.0,
                                12.0,
                                8.0,
                                6.0,
                                5.0,
                                5.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.35,
                                1.0,
                                0.53,
                                0.31,
                                0.3,
                                0.3
                              ],
                              "AirDry": [
                                0.05,
                                0.12,
                                0.055,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "LL15": [
                                0.15,
                                0.14,
                                0.055,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "DUL": [
                                0.25,
                                0.22,
                                0.15,
                                0.05,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "SAT": [
                                0.45,
                                0.43,
                                0.25,
                                0.15,
                                0.11,
                                0.11,
                                0.11
                              ],
                              "KS": [
                                5000.0,
                                2500.0,
                                3000.0,
                                10000.0,
                                17500.0,
                                20000.0,
                                20000.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Slurp1Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Slurp2Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye1Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye2Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 2.0,
                              "WinterCona": 2.0,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "PSIDul": -100.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "SWCON": [
                                0.5,
                                0.52,
                                0.55,
                                0.6,
                                0.65,
                                0.65,
                                0.65
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "Carbon": [
                                3.0,
                                1.0,
                                0.6,
                                0.4,
                                0.25,
                                0.15,
                                0.1
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.04,
                                0.02,
                                0.02,
                                0.01,
                                0.01,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.5,
                                0.7,
                                0.83,
                                0.9,
                                0.95,
                                0.99,
                                0.99
                              ],
                              "FOM": [
                                331.337020409173,
                                245.4605019055056,
                                164.53709493722965,
                                121.89207790753734,
                                73.93128242700234,
                                40.57434806729268,
                                22.267674346259405
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.245,
                                0.216,
                                0.14525,
                                0.04825,
                                0.028999999999999998,
                                0.028999999999999998,
                                0.028999999999999998
                              ],
                              "InitialPAWmm": 64.83749999999999,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([ShallowSoil].Nutrient.NO3.kgha) as NO3",
                            "sum([ShallowSoil].SoilWater.SWmm) as SWDep",
                            "[Rye1].AboveGroundWt",
                            "[Rye2].AboveGroundWt",
                            "[Rye1].HarvestedWt",
                            "[Rye2].HarvestedWt",
                            "([Rye1].HarvestedWt + [Rye2].HarvestedWt) as Yield",
                            "[PropRye1].Script.PropYieldRye1 as PropYieldRye1",
                            "([Fertiliser].NitrogenApplied-( 10.0 * [CutRotation].Script.NReturnedInUrine)) as RealFert",
                            "[Rye2].RootDepth"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "AgPastureShallowSoilTest",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "04 AgPasture Test Root Depth Differential",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This series of simulations is as for AgPasture Deep Soil Test but applying a range of rooting depths to Rye2 while leaving Rye1 at a rooting depth of 750 mm.  The simulations use a soil with 132 mm of PAW to 750 mm deep in the Lincoln environment and are not fertilised or irrigated. \r\n\r\nTotal yield (first graph) again shows the small yield penalty as the root systems become more unequal.  Against this trend the total yield (Rye1 + Rye2) when Rye2 has a 100 mm rooting depth is slightly higher (~ 50 kg DM /ha or < 1 % of the total yield) than when Rye2 has a rooting depth of 225 mm.  The most likely explanation is that of less competition effect from the shallowest-rooting Rye2.  The proportion of the total yield arising from the deeper-rooted Rye1 (second graph) ranges from 0.5 for the equal root depth scenario to 0.7 for the scenario with the shallowest Rye2.  Graphs 3 and 4 show the cumulative harvested yield from each of the grasses â€“ the patterns are sensible given the changes in rooting depth.\r\n\r\nThe final two graphs show the degree of water stress (1 is no stress) in December and January for each of the grasses.  As the root depth of Rye2 decreases, water stress in Rye1 shows a slower onset and a reduction in magnitude.  Again, these patterns meet expectations.\r\n",
              "Name": "Memo AgPastureTestRootDepthDifferential",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Yield",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "Yield",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Yield",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PropRye1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": "Factor",
                  "FactorToVaryLines": "Factor",
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "PropYieldRye1",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "PropRye1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 4500.0,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "YieldRye1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.HarvestedWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Yield",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 4500.0,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "YieldRye2",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.HarvestedWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Yield",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStressRye1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.GlfWaterSupply",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "Clock.Today.Month IN (12, 1)",
                  "Name": "WaterStressRye1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStressRye2",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.GlfWaterSupply",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "Clock.Today.Month IN (12, 1)",
                  "Name": "WaterStressRye2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment04",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "",
                      "Name": "Factor",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 750",
                            "[Rye2].InitialRootDepth = 750"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "750mm",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 500",
                            "[Rye2].InitialRootDepth = 500"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "500mm",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 350",
                            "[Rye2].InitialRootDepth = 350"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "350mm",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 225",
                            "[Rye2].InitialRootDepth = 225"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "225mm",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 100",
                            "[Rye2].InitialRootDepth = 100"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "100mm",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "Descriptors": null,
                  "Name": "AgPastureTestRootDepthDifferential",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "1971-07-01T00:00:00",
                      "End": "1972-06-30T00:00:00",
                      "Name": "Clock",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.Weather, Models",
                      "ConstantsFile": null,
                      "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                      "ExcelWorkSheetName": null,
                      "Name": "Weather",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Field",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn fertiliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int FertOn { get; set; }",
                                "",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount * FertOn, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "FertOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "200"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "15"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "25"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "14"
                                }
                              ],
                              "Name": "OnOffFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")]",
                                "        public answerType allowIrrigation { get; set; }",
                                "        ",
                                "        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int IrrigOn { get; set; }",
                                "",
                                "",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply * IrrigOn);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "IrrigOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "15-Aug"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "30-May"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "75"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "30"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "300"
                                }
                              ],
                              "Name": "OnOffIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }",
                                "        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }",
                                "        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }",
                                "        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }",
                                "        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }",
                                "        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }",
                                "        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }",
                                "        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }",
                                "        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }",
                                "        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }",
                                "        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }",
                                "        // Description: Pasture DM defoliated today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }",
                                "        // Description: Pasture N defoliate today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }",
                                "        // Description: Pasture DM harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }",
                                "        // Description: Pasture N harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }",
                                "        // Description: Pasture DM removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }",
                                "        // Description: Pasture N removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }",
                                "        // Description: Residue DM returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }",
                                "        // Description: Residue N returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }",
                                "        // Description: Harvested N returned as dung (SurfaceOM)",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }",
                                "        // Description: Harvested N returned as urine (urea)",
                                "        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }",
                                "        // Description: Number of days after last defoliation",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                                "        ",
                                "        // - Internal variables",
                                "        // fraction of harvested Dm to actually remove from field",
                                "        private double fractionDM2Remove = 1.0;",
                                "        // flag whether defoliation is allowed",
                                "        //private bool rotationAllowed = true;",
                                "        // number of days for each defoliation event",
                                "        private int cuttingDuration = 0;",
                                "        // counter for day within each defoliation",
                                "        private int daysCutting = 0;",
                                "        // type of interval (Fixed or target)",
                                "        private string intervalType;",
                                "        // total herbage to remove in g/m2 per day",
                                "        private double herbageToRemove;",
                                "        // type of DM amount (ResidualDM or DMToRemove)",
                                "        private string amountType;",
                                "        // auxiliary flag for defoliation",
                                "        private bool aCutHasHappened = false;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "",
                                "            // reset variables",
                                "            DaysAfterCut = 0;",
                                "            resetVariables();",
                                "            cuttingDuration = DurationOfCut;",
                                "            ",
                                "            // get the type of amount given",
                                "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                                "                amountType = \"SetResidueAmount\";",
                                "            else",
                                "                amountType = \"SetRemoveAmount\";",
                                "",
                                "            // get the type of amount given",
                                "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                                "                intervalType = \"Fixed\";",
                                "            else",
                                "                intervalType = \"Target\";",
                                "",
                                "            // make sure that rotation starts when startDate < simulationStartDay",
                                "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                                "                CutRotationStartDate = Clock.Today;",
                                "        }",
                                "        ",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            if (rotationAllowed)",
                                "            {",
                                "                if (Clock.Today == CutRotationStartDate)",
                                "                    DaysAfterCut = CutInterval;",
                                "",
                                "                bool SwardIsAlive = false;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                {",
                                "                    if (species.IsAlive)",
                                "                        SwardIsAlive = true;",
                                "                }",
                                "                ",
                                "                // Check whether we can defoliate",
                                "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))",
                                "                {",
                                "                    // Check whether we should start a defoliation",
                                "                    if (DaysAfterCut >= (CutInterval - 1))",
                                "                    {",
                                "                        Graze(AmountGiven, amountType, DurationOfCut);",
                                "                    }",
                                "                }",
                                "            }",
                                "",
                                "            // Check whether we need to continue cutting",
                                "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                                "            {",
                                "                // reset outputs",
                                "                resetVariables();",
                                "",
                                "                removeDM(herbageToRemove);",
                                "                returnExcreta();",
                                "                daysCutting += 1;",
                                "                if (daysCutting == cuttingDuration)",
                                "                {",
                                "                    PostHarvestDM = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        PostHarvestDM += species.Standing.Wt;",
                                "                }",
                                "            }",
                                "",
                                "            // reset outputs",
                                "            if (daysCutting < 0)",
                                "            {",
                                "                resetVariables();",
                                "                daysCutting = 0;",
                                "            }",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            // Check whether a cutting has finished",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                aCutHasHappened = true;",
                                "                daysCutting = -1;",
                                "            }",
                                "",
                                "            // Increase the counter for days after cutting",
                                "            if (aCutHasHappened && (daysCutting == 0))",
                                "                DaysAfterCut += 1;",
                                "        }",
                                "",
                                "        public enum removeAmountTypes",
                                "        {",
                                "            /// <summary>Setting DM amount to remove</summary>",
                                "            DMToRemove,",
                                "            /// <summary>Setting residual DM amount</summary>",
                                "            ResidualDM",
                                "        }",
                                "",
                                "        public enum rotationIntervalTypes",
                                "        {",
                                "            /// <summary>Setting a fixed interval</summary>",
                                "            FixedInterval,",
                                "            /// <summary>Setting a target (minimum) inteval</summary>",
                                "            TargetInterval",
                                "        }",
                                "",
                                "        public enum removeDMTypes",
                                "        {",
                                "            /// <summary>Remove all DM</summary>",
                                "            RemoveAll,",
                                "            /// <summary>Remove no DM</summary>",
                                "            RemoveNone,",
                                "            /// <summary>Remove a fraction based on digestibility</summary>",
                                "            BasedOnDigestibility",
                                "        }",
                                "",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "        ",
                                "                ",
                                "        // Resets the values of all outputs",
                                "        private void resetVariables()",
                                "        {",
                                "            DefoliatedWt = 0.0;",
                                "            DefoliatedN = 0.0;",
                                "            HarvestedWt = 0.0;",
                                "            HarvestedN = 0.0;",
                                "            RemovedWt = 0.0;",
                                "            RemovedN = 0.0;",
                                "            ReturnedWt = 0.0;",
                                "            ReturnedN = 0.0;",
                                "            NReturnedInDung = 0.0;",
                                "            NReturnedInUrine = 0.0;",
                                "        }",
                                "",
                                "        // Description: Perform the basic calculations for defoliation",
                                "        public void Graze(double amountDM, string amountType, int duration)",
                                "        {",
                                "            // Get the existing plant amount",
                                "            PreHarvestDM = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                PreHarvestDM += species.Standing.Wt;",
                                "            ",
                                "            // Check the amount to remove and print some info",
                                "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = amountDM / duration;",
                                "            }",
                                "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                                "            }",
                                "            else",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                                "                if (intervalType == \"Fixed\")",
                                "                    DaysAfterCut = -duration;",
                                "                return;",
                                "            }",
                                "",
                                "            cuttingDuration = duration;",
                                "            // Preform first defoliation",
                                "            removeDM(herbageToRemove);",
                                "            returnExcreta();",
                                "            daysCutting = 1;",
                                "            DaysAfterCut = 0;",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                PostHarvestDM = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    PostHarvestDM += species.Standing.Wt;",
                                "            }",
                                "        }",
                                "",
                                "        // Do the DM removal",
                                "        private void removeDM(double removeAmount)",
                                "        {",
                                "            double existingWt = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                existingWt += species.Harvestable.Wt;",
                                "",
                                "",
                                "            // Check whether we harvest anything",
                                "            if (existingWt >= removeAmount)",
                                "            {",
                                "                foreach (AgPasture.PastureSpecies species in Pasture)",
                                "                {",
                                "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                                "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                                "                }",
                                "                ",
                                "                // get total harvested",
                                "                DefoliatedWt = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedWt += species.HarvestedWt;",
                                "                DefoliatedN = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedN += species.HarvestedN;",
                                "                HarvestedWt = DefoliatedWt;",
                                "                HarvestedN = DefoliatedN;",
                                "",
                                "                // get amounts actually removed from field and that to be returned (dung/urine)",
                                "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                                "                    fractionDM2Remove = 1.0;",
                                "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                                "                    fractionDM2Remove = 0.0;",
                                "                else",
                                "                {",
                                "                    fractionDM2Remove = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;",
                                "                    fractionDM2Remove /= removeAmount;",
                                "                }",
                                "                ",
                                "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                                "                RemovedN = HarvestedN * FractionN2Remove;",
                                "                ReturnedWt = HarvestedWt - RemovedWt;",
                                "                ReturnedN = HarvestedN - RemovedN;",
                                "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                                "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                                "            }",
                                "        }",
                                "",
                                "        // Return dung and urine",
                                "        private void returnExcreta()",
                                "        {",
                                "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                                "            {",
                                "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                                "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                                "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                                "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                                "                float[] dltp = new float[] { 0 };",
                                "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                                "",
                                "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                                "                BiomassDung.dm_type = type;",
                                "                BiomassDung.dlt_crop_dm = dltdm;",
                                "                BiomassDung.dlt_dm_n = dltn;",
                                "                BiomassDung.dlt_dm_p = dltp;",
                                "                BiomassDung.fraction_to_residue = fraction;",
                                "                BiomassRemoved.Invoke(BiomassDung);",
                                "            }",
                                "",
                                "            if (NReturnedInUrine > 0.0)",
                                "            {",
                                "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "21"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "1000"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"kg/kg\")] public double PropYieldRye1 { get; set; }",
                                "        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye1 { get; set; }",
                                "        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye2 { get; set; }",
                                "        ",
                                "        // - Internal variables",
                                "        //private double fractionDM2Remove = 1.0;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        //public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "            YieldRye1 = 0.0;",
                                "            YieldRye2 = 0.0;",
                                "            PropYieldRye1 = 0.0;",
                                "        }",
                                "        ",
                                "",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                //Pasture.Add(species);",
                                "            }",
                                "            YieldRye1 += Pasture[0].HarvestedWt;",
                                "            YieldRye2 += Pasture[1].HarvestedWt;",
                                "            if ((YieldRye1 + YieldRye2) > 0.0)",
                                "                PropYieldRye1 = YieldRye1 / (YieldRye1 + YieldRye2);",
                                "        }",
                                "",
                                "    }",
                                "}"
                              ],
                              "Parameters": [],
                              "Name": "PropRye1",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 1000.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 0.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "Rye1",
                          "ResourceName": "AGPRyegrass",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "Rye2",
                          "ResourceName": "AGPRyegrass",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": null,
                          "Site": null,
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "PH": [
                                6.6,
                                6.2,
                                5.7,
                                5.5,
                                5.5,
                                5.5
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.27,
                                0.27,
                                0.29,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "InitialPAWmm": 222.0,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "ParticleSizeClay": null,
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.0,
                                1.0,
                                1.59,
                                1.57,
                                1.6,
                                1.6
                              ],
                              "AirDry": [
                                0.05,
                                0.05,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "DUL": [
                                0.27,
                                0.27,
                                0.29,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "SAT": [
                                0.42,
                                0.4,
                                0.36,
                                0.37,
                                0.37,
                                0.32
                              ],
                              "KS": [
                                4832.0,
                                389.0,
                                16.0,
                                16.0,
                                98.0,
                                98.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye1Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye2Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 9.0,
                              "SummerCona": 4.4,
                              "WinterDate": "1-Apr",
                              "WinterU": 9.0,
                              "WinterCona": 4.4,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.4,
                              "Salb": 0.18,
                              "CN2Bare": 68.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": "NaN",
                              "CatchmentArea": "NaN",
                              "PSIDul": -100.0,
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "SWCON": [
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55
                              ],
                              "KLAT": null,
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 30.0,
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "Carbon": [
                                1.82,
                                1.47,
                                1.2,
                                1.03,
                                0.47,
                                0.47
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5
                              ],
                              "FBiom": [
                                0.025,
                                0.025,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "FInert": [
                                0.3,
                                0.4,
                                0.75,
                                0.9,
                                0.96,
                                0.96
                              ],
                              "FOM": [
                                1243.9310541346904,
                                833.8319214727269,
                                457.61666105087295,
                                251.1453484552152,
                                137.83148958311097,
                                75.64352530338392
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Graph, Models",
                              "Caption": null,
                              "Axis": [
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Depth (mm)",
                                  "Position": 0,
                                  "Inverted": true,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                },
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Volumetric water (mm/mm)",
                                  "Position": 1,
                                  "Inverted": false,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                }
                              ],
                              "LegendPosition": 3,
                              "LegendOrientation": 0,
                              "AnnotationLocation": 0,
                              "DisabledSeries": null,
                              "LegendOutsideGraph": false,
                              "Name": "Graph",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 2,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -3479297,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "[Soil].DUL",
                                  "Y2FieldName": "[Soil].DepthMidPoints",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL15",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16711681,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL151",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -32768,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil]l.DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL152",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -65536,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].AirDry",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "Air dry",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16776961,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].DUL",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "DUL",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16760704,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].SAT",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "SAT",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                27.3,
                                11.4,
                                0.25157232704402605,
                                1.9532908704883236,
                                1.9166666666666667,
                                0.20833333333333334
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                4.3,
                                7.6,
                                4.1,
                                2.7,
                                2.4,
                                0.1
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "[Clock].Today.Month",
                            "[Clock].Today.Year",
                            "sum([Soil].NO3.kgha) as NO3",
                            "sum([Soil].Water.MM) as SWDep",
                            "[Rye1].AboveGroundWt",
                            "[Rye2].AboveGroundWt",
                            "[Rye1].HarvestedWt",
                            "[Rye2].HarvestedWt",
                            "([Rye1].HarvestedWt + [Rye2].HarvestedWt) as Yield",
                            "[PropRye1].Script.PropYieldRye1 as PropYieldRye1",
                            "([Fertiliser].NitrogenApplied-( 10.0 * [CutRotation].Script.NReturnedInUrine)) as RealFert",
                            "[Rye2].RootDepth",
                            "[Rye2].GlfWaterSupply",
                            "sum([Rye2].WaterAvailable)",
                            "sum([Rye2].WaterUptake)",
                            "[Rye1].GlfWaterSupply"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "AgPastureTestRootDepthDifferential",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "05 A Ryegrass and White Clover Example",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "The final test in the single zone set is of a typical ryegrass and white clover pasture.  The white clover has a rooting depth of 150 mm and the ryegrass has roots down to 750 mm deep.  The simulations use a soil with 132 mm of PAW to 750 mm deep in the Lincoln environment which the pasture harvested by cutting down to 1000 kg DM /ha every 21 days with all herbage removed from the paddock. The simulation is run for ten years and in three combinations: no irrigation or fertiliser, irrigation but no fertiliser, and both irrigation and fertiliser. \r\n\r\nThe first graph shows the proportion of the total harvested dry matter that was ryegrass and the next three graphs show the standing dry matter of the white clover (pink) and the total (clover plus ryegrass) sward.  In this deep soil with no irrigation or fertiliser and under a cutting regime, the grass and clover stabilise to about 35% grass and 65% clover.  The soil here allows for reasonable growth in the shallow-rooted clover and the poor nutrient status of the soil (no nutrient returns at all) gives the clover a competitive advantage.  When fertiliser is added to the dry simulation the sward becomes 90% grass (not shown).  With irrigation but no fertiliser, the sward becomes clover dominant (about 70%) but when fertilised the sward swaps to grass-dominant (about 20% clover).  These patterns make sense given the physiological characteristics of the individual plants and suggests that the Runge-Kutta method is a reasonable representation of the competitive processes in the soil.\r\n",
              "Name": "Memo RyegrassWhiteCloverExample",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PropGrass",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "PropYieldRyegrass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Both",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Standing_DryNone",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "WhiteClover.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '0_DryNone'",
                  "Name": "Clover",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "TotalAboveGround",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '0_DryNone'",
                  "Name": "Total",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Standing_IrrigNone",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "WhiteClover.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '1_IrrigNone'",
                  "Name": "Clover",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "TotalAboveGround",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '1_IrrigNone'",
                  "Name": "Total",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Standing_IrrigFert",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "WhiteClover.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '2_IrrigFert'",
                  "Name": "Clover",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "TotalAboveGround",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '2_IrrigFert'",
                  "Name": "Total",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment05",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "",
                      "Name": "Factor",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "0_DryNone",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "1_IrrigNone",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "2_IrrigFert",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "Descriptors": null,
                  "Name": "RyegrassWhiteCloverExample",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "2000-07-01T00:00:00",
                      "End": "2010-06-30T00:00:00",
                      "Name": "Clock",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.Weather, Models",
                      "ConstantsFile": null,
                      "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                      "ExcelWorkSheetName": null,
                      "Name": "Weather",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Field",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn fertiliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int FertOn { get; set; }",
                                "",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount * FertOn, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "FertOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "200"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "15"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "25"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "14"
                                }
                              ],
                              "Name": "OnOffFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")]",
                                "        public answerType allowIrrigation { get; set; }",
                                "        ",
                                "        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int IrrigOn { get; set; }",
                                "",
                                "",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply * IrrigOn);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "IrrigOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "15-Aug"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "30-May"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "75"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "30"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "300"
                                }
                              ],
                              "Name": "OnOffIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }",
                                "        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }",
                                "        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }",
                                "        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }",
                                "        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }",
                                "        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }",
                                "        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }",
                                "        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }",
                                "        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }",
                                "        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }",
                                "        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }",
                                "        // Description: Pasture DM defoliated today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }",
                                "        // Description: Pasture N defoliate today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }",
                                "        // Description: Pasture DM harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }",
                                "        // Description: Pasture N harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }",
                                "        // Description: Pasture DM removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }",
                                "        // Description: Pasture N removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }",
                                "        // Description: Residue DM returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }",
                                "        // Description: Residue N returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }",
                                "        // Description: Harvested N returned as dung (SurfaceOM)",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }",
                                "        // Description: Harvested N returned as urine (urea)",
                                "        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }",
                                "        // Description: Number of days after last defoliation",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                                "        ",
                                "        // - Internal variables",
                                "        // fraction of harvested Dm to actually remove from field",
                                "        private double fractionDM2Remove = 1.0;",
                                "        // flag whether defoliation is allowed",
                                "        //private bool rotationAllowed = true;",
                                "        // number of days for each defoliation event",
                                "        private int cuttingDuration = 0;",
                                "        // counter for day within each defoliation",
                                "        private int daysCutting = 0;",
                                "        // type of interval (Fixed or target)",
                                "        private string intervalType;",
                                "        // total herbage to remove in g/m2 per day",
                                "        private double herbageToRemove;",
                                "        // type of DM amount (ResidualDM or DMToRemove)",
                                "        private string amountType;",
                                "        // auxiliary flag for defoliation",
                                "        private bool aCutHasHappened = false;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "",
                                "            // reset variables",
                                "            DaysAfterCut = 0;",
                                "            resetVariables();",
                                "            cuttingDuration = DurationOfCut;",
                                "            ",
                                "            // get the type of amount given",
                                "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                                "                amountType = \"SetResidueAmount\";",
                                "            else",
                                "                amountType = \"SetRemoveAmount\";",
                                "",
                                "            // get the type of amount given",
                                "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                                "                intervalType = \"Fixed\";",
                                "            else",
                                "                intervalType = \"Target\";",
                                "",
                                "            // make sure that rotation starts when startDate < simulationStartDay",
                                "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                                "                CutRotationStartDate = Clock.Today;",
                                "        }",
                                "        ",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            if (rotationAllowed)",
                                "            {",
                                "                if (Clock.Today == CutRotationStartDate)",
                                "                    DaysAfterCut = CutInterval;",
                                "",
                                "                bool SwardIsAlive = false;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                {",
                                "                    if (species.IsAlive)",
                                "                        SwardIsAlive = true;",
                                "                }",
                                "                ",
                                "                // Check whether we can defoliate",
                                "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))",
                                "                {",
                                "                    // Check whether we should start a defoliation",
                                "                    if (DaysAfterCut >= (CutInterval - 1))",
                                "                    {",
                                "                        Graze(AmountGiven, amountType, DurationOfCut);",
                                "                    }",
                                "                }",
                                "            }",
                                "",
                                "            // Check whether we need to continue cutting",
                                "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                                "            {",
                                "                // reset outputs",
                                "                resetVariables();",
                                "",
                                "                removeDM(herbageToRemove);",
                                "                returnExcreta();",
                                "                daysCutting += 1;",
                                "                if (daysCutting == cuttingDuration)",
                                "                {",
                                "                    PostHarvestDM = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        PostHarvestDM += species.Standing.Wt;",
                                "                }",
                                "            }",
                                "",
                                "            // reset outputs",
                                "            if (daysCutting < 0)",
                                "            {",
                                "                resetVariables();",
                                "                daysCutting = 0;",
                                "            }",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            // Check whether a cutting has finished",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                aCutHasHappened = true;",
                                "                daysCutting = -1;",
                                "            }",
                                "",
                                "            // Increase the counter for days after cutting",
                                "            if (aCutHasHappened && (daysCutting == 0))",
                                "                DaysAfterCut += 1;",
                                "        }",
                                "",
                                "        public enum removeAmountTypes",
                                "        {",
                                "            /// <summary>Setting DM amount to remove</summary>",
                                "            DMToRemove,",
                                "            /// <summary>Setting residual DM amount</summary>",
                                "            ResidualDM",
                                "        }",
                                "",
                                "        public enum rotationIntervalTypes",
                                "        {",
                                "            /// <summary>Setting a fixed interval</summary>",
                                "            FixedInterval,",
                                "            /// <summary>Setting a target (minimum) inteval</summary>",
                                "            TargetInterval",
                                "        }",
                                "",
                                "        public enum removeDMTypes",
                                "        {",
                                "            /// <summary>Remove all DM</summary>",
                                "            RemoveAll,",
                                "            /// <summary>Remove no DM</summary>",
                                "            RemoveNone,",
                                "            /// <summary>Remove a fraction based on digestibility</summary>",
                                "            BasedOnDigestibility",
                                "        }",
                                "",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "        ",
                                "                ",
                                "        // Resets the values of all outputs",
                                "        private void resetVariables()",
                                "        {",
                                "            DefoliatedWt = 0.0;",
                                "            DefoliatedN = 0.0;",
                                "            HarvestedWt = 0.0;",
                                "            HarvestedN = 0.0;",
                                "            RemovedWt = 0.0;",
                                "            RemovedN = 0.0;",
                                "            ReturnedWt = 0.0;",
                                "            ReturnedN = 0.0;",
                                "            NReturnedInDung = 0.0;",
                                "            NReturnedInUrine = 0.0;",
                                "        }",
                                "",
                                "        // Description: Perform the basic calculations for defoliation",
                                "        public void Graze(double amountDM, string amountType, int duration)",
                                "        {",
                                "            // Get the existing plant amount",
                                "            PreHarvestDM = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                PreHarvestDM += species.Standing.Wt;",
                                "            ",
                                "            // Check the amount to remove and print some info",
                                "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = amountDM / duration;",
                                "            }",
                                "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                                "            }",
                                "            else",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                                "                if (intervalType == \"Fixed\")",
                                "                    DaysAfterCut = -duration;",
                                "                return;",
                                "            }",
                                "",
                                "            cuttingDuration = duration;",
                                "            // Preform first defoliation",
                                "            removeDM(herbageToRemove);",
                                "            returnExcreta();",
                                "            daysCutting = 1;",
                                "            DaysAfterCut = 0;",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                PostHarvestDM = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    PostHarvestDM += species.Standing.Wt;",
                                "            }",
                                "        }",
                                "",
                                "        // Do the DM removal",
                                "        private void removeDM(double removeAmount)",
                                "        {",
                                "            double existingWt = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                existingWt += species.Harvestable.Wt;",
                                "",
                                "",
                                "            // Check whether we harvest anything",
                                "            if (existingWt >= removeAmount)",
                                "            {",
                                "                foreach (AgPasture.PastureSpecies species in Pasture)",
                                "                {",
                                "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                                "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                                "                }",
                                "                ",
                                "                // get total harvested",
                                "                DefoliatedWt = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedWt += species.HarvestedWt;",
                                "                DefoliatedN = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedN += species.HarvestedN;",
                                "                HarvestedWt = DefoliatedWt;",
                                "                HarvestedN = DefoliatedN;",
                                "",
                                "                // get amounts actually removed from field and that to be returned (dung/urine)",
                                "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                                "                    fractionDM2Remove = 1.0;",
                                "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                                "                    fractionDM2Remove = 0.0;",
                                "                else",
                                "                {",
                                "                    fractionDM2Remove = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;",
                                "                    fractionDM2Remove /= removeAmount;",
                                "                }",
                                "                ",
                                "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                                "                RemovedN = HarvestedN * FractionN2Remove;",
                                "                ReturnedWt = HarvestedWt - RemovedWt;",
                                "                ReturnedN = HarvestedN - RemovedN;",
                                "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                                "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                                "            }",
                                "        }",
                                "",
                                "        // Return dung and urine",
                                "        private void returnExcreta()",
                                "        {",
                                "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                                "            {",
                                "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                                "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                                "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                                "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                                "                float[] dltp = new float[] { 0 };",
                                "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                                "",
                                "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                                "                BiomassDung.dm_type = type;",
                                "                BiomassDung.dlt_crop_dm = dltdm;",
                                "                BiomassDung.dlt_dm_n = dltn;",
                                "                BiomassDung.dlt_dm_p = dltp;",
                                "                BiomassDung.fraction_to_residue = fraction;",
                                "                BiomassRemoved.Invoke(BiomassDung);",
                                "            }",
                                "",
                                "            if (NReturnedInUrine > 0.0)",
                                "            {",
                                "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "21"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "1000"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"kg/kg\")] public double PropYieldRye1 { get; set; }",
                                "        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye1 { get; set; }",
                                "        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye2 { get; set; }",
                                "        ",
                                "        // - Internal variables",
                                "        //private double fractionDM2Remove = 1.0;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        //public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "            YieldRye1 = 0.0;",
                                "            YieldRye2 = 0.0;",
                                "            PropYieldRye1 = 0.0;",
                                "        }",
                                "        ",
                                "",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                //Pasture.Add(species);",
                                "            }",
                                "            YieldRye1 += Pasture[0].HarvestedWt;",
                                "            YieldRye2 += Pasture[1].HarvestedWt;",
                                "            if ((YieldRye1 + YieldRye2) > 0.0)",
                                "                PropYieldRye1 = YieldRye1 / (YieldRye1 + YieldRye2);",
                                "        }",
                                "",
                                "    }",
                                "}"
                              ],
                              "Parameters": [],
                              "Name": "PropRye1",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 1000.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 0.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 1500.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "AGPRyegrass",
                          "ResourceName": "AGPRyegrass",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 500.0,
                          "InitialRootDM": 150.0,
                          "InitialRootDepth": 350.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "AGPWhiteClover",
                          "ResourceName": "AGPWhiteClover",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": null,
                          "Site": null,
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "PH": [
                                6.6,
                                6.2,
                                5.7,
                                5.5,
                                5.5,
                                5.5
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.27,
                                0.27,
                                0.29,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "InitialPAWmm": 222.0,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "ParticleSizeClay": null,
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.0,
                                1.0,
                                1.59,
                                1.57,
                                1.6,
                                1.6
                              ],
                              "AirDry": [
                                0.05,
                                0.05,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "DUL": [
                                0.27,
                                0.27,
                                0.29,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "SAT": [
                                0.42,
                                0.4,
                                0.36,
                                0.37,
                                0.37,
                                0.32
                              ],
                              "KS": [
                                4832.0,
                                389.0,
                                16.0,
                                16.0,
                                98.0,
                                98.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye1Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye2Soil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 9.0,
                              "SummerCona": 4.4,
                              "WinterDate": "1-Apr",
                              "WinterU": 9.0,
                              "WinterCona": 4.4,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.4,
                              "Salb": 0.18,
                              "CN2Bare": 68.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": "NaN",
                              "CatchmentArea": "NaN",
                              "PSIDul": -100.0,
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "SWCON": [
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55
                              ],
                              "KLAT": null,
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 30.0,
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "Carbon": [
                                1.82,
                                1.47,
                                1.2,
                                1.03,
                                0.47,
                                0.47
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5
                              ],
                              "FBiom": [
                                0.025,
                                0.025,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "FInert": [
                                0.3,
                                0.4,
                                0.75,
                                0.9,
                                0.96,
                                0.96
                              ],
                              "FOM": [
                                1243.9310541346904,
                                833.8319214727269,
                                457.61666105087295,
                                251.1453484552152,
                                137.83148958311097,
                                75.64352530338392
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Graph, Models",
                              "Caption": null,
                              "Axis": [
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Depth (mm)",
                                  "Position": 0,
                                  "Inverted": true,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                },
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Volumetric water (mm/mm)",
                                  "Position": 1,
                                  "Inverted": false,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                }
                              ],
                              "LegendPosition": 3,
                              "LegendOrientation": 0,
                              "AnnotationLocation": 0,
                              "DisabledSeries": null,
                              "LegendOutsideGraph": false,
                              "Name": "Graph",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 2,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -3479297,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "[Soil].DUL",
                                  "Y2FieldName": "[Soil].DepthMidPoints",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL15",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16711681,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL151",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -32768,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil]l.DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL152",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -65536,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].AirDry",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "Air dry",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16776961,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].DUL",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "DUL",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16760704,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].SAT",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "SAT",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                27.3,
                                11.4,
                                0.25157232704402605,
                                1.9532908704883236,
                                1.9166666666666667,
                                0.20833333333333334
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                4.3,
                                7.6,
                                4.1,
                                2.7,
                                2.4,
                                0.1
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([Soil].NO3.kgha) as NO3",
                            "sum([Soil].Water.MM) as SWDep",
                            "[AGPRyegrass].AboveGroundWt",
                            "[AGPWhiteClover].AboveGroundWt",
                            "[AGPRyegrass].AboveGroundWt + [AGPWhiteClover].AboveGroundWt as TotalAboveGround",
                            "[AGPRyegrass].HarvestedWt",
                            "[AGPWhiteClover].HarvestedWt",
                            "([AGPRyegrass].HarvestedWt + [AGPWhiteClover].HarvestedWt) as Yield",
                            "[PropRye1].Script.PropYieldRye1 as PropYieldRyegrass",
                            "([Fertiliser].NitrogenApplied-( 10.0 * [CutRotation].Script.NReturnedInUrine)) as RealFert"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "RyegrassWhiteCloverExample",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": true,
      "GraphsPerPage": 6,
      "Name": "Conceptual Tests of Crops with Roots Across Zones",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "The series of test and simulations in this section test the performance of SoilArbitrator when there are plants with roots spread across zones.  All of these tests are in a uniform soil with lots of soil water storage but no source of organic N.  The climate is a uniform or controlled environment.  The plant is a ryegrass.\r\n\r\nThe first three series demonstrate two-zone simulations with the ryegrass in Zone0 and a bare soil in Zone1.  The Zone0 ryegrass can spread a variable proportion of its roots into Zone1.\r\n\r\nThe last two simulations are each three zones and a ryegrass in each zone.  The ryegrass in the central zone can spread roots into its neighbours but the ryegrasses in the outer zones can access only their â€˜homeâ€™ zones.  The simulations start with either uniform mineral N across the zones or with increased N in Zone0.\r\n",
          "Name": "Overview",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "06 Test With No Stress",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "The conditions for this series of simulations are: \r\n\r\nâ€¢\ta controlled environment with 25 MJ /m2 solar radiation, 15 C minimum and 25 C maximum air temperature, no rainfall; \r\n\r\nâ€¢\ta uniform soil with 210 mm of PAW to 600 mm deep; \r\n\r\nâ€¢\tthe soil has no organic matter and there is no surface organic matter;\r\n\r\nâ€¢\tZone0 has a ryegrass with roots to 600 mm deep; \r\n\r\nâ€¢\tZone 1 has no plant in the zone;\r\n\r\nâ€¢\tthe ryegrass is trimmed every day to maintain 2250 kg DM /ha with all herbage removed from the simulation; and\r\n\r\nâ€¢\twater and fertiliser are applied every day sufficient to maintain conditions of no water or N stress.\r\n\r\n\r\nThe series of simulations add some roots from the ryegrass in Zone0 into Zone1 such that Zone1 contains 0, 0.25, 0.5, 0.75 or 1.0 of the roots in Zone0 so that the ryegrass can meet its water and N demand from some combination of the resources in the two zones.  Note that there is no canopy cover in Zone1 and therefore evaporation from the soil surface will be greater than that in Zone0.  The expectation is that as a greater proportion of the roots are in Zone1, that:\r\n\r\nâ€¢\tthe irrigation need in Zone0 will decrease and that in Zone 1 will increase and possibly exceed that in Zone0 when there is an even spread of roots (because of the expected additional evaporation of soil water without canopy cover in Zone1)\r\n\r\nâ€¢\tthe amount of fertiliser added should decrease in Zone0 and increase in Zone1 as more rots are spread into Zone1\r\n\r\nThe graphs show that these expectations are met.\r\n",
              "Name": "Memo TestWithNoStress",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2600.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PlantWt",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "PlantMass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "Harvested",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterDemand",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Demand",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Demand",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Uptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Uptake",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStress",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NStress",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Nitrogen",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Nitrogen",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment06",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "[DoRootsSingle].Script.Zone1Prop=0.0,0.25,0.5,0.75,1.0",
                      "Name": "NumOfZones",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "Descriptors": null,
                  "Name": "TestWithNoStress",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "2000-01-01T00:00:00",
                      "End": "2000-12-31T00:00:00",
                      "Name": "Clock",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.ControlledEnvironment, Models",
                      "MaxT": 25.0,
                      "MinT": 15.0,
                      "Rain": 0.0,
                      "Radn": 25.0,
                      "PanEvap": 0.0,
                      "VP": 17.0,
                      "Wind": 3.0,
                      "CO2": 350.0,
                      "AirPressure": 1010.0,
                      "DiffuseFraction": 0.0,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "DayLength": 12.0,
                      "SunRise": 0.0,
                      "SunSet": 0.0,
                      "Name": "ControlledEnvironment",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone0",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System.Xml.Serialization;",
                                "using System.Collections.Generic;",
                                "using System;",
                                "using System.Linq;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "        [Description(\"Root depth in the plant's zone (mm): \")]  public double Zone0Depth { get; set; }",
                                "        [Description(\"Root mass  in the plant's zone (mm): \")]  public double Zone0Mass { get; set; }",
                                "",
                                "        [Description(\"Name of the first zone: \")] public string Zone1Name { get; set; }",
                                "        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone1Prop { get; set; }",
                                "",
                                "        [Description(\"Name of the second zone: \")] public string Zone2Name { get; set; }",
                                "        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone2Prop { get; set; }",
                                "",
                                "        [Description(\"Name of the third zone: \")] public string Zone3Name { get; set; }",
                                "        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone3Prop { get; set; }",
                                "",
                                "        // - Outputs from this manager",
                                "",
                                "        // - Internal variables",
                                "",
                                "        [EventSubscribe(\"FinalInitialise\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            int SpeciesNum = 0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                SpeciesNum += 1;",
                                "                if (SpeciesNum == 1)",
                                "                {",
                                "                    //double test = species.RootWt;",
                                "                    if (Zone1Prop > 0)",
                                "                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone1Prop * Zone0Depth, rootDM: Zone1Prop * Zone0Mass);",
                                "                    if (Zone2Prop > 0)",
                                "                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone2Prop * Zone0Depth, rootDM: Zone2Prop * Zone0Mass);",
                                "                    if (Zone3Prop > 0)",
                                "                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone3Prop * Zone0Depth, rootDM: Zone3Prop * Zone0Mass);",
                                "                }",
                                "            }",
                                "",
                                "            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);",
                                "            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "Zone0Depth",
                                  "Value": "600"
                                },
                                {
                                  "Key": "Zone0Mass",
                                  "Value": "500"
                                },
                                {
                                  "Key": "Zone1Name",
                                  "Value": "Zone1"
                                },
                                {
                                  "Key": "Zone1Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone2Name",
                                  "Value": "Zone2"
                                },
                                {
                                  "Key": "Zone2Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone3Name",
                                  "Value": "Zone3"
                                },
                                {
                                  "Key": "Zone3Prop",
                                  "Value": "0"
                                }
                              ],
                              "Name": "DoRootsSingle",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn ferliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                                "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                                "        ",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "            if (allowIrrigationAll == answerType.yes)",
                                "                IrrigationIsAlwaysAllowed = true; ",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if (IrrigationIsAlwaysAllowed)",
                                "                CropIsActive = true;  // might not be but we don't care",
                                "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }",
                                "        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }",
                                "        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }",
                                "        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }",
                                "        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }",
                                "        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }",
                                "        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }",
                                "        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }",
                                "        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }",
                                "        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }",
                                "        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }",
                                "        // Description: Pasture DM defoliated today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }",
                                "        // Description: Pasture N defoliate today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }",
                                "        // Description: Pasture DM harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }",
                                "        // Description: Pasture N harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }",
                                "        // Description: Pasture DM removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }",
                                "        // Description: Pasture N removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }",
                                "        // Description: Residue DM returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }",
                                "        // Description: Residue N returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }",
                                "        // Description: Harvested N returned as dung (SurfaceOM)",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }",
                                "        // Description: Harvested N returned as urine (urea)",
                                "        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }",
                                "        // Description: Number of days after last defoliation",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                                "        ",
                                "        // - Internal variables",
                                "        // fraction of harvested Dm to actually remove from field",
                                "        private double fractionDM2Remove = 1.0;",
                                "        // flag whether defoliation is allowed",
                                "        //private bool rotationAllowed = true;",
                                "        // number of days for each defoliation event",
                                "        private int cuttingDuration = 0;",
                                "        // counter for day within each defoliation",
                                "        private int daysCutting = 0;",
                                "        // type of interval (Fixed or target)",
                                "        private string intervalType;",
                                "        // total herbage to remove in g/m2 per day",
                                "        private double herbageToRemove;",
                                "        // type of DM amount (ResidualDM or DMToRemove)",
                                "        private string amountType;",
                                "        // auxiliary flag for defoliation",
                                "        private bool aCutHasHappened = false;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "",
                                "            // reset variables",
                                "            DaysAfterCut = 0;",
                                "            resetVariables();",
                                "            cuttingDuration = DurationOfCut;",
                                "            ",
                                "            // get the type of amount given",
                                "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                                "                amountType = \"SetResidueAmount\";",
                                "            else",
                                "                amountType = \"SetRemoveAmount\";",
                                "",
                                "            // get the type of amount given",
                                "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                                "                intervalType = \"Fixed\";",
                                "            else",
                                "                intervalType = \"Target\";",
                                "",
                                "            // make sure that rotation starts when startDate < simulationStartDay",
                                "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                                "                CutRotationStartDate = Clock.Today;",
                                "        }",
                                "        ",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            if (rotationAllowed)",
                                "            {",
                                "                if (Clock.Today == CutRotationStartDate)",
                                "                    DaysAfterCut = CutInterval;",
                                "",
                                "                bool SwardIsAlive = false;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                {",
                                "                    if (species.IsAlive)",
                                "                        SwardIsAlive = true;",
                                "                }",
                                "                ",
                                "                // Check whether we can defoliate",
                                "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))",
                                "                {",
                                "                    // Check whether we should start a defoliation",
                                "                    if (DaysAfterCut >= (CutInterval - 1))",
                                "                    {",
                                "                        Graze(AmountGiven, amountType, DurationOfCut);",
                                "                    }",
                                "                }",
                                "            }",
                                "",
                                "            // Check whether we need to continue cutting",
                                "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                                "            {",
                                "                // reset outputs",
                                "                resetVariables();",
                                "",
                                "                removeDM(herbageToRemove);",
                                "                returnExcreta();",
                                "                daysCutting += 1;",
                                "                if (daysCutting == cuttingDuration)",
                                "                {",
                                "                    PostHarvestDM = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        PostHarvestDM += species.Standing.Wt;",
                                "                }",
                                "            }",
                                "",
                                "            // reset outputs",
                                "            if (daysCutting < 0)",
                                "            {",
                                "                resetVariables();",
                                "                daysCutting = 0;",
                                "            }",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            // Check whether a cutting has finished",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                aCutHasHappened = true;",
                                "                daysCutting = -1;",
                                "            }",
                                "",
                                "            // Increase the counter for days after cutting",
                                "            if (aCutHasHappened && (daysCutting == 0))",
                                "                DaysAfterCut += 1;",
                                "        }",
                                "",
                                "        public enum removeAmountTypes",
                                "        {",
                                "            /// <summary>Setting DM amount to remove</summary>",
                                "            DMToRemove,",
                                "            /// <summary>Setting residual DM amount</summary>",
                                "            ResidualDM",
                                "        }",
                                "",
                                "        public enum rotationIntervalTypes",
                                "        {",
                                "            /// <summary>Setting a fixed interval</summary>",
                                "            FixedInterval,",
                                "            /// <summary>Setting a target (minimum) inteval</summary>",
                                "            TargetInterval",
                                "        }",
                                "",
                                "        public enum removeDMTypes",
                                "        {",
                                "            /// <summary>Remove all DM</summary>",
                                "            RemoveAll,",
                                "            /// <summary>Remove no DM</summary>",
                                "            RemoveNone,",
                                "            /// <summary>Remove a fraction based on digestibility</summary>",
                                "            BasedOnDigestibility",
                                "        }",
                                "",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "        ",
                                "                ",
                                "        // Resets the values of all outputs",
                                "        private void resetVariables()",
                                "        {",
                                "            DefoliatedWt = 0.0;",
                                "            DefoliatedN = 0.0;",
                                "            HarvestedWt = 0.0;",
                                "            HarvestedN = 0.0;",
                                "            RemovedWt = 0.0;",
                                "            RemovedN = 0.0;",
                                "            ReturnedWt = 0.0;",
                                "            ReturnedN = 0.0;",
                                "            NReturnedInDung = 0.0;",
                                "            NReturnedInUrine = 0.0;",
                                "        }",
                                "",
                                "        // Description: Perform the basic calculations for defoliation",
                                "        public void Graze(double amountDM, string amountType, int duration)",
                                "        {",
                                "            // Get the existing plant amount",
                                "            PreHarvestDM = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                PreHarvestDM += species.Standing.Wt;",
                                "            ",
                                "            // Check the amount to remove and print some info",
                                "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = amountDM / duration;",
                                "            }",
                                "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                                "            }",
                                "            else",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                                "                if (intervalType == \"Fixed\")",
                                "                    DaysAfterCut = -duration;",
                                "                return;",
                                "            }",
                                "",
                                "            cuttingDuration = duration;",
                                "            // Preform first defoliation",
                                "            removeDM(herbageToRemove);",
                                "            returnExcreta();",
                                "            daysCutting = 1;",
                                "            DaysAfterCut = 0;",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                PostHarvestDM = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    PostHarvestDM += species.Standing.Wt;",
                                "            }",
                                "        }",
                                "",
                                "        // Do the DM removal",
                                "        private void removeDM(double removeAmount)",
                                "        {",
                                "            double existingWt = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                existingWt += species.Harvestable.Wt;",
                                "",
                                "",
                                "            // Check whether we harvest anything",
                                "            if (existingWt >= removeAmount)",
                                "            {",
                                "                foreach (AgPasture.PastureSpecies species in Pasture)",
                                "                {",
                                "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                                "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                                "                }",
                                "                ",
                                "                // get total harvested",
                                "                DefoliatedWt = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedWt += species.HarvestedWt;",
                                "                DefoliatedN = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedN += species.HarvestedN;",
                                "                HarvestedWt = DefoliatedWt;",
                                "                HarvestedN = DefoliatedN;",
                                "",
                                "                // get amounts actually removed from field and that to be returned (dung/urine)",
                                "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                                "                    fractionDM2Remove = 1.0;",
                                "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                                "                    fractionDM2Remove = 0.0;",
                                "                else",
                                "                {",
                                "                    fractionDM2Remove = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;",
                                "                    fractionDM2Remove /= removeAmount;",
                                "                }",
                                "                ",
                                "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                                "                RemovedN = HarvestedN * FractionN2Remove;",
                                "                ReturnedWt = HarvestedWt - RemovedWt;",
                                "                ReturnedN = HarvestedN - RemovedN;",
                                "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                                "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                                "            }",
                                "        }",
                                "",
                                "        // Return dung and urine",
                                "        private void returnExcreta()",
                                "        {",
                                "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                                "            {",
                                "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                                "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                                "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                                "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                                "                float[] dltp = new float[] { 0 };",
                                "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                                "",
                                "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                                "                BiomassDung.dm_type = type;",
                                "                BiomassDung.dlt_crop_dm = dltdm;",
                                "                BiomassDung.dlt_dm_n = dltn;",
                                "                BiomassDung.dlt_dm_p = dltp;",
                                "                BiomassDung.fraction_to_residue = fraction;",
                                "                BiomassRemoved.Invoke(BiomassDung);",
                                "            }",
                                "",
                                "            if (NReturnedInUrine > 0.0)",
                                "            {",
                                "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "1"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "2250"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "PSIDul": -100.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.4325,
                                0.4325,
                                0.4325,
                                0.4325
                              ],
                              "InitialPAWmm": 199.5,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 1500.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "AGPRyegrass",
                          "ResourceName": "AGPRyegrass",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "[AGPRyegrass].AboveGroundWt as PlantMass",
                            "[AGPRyegrass].HarvestedWt as Harvested",
                            "[AGPRyegrass].WaterDemand as SW_Demand",
                            "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                            "[AGPRyegrass].GlfWaterSupply as glfWater",
                            "[AGPRyegrass].GlfNSupply as glfNitrogen",
                            "sum([Soil].Water.MM) as SoilWater",
                            "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithNoStress",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone1",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn ferliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                                "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                                "        ",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "            if (allowIrrigationAll == answerType.yes)",
                                "                IrrigationIsAlwaysAllowed = true; ",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if (IrrigationIsAlwaysAllowed)",
                                "                CropIsActive = true;  // might not be but we don't care",
                                "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "PSIDul": -100.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.4325,
                                0.4325,
                                0.4325,
                                0.4325
                              ],
                              "InitialPAWmm": 199.5,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([Soil].Water.MM) as SoilWater",
                            "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithNoStress",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "07 Test With Water Stress",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This series of simulations are as for the â€˜No Stressâ€™ series except there is no irrigation (fertiliser remains turned on).  There is also no rainfall so this is a run-down experiment.  The expectation is that as more roots are spread into Zone1 that:\r\nâ€¢\tThe plant can access more water so more dry matter will be harvested and, later on when there is insufficient stored soil water, senescence will be slower;\r\n\r\nâ€¢\tWater demand and water uptake will be maintained for longer;\r\n\r\nâ€¢\tWater stress will be later and less severe for a while;\r\n\r\nâ€¢\tThere will be no N stress because fertiliser is applied as needed;\r\n\r\nâ€¢\tThe soil water in Zone0 will be depleted more slowly while the soil water in Zone1 will be depleted more quickly;\r\n\r\nâ€¢\tSoil nitrogen will be unaffected; and \r\n\r\nâ€¢\tLess fertiliser will be applied in Zone0 and more in Zone1.\r\n\r\nThese expectations are met.  It seems likely that the fluctuations in soil N storage are due to the size of each fertiliser addition (50 kg N /ha).\r\n",
              "Name": "Memo TestWithWaterStress",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2600.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PlantWt",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "PlantMass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "Harvested",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterDemand",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Demand",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Demand",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Uptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Uptake",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStress",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NStress",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Nitrogen",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Nitrogen",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment07",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "[DoRootsSingle].Script.Zone1Prop=0.0,0.25,0.5,0.75,1.0",
                      "Name": "NumOfZones",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "Descriptors": null,
                  "Name": "TestWithWaterStress",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "2000-01-01T00:00:00",
                      "End": "2000-12-31T00:00:00",
                      "Name": "Clock",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.ControlledEnvironment, Models",
                      "MaxT": 25.0,
                      "MinT": 15.0,
                      "Rain": 0.0,
                      "Radn": 25.0,
                      "PanEvap": 0.0,
                      "VP": 17.0,
                      "Wind": 3.0,
                      "CO2": 350.0,
                      "AirPressure": 1010.0,
                      "DiffuseFraction": 0.0,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "DayLength": 12.0,
                      "SunRise": 0.0,
                      "SunSet": 0.0,
                      "Name": "ControlledEnvironment",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone0",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System.Xml.Serialization;",
                                "using System.Collections.Generic;",
                                "using System;",
                                "using System.Linq;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "        [Description(\"Root depth in the plant's zone (mm): \")]  public double Zone0Depth { get; set; }",
                                "        [Description(\"Root mass  in the plant's zone (mm): \")]  public double Zone0Mass { get; set; }",
                                "",
                                "        [Description(\"Name of the first zone: \")] public string Zone1Name { get; set; }",
                                "        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone1Prop { get; set; }",
                                "",
                                "        [Description(\"Name of the second zone: \")] public string Zone2Name { get; set; }",
                                "        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone2Prop { get; set; }",
                                "",
                                "        [Description(\"Name of the third zone: \")] public string Zone3Name { get; set; }",
                                "        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone3Prop { get; set; }",
                                "",
                                "        // - Outputs from this manager",
                                "",
                                "        // - Internal variables",
                                "",
                                "        [EventSubscribe(\"FinalInitialise\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            int SpeciesNum = 0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                SpeciesNum += 1;",
                                "                if (SpeciesNum == 1)",
                                "                {",
                                "                    //double test = species.RootWt;",
                                "                    if (Zone1Prop > 0)",
                                "                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone1Prop * Zone0Depth, rootDM: Zone1Prop * Zone0Mass);",
                                "                    if (Zone2Prop > 0)",
                                "                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone2Prop * Zone0Depth, rootDM: Zone2Prop * Zone0Mass);",
                                "                    if (Zone3Prop > 0)",
                                "                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone3Prop * Zone0Depth, rootDM: Zone3Prop * Zone0Mass);",
                                "                }",
                                "            }",
                                "",
                                "            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);",
                                "            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "Zone0Depth",
                                  "Value": "600"
                                },
                                {
                                  "Key": "Zone0Mass",
                                  "Value": "500"
                                },
                                {
                                  "Key": "Zone1Name",
                                  "Value": "Zone1"
                                },
                                {
                                  "Key": "Zone1Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone2Name",
                                  "Value": "Zone2"
                                },
                                {
                                  "Key": "Zone2Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone3Name",
                                  "Value": "Zone3"
                                },
                                {
                                  "Key": "Zone3Prop",
                                  "Value": "0"
                                }
                              ],
                              "Name": "DoRootsSingle",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn ferliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                                "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                                "        ",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "            if (allowIrrigationAll == answerType.yes)",
                                "                IrrigationIsAlwaysAllowed = true; ",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if (IrrigationIsAlwaysAllowed)",
                                "                CropIsActive = true;  // might not be but we don't care",
                                "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "no"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }",
                                "        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }",
                                "        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }",
                                "        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }",
                                "        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }",
                                "        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }",
                                "        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }",
                                "        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }",
                                "        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }",
                                "        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }",
                                "        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }",
                                "        // Description: Pasture DM defoliated today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }",
                                "        // Description: Pasture N defoliate today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }",
                                "        // Description: Pasture DM harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }",
                                "        // Description: Pasture N harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }",
                                "        // Description: Pasture DM removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }",
                                "        // Description: Pasture N removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }",
                                "        // Description: Residue DM returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }",
                                "        // Description: Residue N returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }",
                                "        // Description: Harvested N returned as dung (SurfaceOM)",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }",
                                "        // Description: Harvested N returned as urine (urea)",
                                "        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }",
                                "        // Description: Number of days after last defoliation",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                                "        ",
                                "        // - Internal variables",
                                "        // fraction of harvested Dm to actually remove from field",
                                "        private double fractionDM2Remove = 1.0;",
                                "        // flag whether defoliation is allowed",
                                "        //private bool rotationAllowed = true;",
                                "        // number of days for each defoliation event",
                                "        private int cuttingDuration = 0;",
                                "        // counter for day within each defoliation",
                                "        private int daysCutting = 0;",
                                "        // type of interval (Fixed or target)",
                                "        private string intervalType;",
                                "        // total herbage to remove in g/m2 per day",
                                "        private double herbageToRemove;",
                                "        // type of DM amount (ResidualDM or DMToRemove)",
                                "        private string amountType;",
                                "        // auxiliary flag for defoliation",
                                "        private bool aCutHasHappened = false;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "",
                                "            // reset variables",
                                "            DaysAfterCut = 0;",
                                "            resetVariables();",
                                "            cuttingDuration = DurationOfCut;",
                                "            ",
                                "            // get the type of amount given",
                                "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                                "                amountType = \"SetResidueAmount\";",
                                "            else",
                                "                amountType = \"SetRemoveAmount\";",
                                "",
                                "            // get the type of amount given",
                                "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                                "                intervalType = \"Fixed\";",
                                "            else",
                                "                intervalType = \"Target\";",
                                "",
                                "            // make sure that rotation starts when startDate < simulationStartDay",
                                "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                                "                CutRotationStartDate = Clock.Today;",
                                "        }",
                                "        ",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            if (rotationAllowed)",
                                "            {",
                                "                if (Clock.Today == CutRotationStartDate)",
                                "                    DaysAfterCut = CutInterval;",
                                "",
                                "                bool SwardIsAlive = false;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                {",
                                "                    if (species.IsAlive)",
                                "                        SwardIsAlive = true;",
                                "                }",
                                "                ",
                                "                // Check whether we can defoliate",
                                "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))",
                                "                {",
                                "                    // Check whether we should start a defoliation",
                                "                    if (DaysAfterCut >= (CutInterval - 1))",
                                "                    {",
                                "                        Graze(AmountGiven, amountType, DurationOfCut);",
                                "                    }",
                                "                }",
                                "            }",
                                "",
                                "            // Check whether we need to continue cutting",
                                "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                                "            {",
                                "                // reset outputs",
                                "                resetVariables();",
                                "",
                                "                removeDM(herbageToRemove);",
                                "                returnExcreta();",
                                "                daysCutting += 1;",
                                "                if (daysCutting == cuttingDuration)",
                                "                {",
                                "                    PostHarvestDM = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        PostHarvestDM += species.Standing.Wt;",
                                "                }",
                                "            }",
                                "",
                                "            // reset outputs",
                                "            if (daysCutting < 0)",
                                "            {",
                                "                resetVariables();",
                                "                daysCutting = 0;",
                                "            }",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            // Check whether a cutting has finished",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                aCutHasHappened = true;",
                                "                daysCutting = -1;",
                                "            }",
                                "",
                                "            // Increase the counter for days after cutting",
                                "            if (aCutHasHappened && (daysCutting == 0))",
                                "                DaysAfterCut += 1;",
                                "        }",
                                "",
                                "        public enum removeAmountTypes",
                                "        {",
                                "            /// <summary>Setting DM amount to remove</summary>",
                                "            DMToRemove,",
                                "            /// <summary>Setting residual DM amount</summary>",
                                "            ResidualDM",
                                "        }",
                                "",
                                "        public enum rotationIntervalTypes",
                                "        {",
                                "            /// <summary>Setting a fixed interval</summary>",
                                "            FixedInterval,",
                                "            /// <summary>Setting a target (minimum) inteval</summary>",
                                "            TargetInterval",
                                "        }",
                                "",
                                "        public enum removeDMTypes",
                                "        {",
                                "            /// <summary>Remove all DM</summary>",
                                "            RemoveAll,",
                                "            /// <summary>Remove no DM</summary>",
                                "            RemoveNone,",
                                "            /// <summary>Remove a fraction based on digestibility</summary>",
                                "            BasedOnDigestibility",
                                "        }",
                                "",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "        ",
                                "                ",
                                "        // Resets the values of all outputs",
                                "        private void resetVariables()",
                                "        {",
                                "            DefoliatedWt = 0.0;",
                                "            DefoliatedN = 0.0;",
                                "            HarvestedWt = 0.0;",
                                "            HarvestedN = 0.0;",
                                "            RemovedWt = 0.0;",
                                "            RemovedN = 0.0;",
                                "            ReturnedWt = 0.0;",
                                "            ReturnedN = 0.0;",
                                "            NReturnedInDung = 0.0;",
                                "            NReturnedInUrine = 0.0;",
                                "        }",
                                "",
                                "        // Description: Perform the basic calculations for defoliation",
                                "        public void Graze(double amountDM, string amountType, int duration)",
                                "        {",
                                "            // Get the existing plant amount",
                                "            PreHarvestDM = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                PreHarvestDM += species.Standing.Wt;",
                                "            ",
                                "            // Check the amount to remove and print some info",
                                "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = amountDM / duration;",
                                "            }",
                                "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                                "            }",
                                "            else",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                                "                if (intervalType == \"Fixed\")",
                                "                    DaysAfterCut = -duration;",
                                "                return;",
                                "            }",
                                "",
                                "            cuttingDuration = duration;",
                                "            // Preform first defoliation",
                                "            removeDM(herbageToRemove);",
                                "            returnExcreta();",
                                "            daysCutting = 1;",
                                "            DaysAfterCut = 0;",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                PostHarvestDM = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    PostHarvestDM += species.Standing.Wt;",
                                "            }",
                                "        }",
                                "",
                                "        // Do the DM removal",
                                "        private void removeDM(double removeAmount)",
                                "        {",
                                "            double existingWt = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                existingWt += species.Harvestable.Wt;",
                                "",
                                "",
                                "            // Check whether we harvest anything",
                                "            if (existingWt >= removeAmount)",
                                "            {",
                                "                foreach (AgPasture.PastureSpecies species in Pasture)",
                                "                {",
                                "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                                "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                                "                }",
                                "                ",
                                "                // get total harvested",
                                "                DefoliatedWt = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedWt += species.HarvestedWt;",
                                "                DefoliatedN = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedN += species.HarvestedN;",
                                "                HarvestedWt = DefoliatedWt;",
                                "                HarvestedN = DefoliatedN;",
                                "",
                                "                // get amounts actually removed from field and that to be returned (dung/urine)",
                                "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                                "                    fractionDM2Remove = 1.0;",
                                "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                                "                    fractionDM2Remove = 0.0;",
                                "                else",
                                "                {",
                                "                    fractionDM2Remove = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;",
                                "                    fractionDM2Remove /= removeAmount;",
                                "                }",
                                "                ",
                                "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                                "                RemovedN = HarvestedN * FractionN2Remove;",
                                "                ReturnedWt = HarvestedWt - RemovedWt;",
                                "                ReturnedN = HarvestedN - RemovedN;",
                                "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                                "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                                "            }",
                                "        }",
                                "",
                                "        // Return dung and urine",
                                "        private void returnExcreta()",
                                "        {",
                                "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                                "            {",
                                "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                                "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                                "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                                "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                                "                float[] dltp = new float[] { 0 };",
                                "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                                "",
                                "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                                "                BiomassDung.dm_type = type;",
                                "                BiomassDung.dlt_crop_dm = dltdm;",
                                "                BiomassDung.dlt_dm_n = dltn;",
                                "                BiomassDung.dlt_dm_p = dltp;",
                                "                BiomassDung.fraction_to_residue = fraction;",
                                "                BiomassRemoved.Invoke(BiomassDung);",
                                "            }",
                                "",
                                "            if (NReturnedInUrine > 0.0)",
                                "            {",
                                "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "1"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "2250"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "PSIDul": -100.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.4325,
                                0.4325,
                                0.4325,
                                0.4325
                              ],
                              "InitialPAWmm": 199.5,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 1500.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "AGPRyegrass",
                          "ResourceName": "AGPRyegrass",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "[AGPRyegrass].AboveGroundWt as PlantMass",
                            "[AGPRyegrass].HarvestedWt as Harvested",
                            "[AGPRyegrass].WaterDemand as SW_Demand",
                            "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                            "[AGPRyegrass].GlfWaterSupply as glfWater",
                            "[AGPRyegrass].GlfNSupply as glfNitrogen",
                            "sum([Soil].Water.MM) as SoilWater",
                            "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithWaterStress",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone1",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn ferliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                                "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                                "        ",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "            if (allowIrrigationAll == answerType.yes)",
                                "                IrrigationIsAlwaysAllowed = true; ",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if (IrrigationIsAlwaysAllowed)",
                                "                CropIsActive = true;  // might not be but we don't care",
                                "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "no"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "PSIDul": -100.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.4325,
                                0.4325,
                                0.4325,
                                0.4325
                              ],
                              "InitialPAWmm": 199.5,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([Soil].Water.MM) as SoilWater",
                            "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithWaterStress",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "08 Test With Nitrogen Stress",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This series of simulations are as for the â€˜No Stressâ€™ series except there is no fertiliser (irrigation remains turned on).  There is also no soil organic matter or initial mineral N so this is a run-down experiment.  The expectation is that as more roots are spread into Zone1 that:\r\nâ€¢\tThe plant can access more N so more dry matter will be harvested and, later on when there is insufficient stored N, senescence will be slower;\r\n\r\nâ€¢\tWater demand and water uptake will be maintained for longer;\r\n\r\nâ€¢\tThere will be no water stress;\r\n\r\nâ€¢\tN stress will be delayed and less severe;\r\n\r\nâ€¢\tSoil water storage will be unaffected;\r\n\r\nâ€¢\tThe soil N storage in Zone0 will be depleted more slowly while the soil N in Zone1 will be depleted more quickly; and\r\n\r\n\r\nâ€¢\tThere is likely to be a reduction in irrigation applied to Zone0 and an increase in Zone1 as more water is extracted from Zone1 but this will be moderated by the reduction in growth as N becomes severely limited.\r\n\r\nThese expectations are largely met.  There are some strange dynamics when 0.25 of the roots are in Zone1 for which there is no obvious explanation but otherwise the patterns are as expected.\r\n",
              "Name": "Memo TestWithNitrogenStress",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2600.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PlantWt",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "PlantMass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "Harvested",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterDemand",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Demand",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Demand",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Uptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Uptake",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStress",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NStress",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Nitrogen",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Nitrogen",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone0",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment08",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "[DoRootsSingle].Script.Zone1Prop=0.0,0.25,0.5,0.75,1.0",
                      "Name": "NumOfZones",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "Descriptors": null,
                  "Name": "TestWithNitrogenStress",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "2000-01-01T00:00:00",
                      "End": "2000-12-31T00:00:00",
                      "Name": "Clock",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.ControlledEnvironment, Models",
                      "MaxT": 25.0,
                      "MinT": 15.0,
                      "Rain": 0.0,
                      "Radn": 25.0,
                      "PanEvap": 0.0,
                      "VP": 17.0,
                      "Wind": 3.0,
                      "CO2": 350.0,
                      "AirPressure": 1010.0,
                      "DiffuseFraction": 0.0,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "DayLength": 12.0,
                      "SunRise": 0.0,
                      "SunSet": 0.0,
                      "Name": "ControlledEnvironment",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone0",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System.Xml.Serialization;",
                                "using System.Collections.Generic;",
                                "using System;",
                                "using System.Linq;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "        [Description(\"Root depth in the plant's zone (mm): \")]  public double Zone0Depth { get; set; }",
                                "        [Description(\"Root mass  in the plant's zone (mm): \")]  public double Zone0Mass { get; set; }",
                                "",
                                "        [Description(\"Name of the first zone: \")] public string Zone1Name { get; set; }",
                                "        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone1Prop { get; set; }",
                                "",
                                "        [Description(\"Name of the second zone: \")] public string Zone2Name { get; set; }",
                                "        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone2Prop { get; set; }",
                                "",
                                "        [Description(\"Name of the third zone: \")] public string Zone3Name { get; set; }",
                                "        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone3Prop { get; set; }",
                                "",
                                "        // - Outputs from this manager",
                                "",
                                "        // - Internal variables",
                                "",
                                "        [EventSubscribe(\"FinalInitialise\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            int SpeciesNum = 0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                SpeciesNum += 1;",
                                "                if (SpeciesNum == 1)",
                                "                {",
                                "                    //double test = species.RootWt;",
                                "                    if (Zone1Prop > 0)",
                                "                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone1Prop * Zone0Depth, rootDM: Zone1Prop * Zone0Mass);",
                                "                    if (Zone2Prop > 0)",
                                "                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone2Prop * Zone0Depth, rootDM: Zone2Prop * Zone0Mass);",
                                "                    if (Zone3Prop > 0)",
                                "                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone3Prop * Zone0Depth, rootDM: Zone3Prop * Zone0Mass);",
                                "                }",
                                "            }",
                                "",
                                "            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);",
                                "            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "Zone0Depth",
                                  "Value": "600"
                                },
                                {
                                  "Key": "Zone0Mass",
                                  "Value": "500"
                                },
                                {
                                  "Key": "Zone1Name",
                                  "Value": "Zone1"
                                },
                                {
                                  "Key": "Zone1Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone2Name",
                                  "Value": "Zone2"
                                },
                                {
                                  "Key": "Zone2Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone3Name",
                                  "Value": "Zone3"
                                },
                                {
                                  "Key": "Zone3Prop",
                                  "Value": "0"
                                }
                              ],
                              "Name": "DoRootsSingle",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn ferliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "no"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                                "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                                "        ",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "            if (allowIrrigationAll == answerType.yes)",
                                "                IrrigationIsAlwaysAllowed = true; ",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if (IrrigationIsAlwaysAllowed)",
                                "                CropIsActive = true;  // might not be but we don't care",
                                "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                                "// currenty defoliates the amount specified by spreading evenly over the specified period",
                                "",
                                "using Models.Soils;",
                                "using System.Linq;",
                                "using System;",
                                "using System.Collections.Generic;",
                                "using System.Xml.Serialization;",
                                "using Models.Core;",
                                "using Models.PMF;",
                                "using APSIM.Shared.Utilities;",
                                "using Newtonsoft.Json;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        // - Links to APSIM models",
                                "        [Link] Zone myZone;",
                                "        [Link] Clock Clock;",
                                "        [Link] Fertiliser fertiliser;",
                                "        [Link] ISummary summary = null;",
                                "        ",
                                "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                                "        ",
                                "        // - Paramters for this manager",
                                "        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }",
                                "        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }",
                                "        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }",
                                "        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }",
                                "        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }",
                                "        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }",
                                "        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }",
                                "        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }",
                                "        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }",
                                "        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }",
                                "        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }",
                                "",
                                "        // - Outputs from this manager",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }",
                                "        // Description: Pasture DM defoliated today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }",
                                "        // Description: Pasture N defoliate today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }",
                                "        // Description: Pasture DM harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }",
                                "        // Description: Pasture N harvested today",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }",
                                "        // Description: Pasture DM removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }",
                                "        // Description: Pasture N removed from the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }",
                                "        // Description: Residue DM returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }",
                                "        // Description: Residue N returned to the field",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }",
                                "        // Description: Harvested N returned as dung (SurfaceOM)",
                                "        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }",
                                "        // Description: Harvested N returned as urine (urea)",
                                "        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }",
                                "        // Description: Number of days after last defoliation",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                                "        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }",
                                "        // Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                                "        ",
                                "        // - Internal variables",
                                "        // fraction of harvested Dm to actually remove from field",
                                "        private double fractionDM2Remove = 1.0;",
                                "        // flag whether defoliation is allowed",
                                "        //private bool rotationAllowed = true;",
                                "        // number of days for each defoliation event",
                                "        private int cuttingDuration = 0;",
                                "        // counter for day within each defoliation",
                                "        private int daysCutting = 0;",
                                "        // type of interval (Fixed or target)",
                                "        private string intervalType;",
                                "        // total herbage to remove in g/m2 per day",
                                "        private double herbageToRemove;",
                                "        // type of DM amount (ResidualDM or DMToRemove)",
                                "        private string amountType;",
                                "        // auxiliary flag for defoliation",
                                "        private bool aCutHasHappened = false;",
                                "",
                                "        // - Event to add residue or dung to surface OM",
                                "        public event BiomassRemovedDelegate BiomassRemoved;",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                                "        {",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "            {",
                                "                Pasture.Add(species);",
                                "            }",
                                "",
                                "            // reset variables",
                                "            DaysAfterCut = 0;",
                                "            resetVariables();",
                                "            cuttingDuration = DurationOfCut;",
                                "            ",
                                "            // get the type of amount given",
                                "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                                "                amountType = \"SetResidueAmount\";",
                                "            else",
                                "                amountType = \"SetRemoveAmount\";",
                                "",
                                "            // get the type of amount given",
                                "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                                "                intervalType = \"Fixed\";",
                                "            else",
                                "                intervalType = \"Target\";",
                                "",
                                "            // make sure that rotation starts when startDate < simulationStartDay",
                                "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                                "                CutRotationStartDate = Clock.Today;",
                                "        }",
                                "        ",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            if (rotationAllowed)",
                                "            {",
                                "                if (Clock.Today == CutRotationStartDate)",
                                "                    DaysAfterCut = CutInterval;",
                                "",
                                "                bool SwardIsAlive = false;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                {",
                                "                    if (species.IsAlive)",
                                "                        SwardIsAlive = true;",
                                "                }",
                                "                ",
                                "                // Check whether we can defoliate",
                                "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))",
                                "                {",
                                "                    // Check whether we should start a defoliation",
                                "                    if (DaysAfterCut >= (CutInterval - 1))",
                                "                    {",
                                "                        Graze(AmountGiven, amountType, DurationOfCut);",
                                "                    }",
                                "                }",
                                "            }",
                                "",
                                "            // Check whether we need to continue cutting",
                                "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                                "            {",
                                "                // reset outputs",
                                "                resetVariables();",
                                "",
                                "                removeDM(herbageToRemove);",
                                "                returnExcreta();",
                                "                daysCutting += 1;",
                                "                if (daysCutting == cuttingDuration)",
                                "                {",
                                "                    PostHarvestDM = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        PostHarvestDM += species.Standing.Wt;",
                                "                }",
                                "            }",
                                "",
                                "            // reset outputs",
                                "            if (daysCutting < 0)",
                                "            {",
                                "                resetVariables();",
                                "                daysCutting = 0;",
                                "            }",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagementCalculations\")]",
                                "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                                "        {",
                                "            // Check whether a cutting has finished",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                aCutHasHappened = true;",
                                "                daysCutting = -1;",
                                "            }",
                                "",
                                "            // Increase the counter for days after cutting",
                                "            if (aCutHasHappened && (daysCutting == 0))",
                                "                DaysAfterCut += 1;",
                                "        }",
                                "",
                                "        public enum removeAmountTypes",
                                "        {",
                                "            /// <summary>Setting DM amount to remove</summary>",
                                "            DMToRemove,",
                                "            /// <summary>Setting residual DM amount</summary>",
                                "            ResidualDM",
                                "        }",
                                "",
                                "        public enum rotationIntervalTypes",
                                "        {",
                                "            /// <summary>Setting a fixed interval</summary>",
                                "            FixedInterval,",
                                "            /// <summary>Setting a target (minimum) inteval</summary>",
                                "            TargetInterval",
                                "        }",
                                "",
                                "        public enum removeDMTypes",
                                "        {",
                                "            /// <summary>Remove all DM</summary>",
                                "            RemoveAll,",
                                "            /// <summary>Remove no DM</summary>",
                                "            RemoveNone,",
                                "            /// <summary>Remove a fraction based on digestibility</summary>",
                                "            BasedOnDigestibility",
                                "        }",
                                "",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "        ",
                                "                ",
                                "        // Resets the values of all outputs",
                                "        private void resetVariables()",
                                "        {",
                                "            DefoliatedWt = 0.0;",
                                "            DefoliatedN = 0.0;",
                                "            HarvestedWt = 0.0;",
                                "            HarvestedN = 0.0;",
                                "            RemovedWt = 0.0;",
                                "            RemovedN = 0.0;",
                                "            ReturnedWt = 0.0;",
                                "            ReturnedN = 0.0;",
                                "            NReturnedInDung = 0.0;",
                                "            NReturnedInUrine = 0.0;",
                                "        }",
                                "",
                                "        // Description: Perform the basic calculations for defoliation",
                                "        public void Graze(double amountDM, string amountType, int duration)",
                                "        {",
                                "            // Get the existing plant amount",
                                "            PreHarvestDM = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                PreHarvestDM += species.Standing.Wt;",
                                "            ",
                                "            // Check the amount to remove and print some info",
                                "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = amountDM / duration;",
                                "            }",
                                "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                                "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                                "            }",
                                "            else",
                                "            {",
                                "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                                "                if (intervalType == \"Fixed\")",
                                "                    DaysAfterCut = -duration;",
                                "                return;",
                                "            }",
                                "",
                                "            cuttingDuration = duration;",
                                "            // Preform first defoliation",
                                "            removeDM(herbageToRemove);",
                                "            returnExcreta();",
                                "            daysCutting = 1;",
                                "            DaysAfterCut = 0;",
                                "            if (daysCutting == cuttingDuration)",
                                "            {",
                                "                PostHarvestDM = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    PostHarvestDM += species.Standing.Wt;",
                                "            }",
                                "        }",
                                "",
                                "        // Do the DM removal",
                                "        private void removeDM(double removeAmount)",
                                "        {",
                                "            double existingWt = 0.0;",
                                "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                existingWt += species.Harvestable.Wt;",
                                "",
                                "",
                                "            // Check whether we harvest anything",
                                "            if (existingWt >= removeAmount)",
                                "            {",
                                "                foreach (AgPasture.PastureSpecies species in Pasture)",
                                "                {",
                                "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                                "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                                "                }",
                                "                ",
                                "                // get total harvested",
                                "                DefoliatedWt = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedWt += species.HarvestedWt;",
                                "                DefoliatedN = 0.0;",
                                "                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                    DefoliatedN += species.HarvestedN;",
                                "                HarvestedWt = DefoliatedWt;",
                                "                HarvestedN = DefoliatedN;",
                                "",
                                "                // get amounts actually removed from field and that to be returned (dung/urine)",
                                "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                                "                    fractionDM2Remove = 1.0;",
                                "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                                "                    fractionDM2Remove = 0.0;",
                                "                else",
                                "                {",
                                "                    fractionDM2Remove = 0.0;",
                                "                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                                "                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;",
                                "                    fractionDM2Remove /= removeAmount;",
                                "                }",
                                "                ",
                                "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                                "                RemovedN = HarvestedN * FractionN2Remove;",
                                "                ReturnedWt = HarvestedWt - RemovedWt;",
                                "                ReturnedN = HarvestedN - RemovedN;",
                                "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                                "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                                "            }",
                                "        }",
                                "",
                                "        // Return dung and urine",
                                "        private void returnExcreta()",
                                "        {",
                                "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                                "            {",
                                "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                                "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                                "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                                "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                                "                float[] dltp = new float[] { 0 };",
                                "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                                "",
                                "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                                "                BiomassDung.dm_type = type;",
                                "                BiomassDung.dlt_crop_dm = dltdm;",
                                "                BiomassDung.dlt_dm_n = dltn;",
                                "                BiomassDung.dlt_dm_p = dltp;",
                                "                BiomassDung.fraction_to_residue = fraction;",
                                "                BiomassRemoved.Invoke(BiomassDung);",
                                "            }",
                                "",
                                "            if (NReturnedInUrine > 0.0)",
                                "            {",
                                "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "07/01/1900 00:00:00"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "12/31/2100 00:00:00"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "1"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "2250"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "PSIDul": -100.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.4325,
                                0.4325,
                                0.4325,
                                0.4325
                              ],
                              "InitialPAWmm": 199.5,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "doyGermination": 275,
                          "daysEmergenceToAnthesis": 120,
                          "daysAnthesisToMaturity": 85,
                          "degreesDayForAnthesis": 1100.0,
                          "degreesDayForMaturity": 900.0,
                          "daysAnnualsFactor": 45,
                          "FVPDFunction": {
                            "$type": "Models.Functions.LinearInterpolationFunction, Models",
                            "Name": "LinearInterpolationFunction",
                            "ResourceName": null,
                            "Children": [],
                            "Enabled": true,
                            "ReadOnly": false
                          },
                          "LightProfile": null,
                          "InitialShootDM": 1500.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "initialDMFractionsGrasses": [
                            0.15,
                            0.25,
                            0.25,
                            0.05,
                            0.05,
                            0.1,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "initialDMFractionsLegumes": [
                            0.16,
                            0.23,
                            0.22,
                            0.05,
                            0.03,
                            0.05,
                            0.05,
                            0.01,
                            0.04,
                            0.08,
                            0.08
                          ],
                          "initialDMFractionsForbs": [
                            0.2,
                            0.2,
                            0.15,
                            0.05,
                            0.1,
                            0.15,
                            0.1,
                            0.05,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PhotosyntheticEfficiency": 0.01,
                          "PhotosynthesisCurveFactor": 0.8,
                          "FractionPAR": 0.5,
                          "ReferenceCO2": 380.0,
                          "CO2EffectScaleFactor": 700.0,
                          "CO2EffectOffsetFactor": 600.0,
                          "CO2EffectMinimum": 0.7,
                          "CO2EffectExponent": 2.0,
                          "ReproSeasonDurationCoeff": 2.0,
                          "ReproSeasonShouldersLengthFactor": 1.0,
                          "ReproSeasonOnsetDurationFactor": 0.6,
                          "RelativeTurnoverEmerging": 2.0,
                          "DetachmentDroughtCoefficient": 3.0,
                          "DetachmentDroughtEffectMin": 0.1,
                          "TurnoverStockFactor": 0.01,
                          "TurnoverDefoliationEffectMin": 0.025,
                          "MinimumGreenLeafProp": 0.8,
                          "MinimumGreenRootProp": 0.5,
                          "Name": "AGPRyegrass",
                          "ResourceName": "AGPRyegrass",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "[AGPRyegrass].AboveGroundWt as PlantMass",
                            "[AGPRyegrass].HarvestedWt as Harvested",
                            "[AGPRyegrass].WaterDemand as SW_Demand",
                            "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                            "[AGPRyegrass].GlfWaterSupply as glfWater",
                            "[AGPRyegrass].GlfNSupply as glfNitrogen",
                            "sum([Soil].Water.MM) as SoilWater",
                            "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithNitrogenStress",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone1",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using Models.Soils.Nutrients;",
                                "using Models.Interfaces;",
                                "using System.Xml.Serialization;",
                                "using APSIM.Shared.Utilities;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "",
                                "namespace Models",
                                "{",
                                "    [Serializable]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Fertiliser fertiliser;",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Soil Soil;",
                                "        private DateTime lastApplicationDate;",
                                "        private bool fertiliserIsAllowed;",
                                "        private int nLayers;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NO3;",
                                "        [Link(ByName = true)]",
                                "        private ISolute NH4;",
                                "        [Link(ByName = true)]",
                                "        private ISolute Urea;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn ferliser applications on? \")]",
                                "        public yesnoType AllowFertiliser { get; set; }",
                                "        ",
                                "        [Description(\"Depth to calculate available soil N (mm): \")]",
                                "        public double Depth2SoilN { get; set; }",
                                "",
                                "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                                "        public double CriticalSoilN { get; set; }",
                                "",
                                "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                                "        public double FertNAmount { get; set; }",
                                "",
                                "        [Description(\"Type of N fertiliser to apply: \")]",
                                "        public Fertiliser.Types FertType { get; set; }",
                                "",
                                "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                                "        public double FertApplicationDepth { get; set; }",
                                "       ",
                                "        [Description(\"Minimum period between applications (days): \")]",
                                "        public double FertMinimumDays { get; set; }",
                                "       ",
                                "        public enum yesnoType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        [JsonIgnore] public double TopMineralN { get; set; }",
                                "        ",
                                "",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {",
                                "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "        }",
                                "",
                                "        [EventSubscribe(\"DoManagement\")]",
                                "        private void OnDoManagement(object sender, EventArgs e)",
                                "        {",
                                "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                                "            ",
                                "            // get the N stored in the soil",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopMineralN = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopMineralN += (NO3.kgha[layer]",
                                "                + NH4.kgha[layer]",
                                "                + Urea.kgha[layer])",
                                "                * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= Depth2SoilN)",
                                "                    layer = nLayers;",
                                "            }",
                                "",
                                "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                                "            {",
                                "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                                "                lastApplicationDate = Clock.Today;",
                                "            }",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "no"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "CodeArray": [
                                "using Newtonsoft.Json;",
                                "using APSIM.Shared.Utilities;",
                                "using System.Xml.Serialization;",
                                "using Models.Soils;",
                                "using Models.PMF;",
                                "using Models.Core;",
                                "using System;",
                                "using Models.Interfaces;",
                                "",
                                "        ",
                                "namespace Models",
                                "{",
                                "    [Serializable] ",
                                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                                "    public class Script : Model",
                                "    {",
                                "        [Link] private ISummary summary;",
                                "        [Link] private Irrigation Irrigation;",
                                "        [Link] private Clock Clock;",
                                "        [Link] private Soil Soil;",
                                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                                "        private DateTime StartDate;",
                                "        private DateTime EndDate;",
                                "        private double TopDUL;",
                                "        private double TopLL;",
                                "        private int nLayers;",
                                "        [Link]",
                                "        private IPhysical soilPhysical;",
                                "        [Link]",
                                "        private ISoilWater waterBalance;",
                                "        //Communication to other modules",
                                "       ",
                                "        //User inputs from properties tab",
                                "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                                "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                                "        public string seasonStart { get; set; }",
                                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                                "        public string seasonEnd { get; set; }",
                                "        [Description(\"Season allocation (mm)\")]",
                                "        public double seasonsAllocation { get; set; }",
                                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                                "        public double triggerDeficit { get; set; }",
                                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                                "        public double targetDeficit { get; set; }",
                                "        [Description(\"Minimum days for irrigation to return\")]",
                                "        public double returndays { get; set; }",
                                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                                "        public double maximumAmount { get; set; }",
                                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                                "        public double depthPAWC { get; set; }",
                                "       ",
                                "        public enum answerType",
                                "        {",
                                "            /// <summary>a positive answer</summary>",
                                "            yes,",
                                "            /// <summary>a negative answer</summary>",
                                "            no",
                                "        }",
                                "",
                                "        //Class members",
                                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                                "        [JsonIgnore] public double TopSWC { get; set; }",
                                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                                "        [JsonIgnore] public double AmountToApply { get; set; }",
                                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                                "        ",
                                "        private bool IrrigationIsAllowed { get; set; }",
                                "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                                "        ",
                                "        private bool SeasonIsOpen { get; set; }",
                                "        private bool CropIsActive { get; set; }",
                                "        private bool IrrigatorIsAvailable { get; set; }",
                                "        private bool SoilIsDry { get; set; }",
                                "",
                                "    ",
                                "        //Calculate static soil variables",
                                "        [EventSubscribe(\"StartOfSimulation\")]",
                                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                                "        {   ",
                                "            //Set the season dates",
                                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                                "            ",
                                "            //Can we irrigate at all?",
                                "            IrrigationIsAllowed = false; ",
                                "            if (allowIrrigation == answerType.yes)",
                                "                IrrigationIsAllowed = true; ",
                                "            if (allowIrrigationAll == answerType.yes)",
                                "                IrrigationIsAlwaysAllowed = true; ",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "            //Calculate soil water variables",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            nLayers = soilPhysical.Thickness.Length;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "        }",
                                "             ",
                                "        //Determine daily requirement for irrigation",
                                "        [EventSubscribe(\"StartOfDay\")]",
                                "        private void OnStartOfDay(object sender, EventArgs e)",
                                "        {",
                                "            //Can we irrigate today?          ",
                                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                                "",
                                "            //Is there a crop in the ground that needs irrigation?",
                                "            CropIsActive = false;",
                                "            if (IrrigationIsAlwaysAllowed)",
                                "                CropIsActive = true;  // might not be but we don't care",
                                "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                                "                CropIsActive = true;",
                                "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                                "          ",
                                "            //Is the irrigator available?",
                                "            IrrigatorIsAvailable = false;",
                                "            DaysSinceIrrigation += 1;",
                                "            if (DaysSinceIrrigation >= returndays)",
                                "                IrrigatorIsAvailable = true;",
                                "          ",
                                "            //Is the soil dry enough to require irrigation?",
                                "            SoilIsDry = false;",
                                "            double depthFromSurface = 0.0;",
                                "            double fracLayer = 0.0;",
                                "            TopSWC = 0.0;",
                                "            for (int layer = 0; layer < nLayers; layer++)",
                                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                                "            {",
                                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                                "                depthFromSurface += soilPhysical.Thickness[layer];",
                                "                if (depthFromSurface >= depthPAWC)",
                                "                    layer = nLayers;",
                                "            }",
                                "            ",
                                "            TopSWdeficit = TopSWC - TopDUL;",
                                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                                "                SoilIsDry = true;",
                                "                ",
                                "            //Are all the conditions ratifying irrigation",
                                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                                "            {",
                                "                //Lets bloody well irrigate then!!!!",
                                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                                "                Irrigation.Apply(AmountToApply);",
                                "                DaysSinceIrrigation = 0;",
                                "                SeasonAppliedAmount += AmountToApply;",
                                "            }",
                                "        }",
                                "        ",
                                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                                "        {",
                                "            bool result = false;",
                                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                                "            {",
                                "                // period is within one year, ex: summer in the northern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            else",
                                "            {",
                                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                                "                    result = true;",
                                "            }",
                                "            ",
                                "            return result;",
                                "        }",
                                "    }",
                                "}"
                              ],
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "Name": "Fertiliser",
                          "ResourceName": "Fertiliser",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "SurfOM": [],
                          "Canopies": [],
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "Name": "SurfaceOrganicMatter",
                          "ResourceName": "SurfaceOrganicMatter",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "PHUnits": 0,
                              "EC": null,
                              "ESP": null,
                              "CEC": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "ResourceName": null,
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "ResourceName": null,
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "PSIDul": -100.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "Name": "SoilWater",
                              "ResourceName": "WaterBalance",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Nutrients.Nutrient, Models",
                              "Name": "Nutrient",
                              "ResourceName": "Nutrient",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "CarbonUnits": 0,
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Water, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.4325,
                                0.4325,
                                0.4325,
                                0.4325
                              ],
                              "InitialPAWmm": 199.5,
                              "RelativeTo": "LL15",
                              "FilledFromTop": false,
                              "Name": "Water",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NO3",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 0,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "NH4",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Solute, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "InitialValues": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "InitialValuesUnits": 1,
                              "WaterTableConcentration": 0.0,
                              "D0": 0.0,
                              "Exco": null,
                              "FIP": null,
                              "DepthConstant": 0.0,
                              "MaxDepthSoluteAccessible": 0.0,
                              "RunoffEffectivenessAtMovingSolute": 0.0,
                              "MaxEffectiveRunoff": 0.0,
                              "Name": "Urea",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([Soil].Water.MM) as SoilWater",
                            "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithNitrogenStress",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "Conceptual Three Zone Simulation with Initial Uniform Soil N",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "In this simulation, which is largely based on the one above, there are three zones with a ryegrass, lots of irrigation but no fertiliser and about 35 kg mineral N in the soil at initialisation.  The roots from the ryegrass in Zone1 has roots on Zone0 and Zone2 but the ryegrasses in Zone0 and Zone2 only have roots in their own zone.  As expected:\r\n\r\nâ€¢\tthe ryegrass in Zone1 grows more (note that Zone0 and Zone2 are mostly plotting on top of each other), \r\n\r\nâ€¢\twater demand and uptake is higher, \r\n\r\nâ€¢\tN stress is lower for longer because the plant has access to some of the N in Zone 0 and 2, \r\n\r\nâ€¢\tsoil N storage declines more slowly, and \r\n\r\nâ€¢\tmore irrigation is required in Zones 0 and 2 because of the additional water uptake from the Sone1 ryegrass and its spreading roots.  \r\n",
              "Name": "Memo ThreeZoneSimulationInitialUniformSoilN",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2600.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PlantWt",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "PlantMass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Harvested",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterDemand",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Demand",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Demand",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Uptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Uptake",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStress",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "glfWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NStress",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "glfNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWater",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogen",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Nitrogen",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationApplied",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserApplied",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Simulation, Models",
              "Descriptors": null,
              "Name": "ThreeZoneSimulationInitialUniformSoilN",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Clock, Models",
                  "Start": "2000-01-01T00:00:00",
                  "End": "2000-03-31T00:00:00",
                  "Name": "Clock",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Climate.ControlledEnvironment, Models",
                  "MaxT": 25.0,
                  "MinT": 15.0,
                  "Rain": 0.0,
                  "Radn": 25.0,
                  "PanEvap": 0.0,
                  "VP": 17.0,
                  "Wind": 3.0,
                  "CO2": 350.0,
                  "AirPressure": 1010.0,
                  "DiffuseFraction": 0.0,
                  "Latitude": 0.0,
                  "Longitude": 0.0,
                  "DayLength": 12.0,
                  "SunRise": 0.0,
                  "SunSet": 0.0,
                  "Name": "ControlledEnvironment",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                  "Name": "SoilArbitrator",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Summary, Models",
                  "Verbosity": 100,
                  "Name": "Summary",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone0",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System.Xml.Serialization;",
                            "using System.Collections.Generic;",
                            "using System;",
                            "using System.Linq;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }",
                            "        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "",
                            "        // - Internal variables",
                            "",
                            "        [EventSubscribe(\"FinalInitialise\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            int SpeciesNum = 0;",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                SpeciesNum += 1;",
                            "                if (SpeciesNum == 1)",
                            "                {",
                            "                    if (Zone0Prop > 0)",
                            "                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);",
                            "                    if (Zone2Prop > 0)",
                            "                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);",
                            "                }",
                            "            }",
                            "",
                            "            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);",
                            "            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone0"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone1"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using System.Linq;",
                            "using System;",
                            "using System.Collections.Generic;",
                            "using System.Xml.Serialization;",
                            "using Models.Core;",
                            "using Models.PMF;",
                            "using APSIM.Shared.Utilities;",
                            "using Newtonsoft.Json;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] Fertiliser fertiliser;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Date to begin the rotation: \")]",
                            "        public DateTime CutRotationStartDate { get; set; }",
                            "",
                            "        [Description(\"Date to finish the rotation: \")]",
                            "        public DateTime CutRotationEndDate { get; set; }",
                            "",
                            "        [Description(\"Rotation interval (days): \")]",
                            "        public int CutInterval { get; set; }",
                            "",
                            "        [Description(\"How the interval is defined: \")]",
                            "        public rotationIntervalTypes IntervalType { get; set; }",
                            "",
                            "        [Description(\"Duration of each event (days): \")]",
                            "        public int DurationOfCut { get; set; }",
                            "",
                            "        [Description(\"What amount is being defined: \")]",
                            "        public removeAmountTypes RemoveAmountType { get; set; }",
                            "",
                            "        [Description(\"Amount to use (kg/ha): \")]",
                            "        public double AmountGiven { get; set; }",
                            "",
                            "        [Description(\"Fraction of DM that is removed from the field:\")]",
                            "        public removeDMTypes DMRemoveType { get; set; }",
                            "",
                            "        [Description(\"Fraction of N that is removed from the field (0-1):\")]",
                            "        public double FractionN2Remove { get; set; }",
                            "",
                            "        [Description(\"Proportion of N returned in dung (0-1):\")]",
                            "        public double ProportionN2Dung { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today",
                            "        public double DefoliatedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today",
                            "        public double DefoliatedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today",
                            "        public double HarvestedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today",
                            "        public double HarvestedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field",
                            "        public double RemovedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field",
                            "        public double RemovedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field",
                            "        public double ReturnedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field",
                            "        public double ReturnedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)",
                            "        public double NReturnedInDung { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)",
                            "        public double NReturnedInUrine { get; set; }",
                            "        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation",
                            "        public int DaysAfterCut { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                            "        public double PreHarvestDM { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                            "        public double PostHarvestDM { get; set; }",
                            "        ",
                            "        // - Internal variables",
                            "        // fraction of harvested Dm to actually remove from field",
                            "        private double fractionDM2Remove = 1.0;",
                            "        // flag whether defoliation is allowed",
                            "        private bool rotationAllowed = true;",
                            "        // number of days for each defoliation event",
                            "        private int cuttingDuration = 0;",
                            "        // counter for day within each defoliation",
                            "        private int daysCutting = 0;",
                            "        // type of interval (Fixed or target)",
                            "        private string intervalType;",
                            "        // total herbage to remove in g/m2 per day",
                            "        private double herbageToRemove;",
                            "        // type of DM amount (ResidualDM or DMToRemove)",
                            "        private string amountType;",
                            "        // auxiliary flag for defoliation",
                            "        private bool aCutHasHappened = false;",
                            "",
                            "        // - Event to add residue or dung to surface OM",
                            "        public event BiomassRemovedDelegate BiomassRemoved;",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                Pasture.Add(species);",
                            "            }",
                            "",
                            "            // reset variables",
                            "            DaysAfterCut = 0;",
                            "            resetVariables();",
                            "            cuttingDuration = DurationOfCut;",
                            "            ",
                            "            // get the type of amount given",
                            "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                            "                amountType = \"SetResidueAmount\";",
                            "            else",
                            "                amountType = \"SetRemoveAmount\";",
                            "",
                            "            // get the type of amount given",
                            "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                            "                intervalType = \"Fixed\";",
                            "            else",
                            "                intervalType = \"Target\";",
                            "",
                            "            // make sure that rotation start when startDate < simulationStartDay",
                            "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                            "                CutRotationStartDate = Clock.Today;",
                            "        }",
                            "        ",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            if (rotationAllowed)",
                            "            {",
                            "                if (Clock.Today == CutRotationStartDate)",
                            "                    DaysAfterCut = CutInterval;",
                            "",
                            "                // Check whether we can defoliate",
                            "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))",
                            "                {",
                            "                    // Check whether we should start a defoliation",
                            "                    if (DaysAfterCut >= (CutInterval - 1))",
                            "                    {",
                            "                        Graze(AmountGiven, amountType, DurationOfCut);",
                            "                    }",
                            "                }",
                            "            }",
                            "",
                            "            // Check whether we need to continue cutting",
                            "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                            "            {",
                            "                // reset outputs",
                            "                resetVariables();",
                            "",
                            "                removeDM(herbageToRemove);",
                            "                returnExcreta();",
                            "                daysCutting += 1;",
                            "                if (daysCutting == cuttingDuration)",
                            "                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt",
                            "            }",
                            "",
                            "            // reset outputs",
                            "            if (daysCutting < 0)",
                            "            {",
                            "                resetVariables();",
                            "                daysCutting = 0;",
                            "            }",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagementCalculations\")]",
                            "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                            "        {",
                            "            // Check whether a cutting has finished",
                            "            if (daysCutting == cuttingDuration)",
                            "            {",
                            "                aCutHasHappened = true;",
                            "                daysCutting = -1;",
                            "            }",
                            "",
                            "            // Increase the counter for days after cutting",
                            "            if (aCutHasHappened && (daysCutting == 0))",
                            "                DaysAfterCut += 1;",
                            "        }",
                            "",
                            "        public enum removeAmountTypes",
                            "        {",
                            "            /// <summary>Setting DM amount to remove</summary>",
                            "            DMToRemove,",
                            "            /// <summary>Setting residual DM amount</summary>",
                            "            ResidualDM",
                            "        }",
                            "",
                            "        public enum rotationIntervalTypes",
                            "        {",
                            "            /// <summary>Setting a fixed interval</summary>",
                            "            FixedInterval,",
                            "            /// <summary>Setting a target (minimum) inteval</summary>",
                            "            TargetInterval",
                            "        }",
                            "",
                            "        public enum removeDMTypes",
                            "        {",
                            "            /// <summary>Remove all DM</summary>",
                            "            RemoveAll,",
                            "            /// <summary>Remove no DM</summary>",
                            "            RemoveNone,",
                            "            /// <summary>Remove a fraction based on digestibility</summary>",
                            "            BasedOnDigestibility",
                            "        }",
                            "",
                            "        // Resets the values of all outputs",
                            "        private void resetVariables()",
                            "        {",
                            "            DefoliatedWt = 0.0;",
                            "            DefoliatedN = 0.0;",
                            "            HarvestedWt = 0.0;",
                            "            HarvestedN = 0.0;",
                            "            RemovedWt = 0.0;",
                            "            RemovedN = 0.0;",
                            "            ReturnedWt = 0.0;",
                            "            ReturnedN = 0.0;",
                            "            NReturnedInDung = 0.0;",
                            "            NReturnedInUrine = 0.0;",
                            "        }",
                            "",
                            "        // Description: Perform the basic calculations for defoliation",
                            "        public void Graze(double amountDM, string amountType, int duration)",
                            "        {",
                            "            // Get the existing plant amount",
                            "            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "            ",
                            "            // Check the amount to remove and print some info",
                            "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = amountDM / duration;",
                            "            }",
                            "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                            "            }",
                            "            else",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                            "                if (intervalType == \"Fixed\")",
                            "                    DaysAfterCut = -duration;",
                            "                return;",
                            "            }",
                            "",
                            "            cuttingDuration = duration;",
                            "            // Preform first defoliation",
                            "            removeDM(herbageToRemove);",
                            "            returnExcreta();",
                            "            daysCutting = 1;",
                            "            DaysAfterCut = 0;",
                            "            if (daysCutting == cuttingDuration)",
                            "                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "        }",
                            "",
                            "        // Do the DM removal",
                            "        private void removeDM(double removeAmount)",
                            "        {",
                            "            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt",
                            "",
                            "            // Check whether we harvest anything",
                            "            if (existingWt >= removeAmount)",
                            "            {",
                            "                foreach (AgPasture.PastureSpecies species in Pasture)",
                            "                {",
                            "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                            "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                            "                }",
                            "                ",
                            "                // get total harvested",
                            "                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt",
                            "                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN",
                            "                HarvestedWt = DefoliatedWt;",
                            "                HarvestedN = DefoliatedN;",
                            "",
                            "                // get amounts actually removed from field and that to be returned (dung/urine)",
                            "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                            "                    fractionDM2Remove = 1.0;",
                            "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                            "                    fractionDM2Remove = 0.0;",
                            "                else",
                            "                {",
                            "                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt",
                            "                    fractionDM2Remove /= removeAmount;",
                            "                }",
                            "                ",
                            "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                            "                RemovedN = HarvestedN * FractionN2Remove;",
                            "                ReturnedWt = HarvestedWt - RemovedWt;",
                            "                ReturnedN = HarvestedN - RemovedN;",
                            "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                            "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                            "            }",
                            "        }",
                            "",
                            "        // Return dung and urine",
                            "        private void returnExcreta()",
                            "        {",
                            "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                            "            {",
                            "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                            "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                            "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                            "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                            "                float[] dltp = new float[] { 0 };",
                            "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                            "",
                            "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                            "                BiomassDung.dm_type = type;",
                            "                BiomassDung.dlt_crop_dm = dltdm;",
                            "                BiomassDung.dlt_dm_n = dltn;",
                            "                BiomassDung.dlt_dm_p = dltp;",
                            "                BiomassDung.fraction_to_residue = fraction;",
                            "                BiomassRemoved.Invoke(BiomassDung);",
                            "            }",
                            "",
                            "            if (NReturnedInUrine > 0.0)",
                            "            {",
                            "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using Models.Soils.Nutrients;",
                            "using Models.Interfaces;",
                            "using System.Xml.Serialization;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Fertiliser fertiliser;",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Soil Soil;",
                            "        private DateTime lastApplicationDate;",
                            "        private bool fertiliserIsAllowed;",
                            "        private int nLayers;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NO3;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NH4;",
                            "        [Link(ByName = true)]",
                            "        private ISolute Urea;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn ferliser applications on? \")]",
                            "        public yesnoType AllowFertiliser { get; set; }",
                            "        ",
                            "        [Description(\"Depth to calculate available soil N (mm): \")]",
                            "        public double Depth2SoilN { get; set; }",
                            "",
                            "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                            "        public double CriticalSoilN { get; set; }",
                            "",
                            "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                            "        public double FertNAmount { get; set; }",
                            "",
                            "        [Description(\"Type of N fertiliser to apply: \")]",
                            "        public Fertiliser.Types FertType { get; set; }",
                            "",
                            "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                            "        public double FertApplicationDepth { get; set; }",
                            "       ",
                            "        [Description(\"Minimum period between applications (days): \")]",
                            "        public double FertMinimumDays { get; set; }",
                            "       ",
                            "        public enum yesnoType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        [JsonIgnore] public double TopMineralN { get; set; }",
                            "        ",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {",
                            "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                            "            ",
                            "            // get the N stored in the soil",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopMineralN = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopMineralN += (NO3.kgha[layer]",
                            "                + NH4.kgha[layer]",
                            "                + Urea.kgha[layer])",
                            "                * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= Depth2SoilN)",
                            "                    layer = nLayers;",
                            "            }",
                            "",
                            "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                            "            {",
                            "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                            "                lastApplicationDate = Clock.Today;",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using APSIM.Shared.Utilities;",
                            "using System.Xml.Serialization;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "using Models.Interfaces;",
                            "",
                            "        ",
                            "namespace Models",
                            "{",
                            "    [Serializable] ",
                            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Irrigation Irrigation;",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Soil Soil;",
                            "        [Link(IsOptional = true)] private IPlant existingCrop;",
                            "        private DateTime StartDate;",
                            "        private DateTime EndDate;",
                            "        private double TopDUL;",
                            "        private double TopLL;",
                            "        private int nLayers;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "        [Link]",
                            "        private ISoilWater waterBalance;",
                            "        //Communication to other modules",
                            "       ",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                            "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                            "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                            "        public string seasonStart { get; set; }",
                            "        [Description(\"End of irrigation season (dd-MMM)\")]",
                            "        public string seasonEnd { get; set; }",
                            "        [Description(\"Season allocation (mm)\")]",
                            "        public double seasonsAllocation { get; set; }",
                            "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                            "        public double triggerDeficit { get; set; }",
                            "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                            "        public double targetDeficit { get; set; }",
                            "        [Description(\"Minimum days for irrigation to return\")]",
                            "        public double returndays { get; set; }",
                            "        [Description(\"Maximum irrigation application (mm/day)\")]",
                            "        public double maximumAmount { get; set; }",
                            "        [Description(\"Depth to calculate PAWC (mm)\")]",
                            "        public double depthPAWC { get; set; }",
                            "       ",
                            "        public enum answerType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        //Class members",
                            "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                            "        [JsonIgnore] public double TopSWC { get; set; }",
                            "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                            "        [JsonIgnore] public double AmountToApply { get; set; }",
                            "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                            "        ",
                            "        private bool IrrigationIsAllowed { get; set; }",
                            "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                            "        ",
                            "        private bool SeasonIsOpen { get; set; }",
                            "        private bool CropIsActive { get; set; }",
                            "        private bool IrrigatorIsAvailable { get; set; }",
                            "        private bool SoilIsDry { get; set; }",
                            "",
                            "    ",
                            "        //Calculate static soil variables",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {   ",
                            "            //Set the season dates",
                            "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                            "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                            "            ",
                            "            //Can we irrigate at all?",
                            "            IrrigationIsAllowed = false; ",
                            "            if (allowIrrigation == answerType.yes)",
                            "                IrrigationIsAllowed = true; ",
                            "            if (allowIrrigationAll == answerType.yes)",
                            "                IrrigationIsAlwaysAllowed = true; ",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "            //Calculate soil water variables",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                            "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "        }",
                            "             ",
                            "        //Determine daily requirement for irrigation",
                            "        [EventSubscribe(\"StartOfDay\")]",
                            "        private void OnStartOfDay(object sender, EventArgs e)",
                            "        {",
                            "            //Can we irrigate today?          ",
                            "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                            "",
                            "            //Is there a crop in the ground that needs irrigation?",
                            "            CropIsActive = false;",
                            "            if (IrrigationIsAlwaysAllowed)",
                            "                CropIsActive = true;  // might not be but we don't care",
                            "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                            "                CropIsActive = true;",
                            "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                            "          ",
                            "            //Is the irrigator available?",
                            "            IrrigatorIsAvailable = false;",
                            "            DaysSinceIrrigation += 1;",
                            "            if (DaysSinceIrrigation >= returndays)",
                            "                IrrigatorIsAvailable = true;",
                            "          ",
                            "            //Is the soil dry enough to require irrigation?",
                            "            SoilIsDry = false;",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopSWC = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "            ",
                            "            TopSWdeficit = TopSWC - TopDUL;",
                            "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                            "                SoilIsDry = true;",
                            "                ",
                            "            //Are all the conditions ratifying irrigation",
                            "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                            "            {",
                            "                //Lets bloody well irrigate then!!!!",
                            "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                            "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                            "                Irrigation.Apply(AmountToApply);",
                            "                DaysSinceIrrigation = 0;",
                            "                SeasonAppliedAmount += AmountToApply;",
                            "            }",
                            "        }",
                            "        ",
                            "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                            "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                            "        {",
                            "            bool result = false;",
                            "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                            "            {",
                            "                // period is within one year, ex: summer in the northern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            else",
                            "            {",
                            "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            ",
                            "            return result;",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "ResourceName": "Fertiliser",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "SurfOM": [],
                      "Canopies": [],
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "Name": "SurfaceOrganicMatter",
                      "ResourceName": "SurfaceOrganicMatter",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "PHUnits": 0,
                          "EC": null,
                          "ESP": null,
                          "CEC": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "PSIDul": -100.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "Name": "SoilWater",
                          "ResourceName": "WaterBalance",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Nutrients.Nutrient, Models",
                          "Name": "Nutrient",
                          "ResourceName": "Nutrient",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "CarbonUnits": 0,
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Water, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.4325,
                            0.4325,
                            0.4325,
                            0.4325
                          ],
                          "InitialPAWmm": 199.5,
                          "RelativeTo": "LL15",
                          "FilledFromTop": false,
                          "Name": "Water",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            5.0,
                            5.0,
                            5.0,
                            5.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NO3",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NH4",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 1,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "Urea",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "doyGermination": 275,
                      "daysEmergenceToAnthesis": 120,
                      "daysAnthesisToMaturity": 85,
                      "degreesDayForAnthesis": 1100.0,
                      "degreesDayForMaturity": 900.0,
                      "daysAnnualsFactor": 45,
                      "FVPDFunction": {
                        "$type": "Models.Functions.LinearInterpolationFunction, Models",
                        "Name": "LinearInterpolationFunction",
                        "ResourceName": null,
                        "Children": [],
                        "Enabled": true,
                        "ReadOnly": false
                      },
                      "LightProfile": null,
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "initialDMFractionsGrasses": [
                        0.15,
                        0.25,
                        0.25,
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "initialDMFractionsLegumes": [
                        0.16,
                        0.23,
                        0.22,
                        0.05,
                        0.03,
                        0.05,
                        0.05,
                        0.01,
                        0.04,
                        0.08,
                        0.08
                      ],
                      "initialDMFractionsForbs": [
                        0.2,
                        0.2,
                        0.15,
                        0.05,
                        0.1,
                        0.15,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "PhotosyntheticEfficiency": 0.01,
                      "PhotosynthesisCurveFactor": 0.8,
                      "FractionPAR": 0.5,
                      "ReferenceCO2": 380.0,
                      "CO2EffectScaleFactor": 700.0,
                      "CO2EffectOffsetFactor": 600.0,
                      "CO2EffectMinimum": 0.7,
                      "CO2EffectExponent": 2.0,
                      "ReproSeasonDurationCoeff": 2.0,
                      "ReproSeasonShouldersLengthFactor": 1.0,
                      "ReproSeasonOnsetDurationFactor": 0.6,
                      "RelativeTurnoverEmerging": 2.0,
                      "DetachmentDroughtCoefficient": 3.0,
                      "DetachmentDroughtEffectMin": 0.1,
                      "TurnoverStockFactor": 0.01,
                      "TurnoverDefoliationEffectMin": 0.025,
                      "MinimumGreenLeafProp": 0.8,
                      "MinimumGreenRootProp": 0.5,
                      "Name": "AGPRyegrass",
                      "ResourceName": "AGPRyegrass",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].Water.MM) as SoilWater",
                        "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialUniformSoilN",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System.Xml.Serialization;",
                            "using System.Collections.Generic;",
                            "using System;",
                            "using System.Linq;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }",
                            "        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "",
                            "        // - Internal variables",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            int SpeciesNum = 0;",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                SpeciesNum += 1;",
                            "                if (SpeciesNum == 1)",
                            "                {",
                            "                    if (Zone0Prop > 0)",
                            "                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);",
                            "                    if (Zone2Prop > 0)",
                            "                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);",
                            "                }",
                            "            }",
                            "",
                            "            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);",
                            "            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone0"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0.3"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone2"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0.3"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using System.Linq;",
                            "using System;",
                            "using System.Collections.Generic;",
                            "using System.Xml.Serialization;",
                            "using Models.Core;",
                            "using Models.PMF;",
                            "using APSIM.Shared.Utilities;",
                            "using Newtonsoft.Json;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] Fertiliser fertiliser;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Date to begin the rotation: \")]",
                            "        public DateTime CutRotationStartDate { get; set; }",
                            "",
                            "        [Description(\"Date to finish the rotation: \")]",
                            "        public DateTime CutRotationEndDate { get; set; }",
                            "",
                            "        [Description(\"Rotation interval (days): \")]",
                            "        public int CutInterval { get; set; }",
                            "",
                            "        [Description(\"How the interval is defined: \")]",
                            "        public rotationIntervalTypes IntervalType { get; set; }",
                            "",
                            "        [Description(\"Duration of each event (days): \")]",
                            "        public int DurationOfCut { get; set; }",
                            "",
                            "        [Description(\"What amount is being defined: \")]",
                            "        public removeAmountTypes RemoveAmountType { get; set; }",
                            "",
                            "        [Description(\"Amount to use (kg/ha): \")]",
                            "        public double AmountGiven { get; set; }",
                            "",
                            "        [Description(\"Fraction of DM that is removed from the field:\")]",
                            "        public removeDMTypes DMRemoveType { get; set; }",
                            "",
                            "        [Description(\"Fraction of N that is removed from the field (0-1):\")]",
                            "        public double FractionN2Remove { get; set; }",
                            "",
                            "        [Description(\"Proportion of N returned in dung (0-1):\")]",
                            "        public double ProportionN2Dung { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today",
                            "        public double DefoliatedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today",
                            "        public double DefoliatedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today",
                            "        public double HarvestedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today",
                            "        public double HarvestedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field",
                            "        public double RemovedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field",
                            "        public double RemovedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field",
                            "        public double ReturnedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field",
                            "        public double ReturnedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)",
                            "        public double NReturnedInDung { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)",
                            "        public double NReturnedInUrine { get; set; }",
                            "        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation",
                            "        public int DaysAfterCut { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                            "        public double PreHarvestDM { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                            "        public double PostHarvestDM { get; set; }",
                            "        ",
                            "        // - Internal variables",
                            "        // fraction of harvested Dm to actually remove from field",
                            "        private double fractionDM2Remove = 1.0;",
                            "        // flag whether defoliation is allowed",
                            "        private bool rotationAllowed = true;",
                            "        // number of days for each defoliation event",
                            "        private int cuttingDuration = 0;",
                            "        // counter for day within each defoliation",
                            "        private int daysCutting = 0;",
                            "        // type of interval (Fixed or target)",
                            "        private string intervalType;",
                            "        // total herbage to remove in g/m2 per day",
                            "        private double herbageToRemove;",
                            "        // type of DM amount (ResidualDM or DMToRemove)",
                            "        private string amountType;",
                            "        // auxiliary flag for defoliation",
                            "        private bool aCutHasHappened = false;",
                            "",
                            "        // - Event to add residue or dung to surface OM",
                            "        public event BiomassRemovedDelegate BiomassRemoved;",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                Pasture.Add(species);",
                            "            }",
                            "",
                            "            // reset variables",
                            "            DaysAfterCut = 0;",
                            "            resetVariables();",
                            "            cuttingDuration = DurationOfCut;",
                            "            ",
                            "            // get the type of amount given",
                            "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                            "                amountType = \"SetResidueAmount\";",
                            "            else",
                            "                amountType = \"SetRemoveAmount\";",
                            "",
                            "            // get the type of amount given",
                            "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                            "                intervalType = \"Fixed\";",
                            "            else",
                            "                intervalType = \"Target\";",
                            "",
                            "            // make sure that rotation start when startDate < simulationStartDay",
                            "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                            "                CutRotationStartDate = Clock.Today;",
                            "        }",
                            "        ",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            if (rotationAllowed)",
                            "            {",
                            "                if (Clock.Today == CutRotationStartDate)",
                            "                    DaysAfterCut = CutInterval;",
                            "",
                            "                // Check whether we can defoliate",
                            "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))",
                            "                {",
                            "                    // Check whether we should start a defoliation",
                            "                    if (DaysAfterCut >= (CutInterval - 1))",
                            "                    {",
                            "                        Graze(AmountGiven, amountType, DurationOfCut);",
                            "                    }",
                            "                }",
                            "            }",
                            "",
                            "            // Check whether we need to continue cutting",
                            "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                            "            {",
                            "                // reset outputs",
                            "                resetVariables();",
                            "",
                            "                removeDM(herbageToRemove);",
                            "                returnExcreta();",
                            "                daysCutting += 1;",
                            "                if (daysCutting == cuttingDuration)",
                            "                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt",
                            "            }",
                            "",
                            "            // reset outputs",
                            "            if (daysCutting < 0)",
                            "            {",
                            "                resetVariables();",
                            "                daysCutting = 0;",
                            "            }",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagementCalculations\")]",
                            "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                            "        {",
                            "            // Check whether a cutting has finished",
                            "            if (daysCutting == cuttingDuration)",
                            "            {",
                            "                aCutHasHappened = true;",
                            "                daysCutting = -1;",
                            "            }",
                            "",
                            "            // Increase the counter for days after cutting",
                            "            if (aCutHasHappened && (daysCutting == 0))",
                            "                DaysAfterCut += 1;",
                            "        }",
                            "",
                            "        public enum removeAmountTypes",
                            "        {",
                            "            /// <summary>Setting DM amount to remove</summary>",
                            "            DMToRemove,",
                            "            /// <summary>Setting residual DM amount</summary>",
                            "            ResidualDM",
                            "        }",
                            "",
                            "        public enum rotationIntervalTypes",
                            "        {",
                            "            /// <summary>Setting a fixed interval</summary>",
                            "            FixedInterval,",
                            "            /// <summary>Setting a target (minimum) inteval</summary>",
                            "            TargetInterval",
                            "        }",
                            "",
                            "        public enum removeDMTypes",
                            "        {",
                            "            /// <summary>Remove all DM</summary>",
                            "            RemoveAll,",
                            "            /// <summary>Remove no DM</summary>",
                            "            RemoveNone,",
                            "            /// <summary>Remove a fraction based on digestibility</summary>",
                            "            BasedOnDigestibility",
                            "        }",
                            "",
                            "        // Resets the values of all outputs",
                            "        private void resetVariables()",
                            "        {",
                            "            DefoliatedWt = 0.0;",
                            "            DefoliatedN = 0.0;",
                            "            HarvestedWt = 0.0;",
                            "            HarvestedN = 0.0;",
                            "            RemovedWt = 0.0;",
                            "            RemovedN = 0.0;",
                            "            ReturnedWt = 0.0;",
                            "            ReturnedN = 0.0;",
                            "            NReturnedInDung = 0.0;",
                            "            NReturnedInUrine = 0.0;",
                            "        }",
                            "",
                            "        // Description: Perform the basic calculations for defoliation",
                            "        public void Graze(double amountDM, string amountType, int duration)",
                            "        {",
                            "            // Get the existing plant amount",
                            "            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "            ",
                            "            // Check the amount to remove and print some info",
                            "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = amountDM / duration;",
                            "            }",
                            "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                            "            }",
                            "            else",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                            "                if (intervalType == \"Fixed\")",
                            "                    DaysAfterCut = -duration;",
                            "                return;",
                            "            }",
                            "",
                            "            cuttingDuration = duration;",
                            "            // Preform first defoliation",
                            "            removeDM(herbageToRemove);",
                            "            returnExcreta();",
                            "            daysCutting = 1;",
                            "            DaysAfterCut = 0;",
                            "            if (daysCutting == cuttingDuration)",
                            "                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "        }",
                            "",
                            "        // Do the DM removal",
                            "        private void removeDM(double removeAmount)",
                            "        {",
                            "            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt",
                            "",
                            "            // Check whether we harvest anything",
                            "            if (existingWt >= removeAmount)",
                            "            {",
                            "                foreach (AgPasture.PastureSpecies species in Pasture)",
                            "                {",
                            "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                            "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                            "                }",
                            "                ",
                            "                // get total harvested",
                            "                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt",
                            "                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN",
                            "                HarvestedWt = DefoliatedWt;",
                            "                HarvestedN = DefoliatedN;",
                            "",
                            "                // get amounts actually removed from field and that to be returned (dung/urine)",
                            "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                            "                    fractionDM2Remove = 1.0;",
                            "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                            "                    fractionDM2Remove = 0.0;",
                            "                else",
                            "                {",
                            "                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt",
                            "                    fractionDM2Remove /= removeAmount;",
                            "                }",
                            "                ",
                            "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                            "                RemovedN = HarvestedN * FractionN2Remove;",
                            "                ReturnedWt = HarvestedWt - RemovedWt;",
                            "                ReturnedN = HarvestedN - RemovedN;",
                            "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                            "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                            "            }",
                            "        }",
                            "",
                            "        // Return dung and urine",
                            "        private void returnExcreta()",
                            "        {",
                            "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                            "            {",
                            "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                            "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                            "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                            "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                            "                float[] dltp = new float[] { 0 };",
                            "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                            "",
                            "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                            "                BiomassDung.dm_type = type;",
                            "                BiomassDung.dlt_crop_dm = dltdm;",
                            "                BiomassDung.dlt_dm_n = dltn;",
                            "                BiomassDung.dlt_dm_p = dltp;",
                            "                BiomassDung.fraction_to_residue = fraction;",
                            "                BiomassRemoved.Invoke(BiomassDung);",
                            "            }",
                            "",
                            "            if (NReturnedInUrine > 0.0)",
                            "            {",
                            "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using Models.Soils.Nutrients;",
                            "using Models.Interfaces;",
                            "using System.Xml.Serialization;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Fertiliser fertiliser;",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Soil Soil;",
                            "        private DateTime lastApplicationDate;",
                            "        private bool fertiliserIsAllowed;",
                            "        private int nLayers;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NO3;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NH4;",
                            "        [Link(ByName = true)]",
                            "        private ISolute Urea;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn ferliser applications on? \")]",
                            "        public yesnoType AllowFertiliser { get; set; }",
                            "        ",
                            "        [Description(\"Depth to calculate available soil N (mm): \")]",
                            "        public double Depth2SoilN { get; set; }",
                            "",
                            "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                            "        public double CriticalSoilN { get; set; }",
                            "",
                            "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                            "        public double FertNAmount { get; set; }",
                            "",
                            "        [Description(\"Type of N fertiliser to apply: \")]",
                            "        public Fertiliser.Types FertType { get; set; }",
                            "",
                            "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                            "        public double FertApplicationDepth { get; set; }",
                            "       ",
                            "        [Description(\"Minimum period between applications (days): \")]",
                            "        public double FertMinimumDays { get; set; }",
                            "       ",
                            "        public enum yesnoType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        [JsonIgnore] public double TopMineralN { get; set; }",
                            "        ",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {",
                            "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                            "            ",
                            "            // get the N stored in the soil",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopMineralN = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopMineralN += (NO3.kgha[layer]",
                            "                + NH4.kgha[layer]",
                            "                + Urea.kgha[layer])",
                            "                * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= Depth2SoilN)",
                            "                    layer = nLayers;",
                            "            }",
                            "",
                            "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                            "            {",
                            "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                            "                lastApplicationDate = Clock.Today;",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using APSIM.Shared.Utilities;",
                            "using System.Xml.Serialization;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "using Models.Interfaces;",
                            "",
                            "        ",
                            "namespace Models",
                            "{",
                            "    [Serializable] ",
                            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Irrigation Irrigation;",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Soil Soil;",
                            "        [Link(IsOptional = true)] private IPlant existingCrop;",
                            "        private DateTime StartDate;",
                            "        private DateTime EndDate;",
                            "        private double TopDUL;",
                            "        private double TopLL;",
                            "        private int nLayers;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "        [Link]",
                            "        private ISoilWater waterBalance;",
                            "        //Communication to other modules",
                            "       ",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                            "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                            "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                            "        public string seasonStart { get; set; }",
                            "        [Description(\"End of irrigation season (dd-MMM)\")]",
                            "        public string seasonEnd { get; set; }",
                            "        [Description(\"Season allocation (mm)\")]",
                            "        public double seasonsAllocation { get; set; }",
                            "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                            "        public double triggerDeficit { get; set; }",
                            "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                            "        public double targetDeficit { get; set; }",
                            "        [Description(\"Minimum days for irrigation to return\")]",
                            "        public double returndays { get; set; }",
                            "        [Description(\"Maximum irrigation application (mm/day)\")]",
                            "        public double maximumAmount { get; set; }",
                            "        [Description(\"Depth to calculate PAWC (mm)\")]",
                            "        public double depthPAWC { get; set; }",
                            "       ",
                            "        public enum answerType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        //Class members",
                            "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                            "        [JsonIgnore] public double TopSWC { get; set; }",
                            "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                            "        [JsonIgnore] public double AmountToApply { get; set; }",
                            "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                            "        ",
                            "        private bool IrrigationIsAllowed { get; set; }",
                            "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                            "        ",
                            "        private bool SeasonIsOpen { get; set; }",
                            "        private bool CropIsActive { get; set; }",
                            "        private bool IrrigatorIsAvailable { get; set; }",
                            "        private bool SoilIsDry { get; set; }",
                            "",
                            "    ",
                            "        //Calculate static soil variables",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {   ",
                            "            //Set the season dates",
                            "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                            "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                            "            ",
                            "            //Can we irrigate at all?",
                            "            IrrigationIsAllowed = false; ",
                            "            if (allowIrrigation == answerType.yes)",
                            "                IrrigationIsAllowed = true; ",
                            "            if (allowIrrigationAll == answerType.yes)",
                            "                IrrigationIsAlwaysAllowed = true; ",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "            //Calculate soil water variables",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                            "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "        }",
                            "             ",
                            "        //Determine daily requirement for irrigation",
                            "        [EventSubscribe(\"StartOfDay\")]",
                            "        private void OnStartOfDay(object sender, EventArgs e)",
                            "        {",
                            "            //Can we irrigate today?          ",
                            "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                            "",
                            "            //Is there a crop in the ground that needs irrigation?",
                            "            CropIsActive = false;",
                            "            if (IrrigationIsAlwaysAllowed)",
                            "                CropIsActive = true;  // might not be but we don't care",
                            "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                            "                CropIsActive = true;",
                            "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                            "          ",
                            "            //Is the irrigator available?",
                            "            IrrigatorIsAvailable = false;",
                            "            DaysSinceIrrigation += 1;",
                            "            if (DaysSinceIrrigation >= returndays)",
                            "                IrrigatorIsAvailable = true;",
                            "          ",
                            "            //Is the soil dry enough to require irrigation?",
                            "            SoilIsDry = false;",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopSWC = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "            ",
                            "            TopSWdeficit = TopSWC - TopDUL;",
                            "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                            "                SoilIsDry = true;",
                            "                ",
                            "            //Are all the conditions ratifying irrigation",
                            "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                            "            {",
                            "                //Lets bloody well irrigate then!!!!",
                            "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                            "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                            "                Irrigation.Apply(AmountToApply);",
                            "                DaysSinceIrrigation = 0;",
                            "                SeasonAppliedAmount += AmountToApply;",
                            "            }",
                            "        }",
                            "        ",
                            "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                            "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                            "        {",
                            "            bool result = false;",
                            "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                            "            {",
                            "                // period is within one year, ex: summer in the northern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            else",
                            "            {",
                            "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            ",
                            "            return result;",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "ResourceName": "Fertiliser",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "SurfOM": [],
                      "Canopies": [],
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "Name": "SurfaceOrganicMatter",
                      "ResourceName": "SurfaceOrganicMatter",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "PHUnits": 0,
                          "EC": null,
                          "ESP": null,
                          "CEC": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "PSIDul": -100.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "Name": "SoilWater",
                          "ResourceName": "WaterBalance",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Nutrients.Nutrient, Models",
                          "Name": "Nutrient",
                          "ResourceName": "Nutrient",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "CarbonUnits": 0,
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Water, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.4325,
                            0.4325,
                            0.4325,
                            0.4325
                          ],
                          "InitialPAWmm": 199.5,
                          "RelativeTo": "LL15",
                          "FilledFromTop": false,
                          "Name": "Water",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            5.0,
                            5.0,
                            5.0,
                            5.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NO3",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NH4",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 1,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "Urea",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "doyGermination": 275,
                      "daysEmergenceToAnthesis": 120,
                      "daysAnthesisToMaturity": 85,
                      "degreesDayForAnthesis": 1100.0,
                      "degreesDayForMaturity": 900.0,
                      "daysAnnualsFactor": 45,
                      "FVPDFunction": {
                        "$type": "Models.Functions.LinearInterpolationFunction, Models",
                        "Name": "LinearInterpolationFunction",
                        "ResourceName": null,
                        "Children": [],
                        "Enabled": true,
                        "ReadOnly": false
                      },
                      "LightProfile": null,
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "initialDMFractionsGrasses": [
                        0.15,
                        0.25,
                        0.25,
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "initialDMFractionsLegumes": [
                        0.16,
                        0.23,
                        0.22,
                        0.05,
                        0.03,
                        0.05,
                        0.05,
                        0.01,
                        0.04,
                        0.08,
                        0.08
                      ],
                      "initialDMFractionsForbs": [
                        0.2,
                        0.2,
                        0.15,
                        0.05,
                        0.1,
                        0.15,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "PhotosyntheticEfficiency": 0.01,
                      "PhotosynthesisCurveFactor": 0.8,
                      "FractionPAR": 0.5,
                      "ReferenceCO2": 380.0,
                      "CO2EffectScaleFactor": 700.0,
                      "CO2EffectOffsetFactor": 600.0,
                      "CO2EffectMinimum": 0.7,
                      "CO2EffectExponent": 2.0,
                      "ReproSeasonDurationCoeff": 2.0,
                      "ReproSeasonShouldersLengthFactor": 1.0,
                      "ReproSeasonOnsetDurationFactor": 0.6,
                      "RelativeTurnoverEmerging": 2.0,
                      "DetachmentDroughtCoefficient": 3.0,
                      "DetachmentDroughtEffectMin": 0.1,
                      "TurnoverStockFactor": 0.01,
                      "TurnoverDefoliationEffectMin": 0.025,
                      "MinimumGreenLeafProp": 0.8,
                      "MinimumGreenRootProp": 0.5,
                      "Name": "AGPRyegrass",
                      "ResourceName": "AGPRyegrass",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].Water.MM) as SoilWater",
                        "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialUniformSoilN",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System.Xml.Serialization;",
                            "using System.Collections.Generic;",
                            "using System;",
                            "using System.Linq;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }",
                            "        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "",
                            "        // - Internal variables",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            int SpeciesNum = 0;",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                SpeciesNum += 1;",
                            "                if (SpeciesNum == 1)",
                            "                {",
                            "                    if (Zone0Prop > 0)",
                            "                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);",
                            "                    if (Zone2Prop > 0)",
                            "                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);",
                            "                }",
                            "            }",
                            "",
                            "            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);",
                            "            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone1"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone2"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using System.Linq;",
                            "using System;",
                            "using System.Collections.Generic;",
                            "using System.Xml.Serialization;",
                            "using Models.Core;",
                            "using Models.PMF;",
                            "using APSIM.Shared.Utilities;",
                            "using Newtonsoft.Json;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] Fertiliser fertiliser;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Date to begin the rotation: \")]",
                            "        public DateTime CutRotationStartDate { get; set; }",
                            "",
                            "        [Description(\"Date to finish the rotation: \")]",
                            "        public DateTime CutRotationEndDate { get; set; }",
                            "",
                            "        [Description(\"Rotation interval (days): \")]",
                            "        public int CutInterval { get; set; }",
                            "",
                            "        [Description(\"How the interval is defined: \")]",
                            "        public rotationIntervalTypes IntervalType { get; set; }",
                            "",
                            "        [Description(\"Duration of each event (days): \")]",
                            "        public int DurationOfCut { get; set; }",
                            "",
                            "        [Description(\"What amount is being defined: \")]",
                            "        public removeAmountTypes RemoveAmountType { get; set; }",
                            "",
                            "        [Description(\"Amount to use (kg/ha): \")]",
                            "        public double AmountGiven { get; set; }",
                            "",
                            "        [Description(\"Fraction of DM that is removed from the field:\")]",
                            "        public removeDMTypes DMRemoveType { get; set; }",
                            "",
                            "        [Description(\"Fraction of N that is removed from the field (0-1):\")]",
                            "        public double FractionN2Remove { get; set; }",
                            "",
                            "        [Description(\"Proportion of N returned in dung (0-1):\")]",
                            "        public double ProportionN2Dung { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today",
                            "        public double DefoliatedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today",
                            "        public double DefoliatedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today",
                            "        public double HarvestedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today",
                            "        public double HarvestedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field",
                            "        public double RemovedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field",
                            "        public double RemovedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field",
                            "        public double ReturnedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field",
                            "        public double ReturnedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)",
                            "        public double NReturnedInDung { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)",
                            "        public double NReturnedInUrine { get; set; }",
                            "        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation",
                            "        public int DaysAfterCut { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                            "        public double PreHarvestDM { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                            "        public double PostHarvestDM { get; set; }",
                            "        ",
                            "        // - Internal variables",
                            "        // fraction of harvested Dm to actually remove from field",
                            "        private double fractionDM2Remove = 1.0;",
                            "        // flag whether defoliation is allowed",
                            "        private bool rotationAllowed = true;",
                            "        // number of days for each defoliation event",
                            "        private int cuttingDuration = 0;",
                            "        // counter for day within each defoliation",
                            "        private int daysCutting = 0;",
                            "        // type of interval (Fixed or target)",
                            "        private string intervalType;",
                            "        // total herbage to remove in g/m2 per day",
                            "        private double herbageToRemove;",
                            "        // type of DM amount (ResidualDM or DMToRemove)",
                            "        private string amountType;",
                            "        // auxiliary flag for defoliation",
                            "        private bool aCutHasHappened = false;",
                            "",
                            "        // - Event to add residue or dung to surface OM",
                            "        public event BiomassRemovedDelegate BiomassRemoved;",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                Pasture.Add(species);",
                            "            }",
                            "",
                            "            // reset variables",
                            "            DaysAfterCut = 0;",
                            "            resetVariables();",
                            "            cuttingDuration = DurationOfCut;",
                            "            ",
                            "            // get the type of amount given",
                            "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                            "                amountType = \"SetResidueAmount\";",
                            "            else",
                            "                amountType = \"SetRemoveAmount\";",
                            "",
                            "            // get the type of amount given",
                            "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                            "                intervalType = \"Fixed\";",
                            "            else",
                            "                intervalType = \"Target\";",
                            "",
                            "            // make sure that rotation start when startDate < simulationStartDay",
                            "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                            "                CutRotationStartDate = Clock.Today;",
                            "        }",
                            "        ",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            if (rotationAllowed)",
                            "            {",
                            "                if (Clock.Today == CutRotationStartDate)",
                            "                    DaysAfterCut = CutInterval;",
                            "",
                            "                // Check whether we can defoliate",
                            "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))",
                            "                {",
                            "                    // Check whether we should start a defoliation",
                            "                    if (DaysAfterCut >= (CutInterval - 1))",
                            "                    {",
                            "                        Graze(AmountGiven, amountType, DurationOfCut);",
                            "                    }",
                            "                }",
                            "            }",
                            "",
                            "            // Check whether we need to continue cutting",
                            "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                            "            {",
                            "                // reset outputs",
                            "                resetVariables();",
                            "",
                            "                removeDM(herbageToRemove);",
                            "                returnExcreta();",
                            "                daysCutting += 1;",
                            "                if (daysCutting == cuttingDuration)",
                            "                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt",
                            "            }",
                            "",
                            "            // reset outputs",
                            "            if (daysCutting < 0)",
                            "            {",
                            "                resetVariables();",
                            "                daysCutting = 0;",
                            "            }",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagementCalculations\")]",
                            "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                            "        {",
                            "            // Check whether a cutting has finished",
                            "            if (daysCutting == cuttingDuration)",
                            "            {",
                            "                aCutHasHappened = true;",
                            "                daysCutting = -1;",
                            "            }",
                            "",
                            "            // Increase the counter for days after cutting",
                            "            if (aCutHasHappened && (daysCutting == 0))",
                            "                DaysAfterCut += 1;",
                            "        }",
                            "",
                            "        public enum removeAmountTypes",
                            "        {",
                            "            /// <summary>Setting DM amount to remove</summary>",
                            "            DMToRemove,",
                            "            /// <summary>Setting residual DM amount</summary>",
                            "            ResidualDM",
                            "        }",
                            "",
                            "        public enum rotationIntervalTypes",
                            "        {",
                            "            /// <summary>Setting a fixed interval</summary>",
                            "            FixedInterval,",
                            "            /// <summary>Setting a target (minimum) inteval</summary>",
                            "            TargetInterval",
                            "        }",
                            "",
                            "        public enum removeDMTypes",
                            "        {",
                            "            /// <summary>Remove all DM</summary>",
                            "            RemoveAll,",
                            "            /// <summary>Remove no DM</summary>",
                            "            RemoveNone,",
                            "            /// <summary>Remove a fraction based on digestibility</summary>",
                            "            BasedOnDigestibility",
                            "        }",
                            "",
                            "        // Resets the values of all outputs",
                            "        private void resetVariables()",
                            "        {",
                            "            DefoliatedWt = 0.0;",
                            "            DefoliatedN = 0.0;",
                            "            HarvestedWt = 0.0;",
                            "            HarvestedN = 0.0;",
                            "            RemovedWt = 0.0;",
                            "            RemovedN = 0.0;",
                            "            ReturnedWt = 0.0;",
                            "            ReturnedN = 0.0;",
                            "            NReturnedInDung = 0.0;",
                            "            NReturnedInUrine = 0.0;",
                            "        }",
                            "",
                            "        // Description: Perform the basic calculations for defoliation",
                            "        public void Graze(double amountDM, string amountType, int duration)",
                            "        {",
                            "            // Get the existing plant amount",
                            "            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "            ",
                            "            // Check the amount to remove and print some info",
                            "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = amountDM / duration;",
                            "            }",
                            "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                            "            }",
                            "            else",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                            "                if (intervalType == \"Fixed\")",
                            "                    DaysAfterCut = -duration;",
                            "                return;",
                            "            }",
                            "",
                            "            cuttingDuration = duration;",
                            "            // Preform first defoliation",
                            "            removeDM(herbageToRemove);",
                            "            returnExcreta();",
                            "            daysCutting = 1;",
                            "            DaysAfterCut = 0;",
                            "            if (daysCutting == cuttingDuration)",
                            "                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "        }",
                            "",
                            "        // Do the DM removal",
                            "        private void removeDM(double removeAmount)",
                            "        {",
                            "            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt",
                            "",
                            "            // Check whether we harvest anything",
                            "            if (existingWt >= removeAmount)",
                            "            {",
                            "                foreach (AgPasture.PastureSpecies species in Pasture)",
                            "                {",
                            "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                            "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                            "                }",
                            "                ",
                            "                // get total harvested",
                            "                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt",
                            "                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN",
                            "                HarvestedWt = DefoliatedWt;",
                            "                HarvestedN = DefoliatedN;",
                            "",
                            "                // get amounts actually removed from field and that to be returned (dung/urine)",
                            "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                            "                    fractionDM2Remove = 1.0;",
                            "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                            "                    fractionDM2Remove = 0.0;",
                            "                else",
                            "                {",
                            "                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt",
                            "                    fractionDM2Remove /= removeAmount;",
                            "                }",
                            "                ",
                            "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                            "                RemovedN = HarvestedN * FractionN2Remove;",
                            "                ReturnedWt = HarvestedWt - RemovedWt;",
                            "                ReturnedN = HarvestedN - RemovedN;",
                            "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                            "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                            "            }",
                            "        }",
                            "",
                            "        // Return dung and urine",
                            "        private void returnExcreta()",
                            "        {",
                            "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                            "            {",
                            "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                            "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                            "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                            "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                            "                float[] dltp = new float[] { 0 };",
                            "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                            "",
                            "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                            "                BiomassDung.dm_type = type;",
                            "                BiomassDung.dlt_crop_dm = dltdm;",
                            "                BiomassDung.dlt_dm_n = dltn;",
                            "                BiomassDung.dlt_dm_p = dltp;",
                            "                BiomassDung.fraction_to_residue = fraction;",
                            "                BiomassRemoved.Invoke(BiomassDung);",
                            "            }",
                            "",
                            "            if (NReturnedInUrine > 0.0)",
                            "            {",
                            "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using Models.Soils.Nutrients;",
                            "using Models.Interfaces;",
                            "using System.Xml.Serialization;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Fertiliser fertiliser;",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Soil Soil;",
                            "        private DateTime lastApplicationDate;",
                            "        private bool fertiliserIsAllowed;",
                            "        private int nLayers;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NO3;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NH4;",
                            "        [Link(ByName = true)]",
                            "        private ISolute Urea;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn ferliser applications on? \")]",
                            "        public yesnoType AllowFertiliser { get; set; }",
                            "        ",
                            "        [Description(\"Depth to calculate available soil N (mm): \")]",
                            "        public double Depth2SoilN { get; set; }",
                            "",
                            "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                            "        public double CriticalSoilN { get; set; }",
                            "",
                            "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                            "        public double FertNAmount { get; set; }",
                            "",
                            "        [Description(\"Type of N fertiliser to apply: \")]",
                            "        public Fertiliser.Types FertType { get; set; }",
                            "",
                            "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                            "        public double FertApplicationDepth { get; set; }",
                            "       ",
                            "        [Description(\"Minimum period between applications (days): \")]",
                            "        public double FertMinimumDays { get; set; }",
                            "       ",
                            "        public enum yesnoType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        [JsonIgnore] public double TopMineralN { get; set; }",
                            "        ",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {",
                            "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                            "            ",
                            "            // get the N stored in the soil",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopMineralN = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopMineralN += (NO3.kgha[layer]",
                            "                + NH4.kgha[layer]",
                            "                + Urea.kgha[layer])",
                            "                * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= Depth2SoilN)",
                            "                    layer = nLayers;",
                            "            }",
                            "",
                            "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                            "            {",
                            "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                            "                lastApplicationDate = Clock.Today;",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using APSIM.Shared.Utilities;",
                            "using System.Xml.Serialization;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "using Models.Interfaces;",
                            "",
                            "        ",
                            "namespace Models",
                            "{",
                            "    [Serializable] ",
                            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Irrigation Irrigation;",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Soil Soil;",
                            "        [Link(IsOptional = true)] private IPlant existingCrop;",
                            "        private DateTime StartDate;",
                            "        private DateTime EndDate;",
                            "        private double TopDUL;",
                            "        private double TopLL;",
                            "        private int nLayers;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "        [Link]",
                            "        private ISoilWater waterBalance;",
                            "        //Communication to other modules",
                            "       ",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                            "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                            "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                            "        public string seasonStart { get; set; }",
                            "        [Description(\"End of irrigation season (dd-MMM)\")]",
                            "        public string seasonEnd { get; set; }",
                            "        [Description(\"Season allocation (mm)\")]",
                            "        public double seasonsAllocation { get; set; }",
                            "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                            "        public double triggerDeficit { get; set; }",
                            "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                            "        public double targetDeficit { get; set; }",
                            "        [Description(\"Minimum days for irrigation to return\")]",
                            "        public double returndays { get; set; }",
                            "        [Description(\"Maximum irrigation application (mm/day)\")]",
                            "        public double maximumAmount { get; set; }",
                            "        [Description(\"Depth to calculate PAWC (mm)\")]",
                            "        public double depthPAWC { get; set; }",
                            "       ",
                            "        public enum answerType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        //Class members",
                            "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                            "        [JsonIgnore] public double TopSWC { get; set; }",
                            "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                            "        [JsonIgnore] public double AmountToApply { get; set; }",
                            "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                            "        ",
                            "        private bool IrrigationIsAllowed { get; set; }",
                            "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                            "        ",
                            "        private bool SeasonIsOpen { get; set; }",
                            "        private bool CropIsActive { get; set; }",
                            "        private bool IrrigatorIsAvailable { get; set; }",
                            "        private bool SoilIsDry { get; set; }",
                            "",
                            "    ",
                            "        //Calculate static soil variables",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {   ",
                            "            //Set the season dates",
                            "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                            "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                            "            ",
                            "            //Can we irrigate at all?",
                            "            IrrigationIsAllowed = false; ",
                            "            if (allowIrrigation == answerType.yes)",
                            "                IrrigationIsAllowed = true; ",
                            "            if (allowIrrigationAll == answerType.yes)",
                            "                IrrigationIsAlwaysAllowed = true; ",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "            //Calculate soil water variables",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                            "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "        }",
                            "             ",
                            "        //Determine daily requirement for irrigation",
                            "        [EventSubscribe(\"StartOfDay\")]",
                            "        private void OnStartOfDay(object sender, EventArgs e)",
                            "        {",
                            "            //Can we irrigate today?          ",
                            "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                            "",
                            "            //Is there a crop in the ground that needs irrigation?",
                            "            CropIsActive = false;",
                            "            if (IrrigationIsAlwaysAllowed)",
                            "                CropIsActive = true;  // might not be but we don't care",
                            "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                            "                CropIsActive = true;",
                            "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                            "          ",
                            "            //Is the irrigator available?",
                            "            IrrigatorIsAvailable = false;",
                            "            DaysSinceIrrigation += 1;",
                            "            if (DaysSinceIrrigation >= returndays)",
                            "                IrrigatorIsAvailable = true;",
                            "          ",
                            "            //Is the soil dry enough to require irrigation?",
                            "            SoilIsDry = false;",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopSWC = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "            ",
                            "            TopSWdeficit = TopSWC - TopDUL;",
                            "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                            "                SoilIsDry = true;",
                            "                ",
                            "            //Are all the conditions ratifying irrigation",
                            "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                            "            {",
                            "                //Lets bloody well irrigate then!!!!",
                            "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                            "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                            "                Irrigation.Apply(AmountToApply);",
                            "                DaysSinceIrrigation = 0;",
                            "                SeasonAppliedAmount += AmountToApply;",
                            "            }",
                            "        }",
                            "        ",
                            "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                            "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                            "        {",
                            "            bool result = false;",
                            "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                            "            {",
                            "                // period is within one year, ex: summer in the northern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            else",
                            "            {",
                            "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            ",
                            "            return result;",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "ResourceName": "Fertiliser",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "SurfOM": [],
                      "Canopies": [],
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "Name": "SurfaceOrganicMatter",
                      "ResourceName": "SurfaceOrganicMatter",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "PHUnits": 0,
                          "EC": null,
                          "ESP": null,
                          "CEC": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "PSIDul": -100.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "Name": "SoilWater",
                          "ResourceName": "WaterBalance",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Nutrients.Nutrient, Models",
                          "Name": "Nutrient",
                          "ResourceName": "Nutrient",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "CarbonUnits": 0,
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Water, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.4325,
                            0.4325,
                            0.4325,
                            0.4325
                          ],
                          "InitialPAWmm": 199.5,
                          "RelativeTo": "LL15",
                          "FilledFromTop": false,
                          "Name": "Water",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            5.0,
                            5.0,
                            5.0,
                            5.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NO3",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NH4",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 1,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "Urea",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "doyGermination": 275,
                      "daysEmergenceToAnthesis": 120,
                      "daysAnthesisToMaturity": 85,
                      "degreesDayForAnthesis": 1100.0,
                      "degreesDayForMaturity": 900.0,
                      "daysAnnualsFactor": 45,
                      "FVPDFunction": {
                        "$type": "Models.Functions.LinearInterpolationFunction, Models",
                        "Name": "LinearInterpolationFunction",
                        "ResourceName": null,
                        "Children": [],
                        "Enabled": true,
                        "ReadOnly": false
                      },
                      "LightProfile": null,
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "initialDMFractionsGrasses": [
                        0.15,
                        0.25,
                        0.25,
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "initialDMFractionsLegumes": [
                        0.16,
                        0.23,
                        0.22,
                        0.05,
                        0.03,
                        0.05,
                        0.05,
                        0.01,
                        0.04,
                        0.08,
                        0.08
                      ],
                      "initialDMFractionsForbs": [
                        0.2,
                        0.2,
                        0.15,
                        0.05,
                        0.1,
                        0.15,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "PhotosyntheticEfficiency": 0.01,
                      "PhotosynthesisCurveFactor": 0.8,
                      "FractionPAR": 0.5,
                      "ReferenceCO2": 380.0,
                      "CO2EffectScaleFactor": 700.0,
                      "CO2EffectOffsetFactor": 600.0,
                      "CO2EffectMinimum": 0.7,
                      "CO2EffectExponent": 2.0,
                      "ReproSeasonDurationCoeff": 2.0,
                      "ReproSeasonShouldersLengthFactor": 1.0,
                      "ReproSeasonOnsetDurationFactor": 0.6,
                      "RelativeTurnoverEmerging": 2.0,
                      "DetachmentDroughtCoefficient": 3.0,
                      "DetachmentDroughtEffectMin": 0.1,
                      "TurnoverStockFactor": 0.01,
                      "TurnoverDefoliationEffectMin": 0.025,
                      "MinimumGreenLeafProp": 0.8,
                      "MinimumGreenRootProp": 0.5,
                      "Name": "AGPRyegrass",
                      "ResourceName": "AGPRyegrass",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].Water.MM) as SoilWater",
                        "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialUniformSoilN",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "Conceptual Three Zone Simulation with Initial Nonuniform Soil N",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This simulation differs from the previous only in that Zone0 initially starts with 100 kg of mineral N in the soil. This results in the expected changes in plant performance and depletion of soil N and water.\r\n",
              "Name": "Memo ThreeZoneSimulationInitialNonuniformSoilN",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2600.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PlantWt",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "PlantMass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Harvested",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterDemand",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Demand",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Demand",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Uptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Uptake",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStress",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "glfWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NStress",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "glfNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWater",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogen",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Nitrogen",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationApplied",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserApplied",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Simulation, Models",
              "Descriptors": null,
              "Name": "ThreeZoneSimulationInitialNonuniformSoilN",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Clock, Models",
                  "Start": "2000-01-01T00:00:00",
                  "End": "2000-03-31T00:00:00",
                  "Name": "Clock",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Climate.ControlledEnvironment, Models",
                  "MaxT": 25.0,
                  "MinT": 15.0,
                  "Rain": 0.0,
                  "Radn": 25.0,
                  "PanEvap": 0.0,
                  "VP": 17.0,
                  "Wind": 3.0,
                  "CO2": 350.0,
                  "AirPressure": 1010.0,
                  "DiffuseFraction": 0.0,
                  "Latitude": 0.0,
                  "Longitude": 0.0,
                  "DayLength": 12.0,
                  "SunRise": 0.0,
                  "SunSet": 0.0,
                  "Name": "ControlledEnvironment",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                  "Name": "SoilArbitrator",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Summary, Models",
                  "Verbosity": 100,
                  "Name": "Summary",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone0",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System.Xml.Serialization;",
                            "using System.Collections.Generic;",
                            "using System;",
                            "using System.Linq;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }",
                            "        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "",
                            "        // - Internal variables",
                            "",
                            "        [EventSubscribe(\"FinalInitialise\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            int SpeciesNum = 0;",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                SpeciesNum += 1;",
                            "                if (SpeciesNum == 1)",
                            "                {",
                            "                    if (Zone0Prop > 0)",
                            "                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);",
                            "                    if (Zone2Prop > 0)",
                            "                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);",
                            "                }",
                            "            }",
                            "",
                            "            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);",
                            "            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone0"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone1"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using System.Linq;",
                            "using System;",
                            "using System.Collections.Generic;",
                            "using System.Xml.Serialization;",
                            "using Models.Core;",
                            "using Models.PMF;",
                            "using APSIM.Shared.Utilities;",
                            "using Newtonsoft.Json;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] Fertiliser fertiliser;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Date to begin the rotation: \")]",
                            "        public DateTime CutRotationStartDate { get; set; }",
                            "",
                            "        [Description(\"Date to finish the rotation: \")]",
                            "        public DateTime CutRotationEndDate { get; set; }",
                            "",
                            "        [Description(\"Rotation interval (days): \")]",
                            "        public int CutInterval { get; set; }",
                            "",
                            "        [Description(\"How the interval is defined: \")]",
                            "        public rotationIntervalTypes IntervalType { get; set; }",
                            "",
                            "        [Description(\"Duration of each event (days): \")]",
                            "        public int DurationOfCut { get; set; }",
                            "",
                            "        [Description(\"What amount is being defined: \")]",
                            "        public removeAmountTypes RemoveAmountType { get; set; }",
                            "",
                            "        [Description(\"Amount to use (kg/ha): \")]",
                            "        public double AmountGiven { get; set; }",
                            "",
                            "        [Description(\"Fraction of DM that is removed from the field:\")]",
                            "        public removeDMTypes DMRemoveType { get; set; }",
                            "",
                            "        [Description(\"Fraction of N that is removed from the field (0-1):\")]",
                            "        public double FractionN2Remove { get; set; }",
                            "",
                            "        [Description(\"Proportion of N returned in dung (0-1):\")]",
                            "        public double ProportionN2Dung { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today",
                            "        public double DefoliatedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today",
                            "        public double DefoliatedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today",
                            "        public double HarvestedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today",
                            "        public double HarvestedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field",
                            "        public double RemovedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field",
                            "        public double RemovedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field",
                            "        public double ReturnedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field",
                            "        public double ReturnedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)",
                            "        public double NReturnedInDung { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)",
                            "        public double NReturnedInUrine { get; set; }",
                            "        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation",
                            "        public int DaysAfterCut { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                            "        public double PreHarvestDM { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                            "        public double PostHarvestDM { get; set; }",
                            "        ",
                            "        // - Internal variables",
                            "        // fraction of harvested Dm to actually remove from field",
                            "        private double fractionDM2Remove = 1.0;",
                            "        // flag whether defoliation is allowed",
                            "        private bool rotationAllowed = true;",
                            "        // number of days for each defoliation event",
                            "        private int cuttingDuration = 0;",
                            "        // counter for day within each defoliation",
                            "        private int daysCutting = 0;",
                            "        // type of interval (Fixed or target)",
                            "        private string intervalType;",
                            "        // total herbage to remove in g/m2 per day",
                            "        private double herbageToRemove;",
                            "        // type of DM amount (ResidualDM or DMToRemove)",
                            "        private string amountType;",
                            "        // auxiliary flag for defoliation",
                            "        private bool aCutHasHappened = false;",
                            "",
                            "        // - Event to add residue or dung to surface OM",
                            "        public event BiomassRemovedDelegate BiomassRemoved;",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                Pasture.Add(species);",
                            "            }",
                            "",
                            "            // reset variables",
                            "            DaysAfterCut = 0;",
                            "            resetVariables();",
                            "            cuttingDuration = DurationOfCut;",
                            "            ",
                            "            // get the type of amount given",
                            "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                            "                amountType = \"SetResidueAmount\";",
                            "            else",
                            "                amountType = \"SetRemoveAmount\";",
                            "",
                            "            // get the type of amount given",
                            "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                            "                intervalType = \"Fixed\";",
                            "            else",
                            "                intervalType = \"Target\";",
                            "",
                            "            // make sure that rotation start when startDate < simulationStartDay",
                            "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                            "                CutRotationStartDate = Clock.Today;",
                            "        }",
                            "        ",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            if (rotationAllowed)",
                            "            {",
                            "                if (Clock.Today == CutRotationStartDate)",
                            "                    DaysAfterCut = CutInterval;",
                            "",
                            "                // Check whether we can defoliate",
                            "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))",
                            "                {",
                            "                    // Check whether we should start a defoliation",
                            "                    if (DaysAfterCut >= (CutInterval - 1))",
                            "                    {",
                            "                        Graze(AmountGiven, amountType, DurationOfCut);",
                            "                    }",
                            "                }",
                            "            }",
                            "",
                            "            // Check whether we need to continue cutting",
                            "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                            "            {",
                            "                // reset outputs",
                            "                resetVariables();",
                            "",
                            "                removeDM(herbageToRemove);",
                            "                returnExcreta();",
                            "                daysCutting += 1;",
                            "                if (daysCutting == cuttingDuration)",
                            "                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt",
                            "            }",
                            "",
                            "            // reset outputs",
                            "            if (daysCutting < 0)",
                            "            {",
                            "                resetVariables();",
                            "                daysCutting = 0;",
                            "            }",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagementCalculations\")]",
                            "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                            "        {",
                            "            // Check whether a cutting has finished",
                            "            if (daysCutting == cuttingDuration)",
                            "            {",
                            "                aCutHasHappened = true;",
                            "                daysCutting = -1;",
                            "            }",
                            "",
                            "            // Increase the counter for days after cutting",
                            "            if (aCutHasHappened && (daysCutting == 0))",
                            "                DaysAfterCut += 1;",
                            "        }",
                            "",
                            "        public enum removeAmountTypes",
                            "        {",
                            "            /// <summary>Setting DM amount to remove</summary>",
                            "            DMToRemove,",
                            "            /// <summary>Setting residual DM amount</summary>",
                            "            ResidualDM",
                            "        }",
                            "",
                            "        public enum rotationIntervalTypes",
                            "        {",
                            "            /// <summary>Setting a fixed interval</summary>",
                            "            FixedInterval,",
                            "            /// <summary>Setting a target (minimum) inteval</summary>",
                            "            TargetInterval",
                            "        }",
                            "",
                            "        public enum removeDMTypes",
                            "        {",
                            "            /// <summary>Remove all DM</summary>",
                            "            RemoveAll,",
                            "            /// <summary>Remove no DM</summary>",
                            "            RemoveNone,",
                            "            /// <summary>Remove a fraction based on digestibility</summary>",
                            "            BasedOnDigestibility",
                            "        }",
                            "",
                            "        // Resets the values of all outputs",
                            "        private void resetVariables()",
                            "        {",
                            "            DefoliatedWt = 0.0;",
                            "            DefoliatedN = 0.0;",
                            "            HarvestedWt = 0.0;",
                            "            HarvestedN = 0.0;",
                            "            RemovedWt = 0.0;",
                            "            RemovedN = 0.0;",
                            "            ReturnedWt = 0.0;",
                            "            ReturnedN = 0.0;",
                            "            NReturnedInDung = 0.0;",
                            "            NReturnedInUrine = 0.0;",
                            "        }",
                            "",
                            "        // Description: Perform the basic calculations for defoliation",
                            "        public void Graze(double amountDM, string amountType, int duration)",
                            "        {",
                            "            // Get the existing plant amount",
                            "            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "            ",
                            "            // Check the amount to remove and print some info",
                            "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = amountDM / duration;",
                            "            }",
                            "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                            "            }",
                            "            else",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                            "                if (intervalType == \"Fixed\")",
                            "                    DaysAfterCut = -duration;",
                            "                return;",
                            "            }",
                            "",
                            "            cuttingDuration = duration;",
                            "            // Preform first defoliation",
                            "            removeDM(herbageToRemove);",
                            "            returnExcreta();",
                            "            daysCutting = 1;",
                            "            DaysAfterCut = 0;",
                            "            if (daysCutting == cuttingDuration)",
                            "                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "        }",
                            "",
                            "        // Do the DM removal",
                            "        private void removeDM(double removeAmount)",
                            "        {",
                            "            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt",
                            "",
                            "            // Check whether we harvest anything",
                            "            if (existingWt >= removeAmount)",
                            "            {",
                            "                foreach (AgPasture.PastureSpecies species in Pasture)",
                            "                {",
                            "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                            "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                            "                }",
                            "                ",
                            "                // get total harvested",
                            "                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt",
                            "                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN",
                            "                HarvestedWt = DefoliatedWt;",
                            "                HarvestedN = DefoliatedN;",
                            "",
                            "                // get amounts actually removed from field and that to be returned (dung/urine)",
                            "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                            "                    fractionDM2Remove = 1.0;",
                            "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                            "                    fractionDM2Remove = 0.0;",
                            "                else",
                            "                {",
                            "                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt",
                            "                    fractionDM2Remove /= removeAmount;",
                            "                }",
                            "                ",
                            "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                            "                RemovedN = HarvestedN * FractionN2Remove;",
                            "                ReturnedWt = HarvestedWt - RemovedWt;",
                            "                ReturnedN = HarvestedN - RemovedN;",
                            "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                            "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                            "            }",
                            "        }",
                            "",
                            "        // Return dung and urine",
                            "        private void returnExcreta()",
                            "        {",
                            "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                            "            {",
                            "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                            "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                            "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                            "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                            "                float[] dltp = new float[] { 0 };",
                            "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                            "",
                            "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                            "                BiomassDung.dm_type = type;",
                            "                BiomassDung.dlt_crop_dm = dltdm;",
                            "                BiomassDung.dlt_dm_n = dltn;",
                            "                BiomassDung.dlt_dm_p = dltp;",
                            "                BiomassDung.fraction_to_residue = fraction;",
                            "                BiomassRemoved.Invoke(BiomassDung);",
                            "            }",
                            "",
                            "            if (NReturnedInUrine > 0.0)",
                            "            {",
                            "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using Models.Soils.Nutrients;",
                            "using Models.Interfaces;",
                            "using System.Xml.Serialization;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Fertiliser fertiliser;",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Soil Soil;",
                            "        private DateTime lastApplicationDate;",
                            "        private bool fertiliserIsAllowed;",
                            "        private int nLayers;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NO3;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NH4;",
                            "        [Link(ByName = true)]",
                            "        private ISolute Urea;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn ferliser applications on? \")]",
                            "        public yesnoType AllowFertiliser { get; set; }",
                            "        ",
                            "        [Description(\"Depth to calculate available soil N (mm): \")]",
                            "        public double Depth2SoilN { get; set; }",
                            "",
                            "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                            "        public double CriticalSoilN { get; set; }",
                            "",
                            "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                            "        public double FertNAmount { get; set; }",
                            "",
                            "        [Description(\"Type of N fertiliser to apply: \")]",
                            "        public Fertiliser.Types FertType { get; set; }",
                            "",
                            "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                            "        public double FertApplicationDepth { get; set; }",
                            "       ",
                            "        [Description(\"Minimum period between applications (days): \")]",
                            "        public double FertMinimumDays { get; set; }",
                            "       ",
                            "        public enum yesnoType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        [JsonIgnore] public double TopMineralN { get; set; }",
                            "        ",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {",
                            "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                            "            ",
                            "            // get the N stored in the soil",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopMineralN = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopMineralN += (NO3.kgha[layer]",
                            "                + NH4.kgha[layer]",
                            "                + Urea.kgha[layer])",
                            "                * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= Depth2SoilN)",
                            "                    layer = nLayers;",
                            "            }",
                            "",
                            "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                            "            {",
                            "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                            "                lastApplicationDate = Clock.Today;",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using APSIM.Shared.Utilities;",
                            "using System.Xml.Serialization;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "using Models.Interfaces;",
                            "",
                            "        ",
                            "namespace Models",
                            "{",
                            "    [Serializable] ",
                            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Irrigation Irrigation;",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Soil Soil;",
                            "        [Link(IsOptional = true)] private IPlant existingCrop;",
                            "        private DateTime StartDate;",
                            "        private DateTime EndDate;",
                            "        private double TopDUL;",
                            "        private double TopLL;",
                            "        private int nLayers;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "        [Link]",
                            "        private ISoilWater waterBalance;",
                            "        //Communication to other modules",
                            "       ",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                            "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                            "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                            "        public string seasonStart { get; set; }",
                            "        [Description(\"End of irrigation season (dd-MMM)\")]",
                            "        public string seasonEnd { get; set; }",
                            "        [Description(\"Season allocation (mm)\")]",
                            "        public double seasonsAllocation { get; set; }",
                            "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                            "        public double triggerDeficit { get; set; }",
                            "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                            "        public double targetDeficit { get; set; }",
                            "        [Description(\"Minimum days for irrigation to return\")]",
                            "        public double returndays { get; set; }",
                            "        [Description(\"Maximum irrigation application (mm/day)\")]",
                            "        public double maximumAmount { get; set; }",
                            "        [Description(\"Depth to calculate PAWC (mm)\")]",
                            "        public double depthPAWC { get; set; }",
                            "       ",
                            "        public enum answerType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        //Class members",
                            "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                            "        [JsonIgnore] public double TopSWC { get; set; }",
                            "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                            "        [JsonIgnore] public double AmountToApply { get; set; }",
                            "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                            "        ",
                            "        private bool IrrigationIsAllowed { get; set; }",
                            "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                            "        ",
                            "        private bool SeasonIsOpen { get; set; }",
                            "        private bool CropIsActive { get; set; }",
                            "        private bool IrrigatorIsAvailable { get; set; }",
                            "        private bool SoilIsDry { get; set; }",
                            "",
                            "    ",
                            "        //Calculate static soil variables",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {   ",
                            "            //Set the season dates",
                            "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                            "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                            "            ",
                            "            //Can we irrigate at all?",
                            "            IrrigationIsAllowed = false; ",
                            "            if (allowIrrigation == answerType.yes)",
                            "                IrrigationIsAllowed = true; ",
                            "            if (allowIrrigationAll == answerType.yes)",
                            "                IrrigationIsAlwaysAllowed = true; ",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "            //Calculate soil water variables",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                            "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "        }",
                            "             ",
                            "        //Determine daily requirement for irrigation",
                            "        [EventSubscribe(\"StartOfDay\")]",
                            "        private void OnStartOfDay(object sender, EventArgs e)",
                            "        {",
                            "            //Can we irrigate today?          ",
                            "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                            "",
                            "            //Is there a crop in the ground that needs irrigation?",
                            "            CropIsActive = false;",
                            "            if (IrrigationIsAlwaysAllowed)",
                            "                CropIsActive = true;  // might not be but we don't care",
                            "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                            "                CropIsActive = true;",
                            "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                            "          ",
                            "            //Is the irrigator available?",
                            "            IrrigatorIsAvailable = false;",
                            "            DaysSinceIrrigation += 1;",
                            "            if (DaysSinceIrrigation >= returndays)",
                            "                IrrigatorIsAvailable = true;",
                            "          ",
                            "            //Is the soil dry enough to require irrigation?",
                            "            SoilIsDry = false;",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopSWC = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "            ",
                            "            TopSWdeficit = TopSWC - TopDUL;",
                            "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                            "                SoilIsDry = true;",
                            "                ",
                            "            //Are all the conditions ratifying irrigation",
                            "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                            "            {",
                            "                //Lets bloody well irrigate then!!!!",
                            "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                            "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                            "                Irrigation.Apply(AmountToApply);",
                            "                DaysSinceIrrigation = 0;",
                            "                SeasonAppliedAmount += AmountToApply;",
                            "            }",
                            "        }",
                            "        ",
                            "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                            "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                            "        {",
                            "            bool result = false;",
                            "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                            "            {",
                            "                // period is within one year, ex: summer in the northern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            else",
                            "            {",
                            "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            ",
                            "            return result;",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "ResourceName": "Fertiliser",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "SurfOM": [],
                      "Canopies": [],
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "Name": "SurfaceOrganicMatter",
                      "ResourceName": "SurfaceOrganicMatter",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "PHUnits": 0,
                          "EC": null,
                          "ESP": null,
                          "CEC": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "PSIDul": -100.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "Name": "SoilWater",
                          "ResourceName": "WaterBalance",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Nutrients.Nutrient, Models",
                          "Name": "Nutrient",
                          "ResourceName": "Nutrient",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "CarbonUnits": 0,
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Water, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.4325,
                            0.4325,
                            0.4325,
                            0.4325
                          ],
                          "InitialPAWmm": 199.5,
                          "RelativeTo": "LL15",
                          "FilledFromTop": false,
                          "Name": "Water",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            15.0,
                            15.0,
                            15.0,
                            15.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NO3",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NH4",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 1,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "Urea",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "doyGermination": 275,
                      "daysEmergenceToAnthesis": 120,
                      "daysAnthesisToMaturity": 85,
                      "degreesDayForAnthesis": 1100.0,
                      "degreesDayForMaturity": 900.0,
                      "daysAnnualsFactor": 45,
                      "FVPDFunction": {
                        "$type": "Models.Functions.LinearInterpolationFunction, Models",
                        "Name": "LinearInterpolationFunction",
                        "ResourceName": null,
                        "Children": [],
                        "Enabled": true,
                        "ReadOnly": false
                      },
                      "LightProfile": null,
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "initialDMFractionsGrasses": [
                        0.15,
                        0.25,
                        0.25,
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "initialDMFractionsLegumes": [
                        0.16,
                        0.23,
                        0.22,
                        0.05,
                        0.03,
                        0.05,
                        0.05,
                        0.01,
                        0.04,
                        0.08,
                        0.08
                      ],
                      "initialDMFractionsForbs": [
                        0.2,
                        0.2,
                        0.15,
                        0.05,
                        0.1,
                        0.15,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "PhotosyntheticEfficiency": 0.01,
                      "PhotosynthesisCurveFactor": 0.8,
                      "FractionPAR": 0.5,
                      "ReferenceCO2": 380.0,
                      "CO2EffectScaleFactor": 700.0,
                      "CO2EffectOffsetFactor": 600.0,
                      "CO2EffectMinimum": 0.7,
                      "CO2EffectExponent": 2.0,
                      "ReproSeasonDurationCoeff": 2.0,
                      "ReproSeasonShouldersLengthFactor": 1.0,
                      "ReproSeasonOnsetDurationFactor": 0.6,
                      "RelativeTurnoverEmerging": 2.0,
                      "DetachmentDroughtCoefficient": 3.0,
                      "DetachmentDroughtEffectMin": 0.1,
                      "TurnoverStockFactor": 0.01,
                      "TurnoverDefoliationEffectMin": 0.025,
                      "MinimumGreenLeafProp": 0.8,
                      "MinimumGreenRootProp": 0.5,
                      "Name": "AGPRyegrass",
                      "ResourceName": "AGPRyegrass",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].Water.MM) as SoilWater",
                        "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialNonuniformSoilN",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System.Xml.Serialization;",
                            "using System.Collections.Generic;",
                            "using System;",
                            "using System.Linq;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }",
                            "        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "",
                            "        // - Internal variables",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            int SpeciesNum = 0;",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                SpeciesNum += 1;",
                            "                if (SpeciesNum == 1)",
                            "                {",
                            "                    if (Zone0Prop > 0)",
                            "                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);",
                            "                    if (Zone2Prop > 0)",
                            "                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);",
                            "                }",
                            "            }",
                            "",
                            "            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);",
                            "            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone0"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0.3"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone2"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0.3"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using System.Linq;",
                            "using System;",
                            "using System.Collections.Generic;",
                            "using System.Xml.Serialization;",
                            "using Models.Core;",
                            "using Models.PMF;",
                            "using APSIM.Shared.Utilities;",
                            "using Newtonsoft.Json;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] Fertiliser fertiliser;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Date to begin the rotation: \")]",
                            "        public DateTime CutRotationStartDate { get; set; }",
                            "",
                            "        [Description(\"Date to finish the rotation: \")]",
                            "        public DateTime CutRotationEndDate { get; set; }",
                            "",
                            "        [Description(\"Rotation interval (days): \")]",
                            "        public int CutInterval { get; set; }",
                            "",
                            "        [Description(\"How the interval is defined: \")]",
                            "        public rotationIntervalTypes IntervalType { get; set; }",
                            "",
                            "        [Description(\"Duration of each event (days): \")]",
                            "        public int DurationOfCut { get; set; }",
                            "",
                            "        [Description(\"What amount is being defined: \")]",
                            "        public removeAmountTypes RemoveAmountType { get; set; }",
                            "",
                            "        [Description(\"Amount to use (kg/ha): \")]",
                            "        public double AmountGiven { get; set; }",
                            "",
                            "        [Description(\"Fraction of DM that is removed from the field:\")]",
                            "        public removeDMTypes DMRemoveType { get; set; }",
                            "",
                            "        [Description(\"Fraction of N that is removed from the field (0-1):\")]",
                            "        public double FractionN2Remove { get; set; }",
                            "",
                            "        [Description(\"Proportion of N returned in dung (0-1):\")]",
                            "        public double ProportionN2Dung { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today",
                            "        public double DefoliatedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today",
                            "        public double DefoliatedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today",
                            "        public double HarvestedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today",
                            "        public double HarvestedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field",
                            "        public double RemovedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field",
                            "        public double RemovedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field",
                            "        public double ReturnedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field",
                            "        public double ReturnedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)",
                            "        public double NReturnedInDung { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)",
                            "        public double NReturnedInUrine { get; set; }",
                            "        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation",
                            "        public int DaysAfterCut { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                            "        public double PreHarvestDM { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                            "        public double PostHarvestDM { get; set; }",
                            "        ",
                            "        // - Internal variables",
                            "        // fraction of harvested Dm to actually remove from field",
                            "        private double fractionDM2Remove = 1.0;",
                            "        // flag whether defoliation is allowed",
                            "        private bool rotationAllowed = true;",
                            "        // number of days for each defoliation event",
                            "        private int cuttingDuration = 0;",
                            "        // counter for day within each defoliation",
                            "        private int daysCutting = 0;",
                            "        // type of interval (Fixed or target)",
                            "        private string intervalType;",
                            "        // total herbage to remove in g/m2 per day",
                            "        private double herbageToRemove;",
                            "        // type of DM amount (ResidualDM or DMToRemove)",
                            "        private string amountType;",
                            "        // auxiliary flag for defoliation",
                            "        private bool aCutHasHappened = false;",
                            "",
                            "        // - Event to add residue or dung to surface OM",
                            "        public event BiomassRemovedDelegate BiomassRemoved;",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                Pasture.Add(species);",
                            "            }",
                            "",
                            "            // reset variables",
                            "            DaysAfterCut = 0;",
                            "            resetVariables();",
                            "            cuttingDuration = DurationOfCut;",
                            "            ",
                            "            // get the type of amount given",
                            "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                            "                amountType = \"SetResidueAmount\";",
                            "            else",
                            "                amountType = \"SetRemoveAmount\";",
                            "",
                            "            // get the type of amount given",
                            "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                            "                intervalType = \"Fixed\";",
                            "            else",
                            "                intervalType = \"Target\";",
                            "",
                            "            // make sure that rotation start when startDate < simulationStartDay",
                            "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                            "                CutRotationStartDate = Clock.Today;",
                            "        }",
                            "        ",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            if (rotationAllowed)",
                            "            {",
                            "                if (Clock.Today == CutRotationStartDate)",
                            "                    DaysAfterCut = CutInterval;",
                            "",
                            "                // Check whether we can defoliate",
                            "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))",
                            "                {",
                            "                    // Check whether we should start a defoliation",
                            "                    if (DaysAfterCut >= (CutInterval - 1))",
                            "                    {",
                            "                        Graze(AmountGiven, amountType, DurationOfCut);",
                            "                    }",
                            "                }",
                            "            }",
                            "",
                            "            // Check whether we need to continue cutting",
                            "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                            "            {",
                            "                // reset outputs",
                            "                resetVariables();",
                            "",
                            "                removeDM(herbageToRemove);",
                            "                returnExcreta();",
                            "                daysCutting += 1;",
                            "                if (daysCutting == cuttingDuration)",
                            "                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt",
                            "            }",
                            "",
                            "            // reset outputs",
                            "            if (daysCutting < 0)",
                            "            {",
                            "                resetVariables();",
                            "                daysCutting = 0;",
                            "            }",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagementCalculations\")]",
                            "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                            "        {",
                            "            // Check whether a cutting has finished",
                            "            if (daysCutting == cuttingDuration)",
                            "            {",
                            "                aCutHasHappened = true;",
                            "                daysCutting = -1;",
                            "            }",
                            "",
                            "            // Increase the counter for days after cutting",
                            "            if (aCutHasHappened && (daysCutting == 0))",
                            "                DaysAfterCut += 1;",
                            "        }",
                            "",
                            "        public enum removeAmountTypes",
                            "        {",
                            "            /// <summary>Setting DM amount to remove</summary>",
                            "            DMToRemove,",
                            "            /// <summary>Setting residual DM amount</summary>",
                            "            ResidualDM",
                            "        }",
                            "",
                            "        public enum rotationIntervalTypes",
                            "        {",
                            "            /// <summary>Setting a fixed interval</summary>",
                            "            FixedInterval,",
                            "            /// <summary>Setting a target (minimum) inteval</summary>",
                            "            TargetInterval",
                            "        }",
                            "",
                            "        public enum removeDMTypes",
                            "        {",
                            "            /// <summary>Remove all DM</summary>",
                            "            RemoveAll,",
                            "            /// <summary>Remove no DM</summary>",
                            "            RemoveNone,",
                            "            /// <summary>Remove a fraction based on digestibility</summary>",
                            "            BasedOnDigestibility",
                            "        }",
                            "",
                            "        // Resets the values of all outputs",
                            "        private void resetVariables()",
                            "        {",
                            "            DefoliatedWt = 0.0;",
                            "            DefoliatedN = 0.0;",
                            "            HarvestedWt = 0.0;",
                            "            HarvestedN = 0.0;",
                            "            RemovedWt = 0.0;",
                            "            RemovedN = 0.0;",
                            "            ReturnedWt = 0.0;",
                            "            ReturnedN = 0.0;",
                            "            NReturnedInDung = 0.0;",
                            "            NReturnedInUrine = 0.0;",
                            "        }",
                            "",
                            "        // Description: Perform the basic calculations for defoliation",
                            "        public void Graze(double amountDM, string amountType, int duration)",
                            "        {",
                            "            // Get the existing plant amount",
                            "            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "            ",
                            "            // Check the amount to remove and print some info",
                            "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = amountDM / duration;",
                            "            }",
                            "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                            "            }",
                            "            else",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                            "                if (intervalType == \"Fixed\")",
                            "                    DaysAfterCut = -duration;",
                            "                return;",
                            "            }",
                            "",
                            "            cuttingDuration = duration;",
                            "            // Preform first defoliation",
                            "            removeDM(herbageToRemove);",
                            "            returnExcreta();",
                            "            daysCutting = 1;",
                            "            DaysAfterCut = 0;",
                            "            if (daysCutting == cuttingDuration)",
                            "                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "        }",
                            "",
                            "        // Do the DM removal",
                            "        private void removeDM(double removeAmount)",
                            "        {",
                            "            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt",
                            "",
                            "            // Check whether we harvest anything",
                            "            if (existingWt >= removeAmount)",
                            "            {",
                            "                foreach (AgPasture.PastureSpecies species in Pasture)",
                            "                {",
                            "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                            "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                            "                }",
                            "                ",
                            "                // get total harvested",
                            "                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt",
                            "                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN",
                            "                HarvestedWt = DefoliatedWt;",
                            "                HarvestedN = DefoliatedN;",
                            "",
                            "                // get amounts actually removed from field and that to be returned (dung/urine)",
                            "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                            "                    fractionDM2Remove = 1.0;",
                            "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                            "                    fractionDM2Remove = 0.0;",
                            "                else",
                            "                {",
                            "                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt",
                            "                    fractionDM2Remove /= removeAmount;",
                            "                }",
                            "                ",
                            "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                            "                RemovedN = HarvestedN * FractionN2Remove;",
                            "                ReturnedWt = HarvestedWt - RemovedWt;",
                            "                ReturnedN = HarvestedN - RemovedN;",
                            "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                            "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                            "            }",
                            "        }",
                            "",
                            "        // Return dung and urine",
                            "        private void returnExcreta()",
                            "        {",
                            "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                            "            {",
                            "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                            "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                            "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                            "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                            "                float[] dltp = new float[] { 0 };",
                            "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                            "",
                            "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                            "                BiomassDung.dm_type = type;",
                            "                BiomassDung.dlt_crop_dm = dltdm;",
                            "                BiomassDung.dlt_dm_n = dltn;",
                            "                BiomassDung.dlt_dm_p = dltp;",
                            "                BiomassDung.fraction_to_residue = fraction;",
                            "                BiomassRemoved.Invoke(BiomassDung);",
                            "            }",
                            "",
                            "            if (NReturnedInUrine > 0.0)",
                            "            {",
                            "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using Models.Soils.Nutrients;",
                            "using Models.Interfaces;",
                            "using System.Xml.Serialization;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Fertiliser fertiliser;",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Soil Soil;",
                            "        private DateTime lastApplicationDate;",
                            "        private bool fertiliserIsAllowed;",
                            "        private int nLayers;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NO3;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NH4;",
                            "        [Link(ByName = true)]",
                            "        private ISolute Urea;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn ferliser applications on? \")]",
                            "        public yesnoType AllowFertiliser { get; set; }",
                            "        ",
                            "        [Description(\"Depth to calculate available soil N (mm): \")]",
                            "        public double Depth2SoilN { get; set; }",
                            "",
                            "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                            "        public double CriticalSoilN { get; set; }",
                            "",
                            "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                            "        public double FertNAmount { get; set; }",
                            "",
                            "        [Description(\"Type of N fertiliser to apply: \")]",
                            "        public Fertiliser.Types FertType { get; set; }",
                            "",
                            "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                            "        public double FertApplicationDepth { get; set; }",
                            "       ",
                            "        [Description(\"Minimum period between applications (days): \")]",
                            "        public double FertMinimumDays { get; set; }",
                            "       ",
                            "        public enum yesnoType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        [JsonIgnore] public double TopMineralN { get; set; }",
                            "        ",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {",
                            "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                            "            ",
                            "            // get the N stored in the soil",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopMineralN = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopMineralN += (NO3.kgha[layer]",
                            "                + NH4.kgha[layer]",
                            "                + Urea.kgha[layer])",
                            "                * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= Depth2SoilN)",
                            "                    layer = nLayers;",
                            "            }",
                            "",
                            "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                            "            {",
                            "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                            "                lastApplicationDate = Clock.Today;",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using APSIM.Shared.Utilities;",
                            "using System.Xml.Serialization;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "using Models.Interfaces;",
                            "",
                            "        ",
                            "namespace Models",
                            "{",
                            "    [Serializable] ",
                            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Irrigation Irrigation;",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Soil Soil;",
                            "        [Link(IsOptional = true)] private IPlant existingCrop;",
                            "        private DateTime StartDate;",
                            "        private DateTime EndDate;",
                            "        private double TopDUL;",
                            "        private double TopLL;",
                            "        private int nLayers;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "        [Link]",
                            "        private ISoilWater waterBalance;",
                            "        //Communication to other modules",
                            "       ",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                            "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                            "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                            "        public string seasonStart { get; set; }",
                            "        [Description(\"End of irrigation season (dd-MMM)\")]",
                            "        public string seasonEnd { get; set; }",
                            "        [Description(\"Season allocation (mm)\")]",
                            "        public double seasonsAllocation { get; set; }",
                            "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                            "        public double triggerDeficit { get; set; }",
                            "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                            "        public double targetDeficit { get; set; }",
                            "        [Description(\"Minimum days for irrigation to return\")]",
                            "        public double returndays { get; set; }",
                            "        [Description(\"Maximum irrigation application (mm/day)\")]",
                            "        public double maximumAmount { get; set; }",
                            "        [Description(\"Depth to calculate PAWC (mm)\")]",
                            "        public double depthPAWC { get; set; }",
                            "       ",
                            "        public enum answerType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        //Class members",
                            "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                            "        [JsonIgnore] public double TopSWC { get; set; }",
                            "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                            "        [JsonIgnore] public double AmountToApply { get; set; }",
                            "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                            "        ",
                            "        private bool IrrigationIsAllowed { get; set; }",
                            "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                            "        ",
                            "        private bool SeasonIsOpen { get; set; }",
                            "        private bool CropIsActive { get; set; }",
                            "        private bool IrrigatorIsAvailable { get; set; }",
                            "        private bool SoilIsDry { get; set; }",
                            "",
                            "    ",
                            "        //Calculate static soil variables",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {   ",
                            "            //Set the season dates",
                            "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                            "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                            "            ",
                            "            //Can we irrigate at all?",
                            "            IrrigationIsAllowed = false; ",
                            "            if (allowIrrigation == answerType.yes)",
                            "                IrrigationIsAllowed = true; ",
                            "            if (allowIrrigationAll == answerType.yes)",
                            "                IrrigationIsAlwaysAllowed = true; ",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "            //Calculate soil water variables",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                            "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "        }",
                            "             ",
                            "        //Determine daily requirement for irrigation",
                            "        [EventSubscribe(\"StartOfDay\")]",
                            "        private void OnStartOfDay(object sender, EventArgs e)",
                            "        {",
                            "            //Can we irrigate today?          ",
                            "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                            "",
                            "            //Is there a crop in the ground that needs irrigation?",
                            "            CropIsActive = false;",
                            "            if (IrrigationIsAlwaysAllowed)",
                            "                CropIsActive = true;  // might not be but we don't care",
                            "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                            "                CropIsActive = true;",
                            "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                            "          ",
                            "            //Is the irrigator available?",
                            "            IrrigatorIsAvailable = false;",
                            "            DaysSinceIrrigation += 1;",
                            "            if (DaysSinceIrrigation >= returndays)",
                            "                IrrigatorIsAvailable = true;",
                            "          ",
                            "            //Is the soil dry enough to require irrigation?",
                            "            SoilIsDry = false;",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopSWC = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "            ",
                            "            TopSWdeficit = TopSWC - TopDUL;",
                            "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                            "                SoilIsDry = true;",
                            "                ",
                            "            //Are all the conditions ratifying irrigation",
                            "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                            "            {",
                            "                //Lets bloody well irrigate then!!!!",
                            "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                            "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                            "                Irrigation.Apply(AmountToApply);",
                            "                DaysSinceIrrigation = 0;",
                            "                SeasonAppliedAmount += AmountToApply;",
                            "            }",
                            "        }",
                            "        ",
                            "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                            "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                            "        {",
                            "            bool result = false;",
                            "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                            "            {",
                            "                // period is within one year, ex: summer in the northern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            else",
                            "            {",
                            "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            ",
                            "            return result;",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "ResourceName": "Fertiliser",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "SurfOM": [],
                      "Canopies": [],
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "Name": "SurfaceOrganicMatter",
                      "ResourceName": "SurfaceOrganicMatter",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "PHUnits": 0,
                          "EC": null,
                          "ESP": null,
                          "CEC": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "PSIDul": -100.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "Name": "SoilWater",
                          "ResourceName": "WaterBalance",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Nutrients.Nutrient, Models",
                          "Name": "Nutrient",
                          "ResourceName": "Nutrient",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "CarbonUnits": 0,
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Water, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.4325,
                            0.4325,
                            0.4325,
                            0.4325
                          ],
                          "InitialPAWmm": 199.5,
                          "RelativeTo": "LL15",
                          "FilledFromTop": false,
                          "Name": "Water",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            5.0,
                            5.0,
                            5.0,
                            5.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NO3",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NH4",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 1,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "Urea",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "doyGermination": 275,
                      "daysEmergenceToAnthesis": 120,
                      "daysAnthesisToMaturity": 85,
                      "degreesDayForAnthesis": 1100.0,
                      "degreesDayForMaturity": 900.0,
                      "daysAnnualsFactor": 45,
                      "FVPDFunction": {
                        "$type": "Models.Functions.LinearInterpolationFunction, Models",
                        "Name": "LinearInterpolationFunction",
                        "ResourceName": null,
                        "Children": [],
                        "Enabled": true,
                        "ReadOnly": false
                      },
                      "LightProfile": null,
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "initialDMFractionsGrasses": [
                        0.15,
                        0.25,
                        0.25,
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "initialDMFractionsLegumes": [
                        0.16,
                        0.23,
                        0.22,
                        0.05,
                        0.03,
                        0.05,
                        0.05,
                        0.01,
                        0.04,
                        0.08,
                        0.08
                      ],
                      "initialDMFractionsForbs": [
                        0.2,
                        0.2,
                        0.15,
                        0.05,
                        0.1,
                        0.15,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "PhotosyntheticEfficiency": 0.01,
                      "PhotosynthesisCurveFactor": 0.8,
                      "FractionPAR": 0.5,
                      "ReferenceCO2": 380.0,
                      "CO2EffectScaleFactor": 700.0,
                      "CO2EffectOffsetFactor": 600.0,
                      "CO2EffectMinimum": 0.7,
                      "CO2EffectExponent": 2.0,
                      "ReproSeasonDurationCoeff": 2.0,
                      "ReproSeasonShouldersLengthFactor": 1.0,
                      "ReproSeasonOnsetDurationFactor": 0.6,
                      "RelativeTurnoverEmerging": 2.0,
                      "DetachmentDroughtCoefficient": 3.0,
                      "DetachmentDroughtEffectMin": 0.1,
                      "TurnoverStockFactor": 0.01,
                      "TurnoverDefoliationEffectMin": 0.025,
                      "MinimumGreenLeafProp": 0.8,
                      "MinimumGreenRootProp": 0.5,
                      "Name": "AGPRyegrass",
                      "ResourceName": "AGPRyegrass",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].Water.MM) as SoilWater",
                        "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialNonuniformSoilN",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System.Xml.Serialization;",
                            "using System.Collections.Generic;",
                            "using System;",
                            "using System.Linq;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }",
                            "        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }",
                            "",
                            "        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }",
                            "        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "",
                            "        // - Internal variables",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            int SpeciesNum = 0;",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                SpeciesNum += 1;",
                            "                if (SpeciesNum == 1)",
                            "                {",
                            "                    if (Zone0Prop > 0)",
                            "                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);",
                            "                    if (Zone2Prop > 0)",
                            "                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);",
                            "                }",
                            "            }",
                            "",
                            "            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);",
                            "            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone1"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone2"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "// Defoliates AgPasture on a regular rotation or one-off via a schedule",
                            "// currenty defoliates the amount specified by spreading evenly over the specified period",
                            "",
                            "using Models.Soils;",
                            "using System.Linq;",
                            "using System;",
                            "using System.Collections.Generic;",
                            "using System.Xml.Serialization;",
                            "using Models.Core;",
                            "using Models.PMF;",
                            "using APSIM.Shared.Utilities;",
                            "using Newtonsoft.Json;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        // - Links to APSIM models",
                            "        [Link] Zone myZone;",
                            "        [Link] Clock Clock;",
                            "        [Link] Fertiliser fertiliser;",
                            "        [Link] ISummary summary = null;",
                            "        ",
                            "        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();",
                            "        ",
                            "        // - Paramters for this manager",
                            "        [Description(\"Date to begin the rotation: \")]",
                            "        public DateTime CutRotationStartDate { get; set; }",
                            "",
                            "        [Description(\"Date to finish the rotation: \")]",
                            "        public DateTime CutRotationEndDate { get; set; }",
                            "",
                            "        [Description(\"Rotation interval (days): \")]",
                            "        public int CutInterval { get; set; }",
                            "",
                            "        [Description(\"How the interval is defined: \")]",
                            "        public rotationIntervalTypes IntervalType { get; set; }",
                            "",
                            "        [Description(\"Duration of each event (days): \")]",
                            "        public int DurationOfCut { get; set; }",
                            "",
                            "        [Description(\"What amount is being defined: \")]",
                            "        public removeAmountTypes RemoveAmountType { get; set; }",
                            "",
                            "        [Description(\"Amount to use (kg/ha): \")]",
                            "        public double AmountGiven { get; set; }",
                            "",
                            "        [Description(\"Fraction of DM that is removed from the field:\")]",
                            "        public removeDMTypes DMRemoveType { get; set; }",
                            "",
                            "        [Description(\"Fraction of N that is removed from the field (0-1):\")]",
                            "        public double FractionN2Remove { get; set; }",
                            "",
                            "        [Description(\"Proportion of N returned in dung (0-1):\")]",
                            "        public double ProportionN2Dung { get; set; }",
                            "",
                            "        // - Outputs from this manager",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today",
                            "        public double DefoliatedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today",
                            "        public double DefoliatedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today",
                            "        public double HarvestedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today",
                            "        public double HarvestedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field",
                            "        public double RemovedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field",
                            "        public double RemovedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field",
                            "        public double ReturnedWt { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field",
                            "        public double ReturnedN { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)",
                            "        public double NReturnedInDung { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)",
                            "        public double NReturnedInUrine { get; set; }",
                            "        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation",
                            "        public int DaysAfterCut { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut",
                            "        public double PreHarvestDM { get; set; }",
                            "        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut",
                            "        public double PostHarvestDM { get; set; }",
                            "        ",
                            "        // - Internal variables",
                            "        // fraction of harvested Dm to actually remove from field",
                            "        private double fractionDM2Remove = 1.0;",
                            "        // flag whether defoliation is allowed",
                            "        private bool rotationAllowed = true;",
                            "        // number of days for each defoliation event",
                            "        private int cuttingDuration = 0;",
                            "        // counter for day within each defoliation",
                            "        private int daysCutting = 0;",
                            "        // type of interval (Fixed or target)",
                            "        private string intervalType;",
                            "        // total herbage to remove in g/m2 per day",
                            "        private double herbageToRemove;",
                            "        // type of DM amount (ResidualDM or DMToRemove)",
                            "        private string amountType;",
                            "        // auxiliary flag for defoliation",
                            "        private bool aCutHasHappened = false;",
                            "",
                            "        // - Event to add residue or dung to surface OM",
                            "        public event BiomassRemovedDelegate BiomassRemoved;",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnSimulationCommencing(object sender, EventArgs e)",
                            "        {",
                            "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                            "            {",
                            "                Pasture.Add(species);",
                            "            }",
                            "",
                            "            // reset variables",
                            "            DaysAfterCut = 0;",
                            "            resetVariables();",
                            "            cuttingDuration = DurationOfCut;",
                            "            ",
                            "            // get the type of amount given",
                            "            if (RemoveAmountType == removeAmountTypes.ResidualDM)",
                            "                amountType = \"SetResidueAmount\";",
                            "            else",
                            "                amountType = \"SetRemoveAmount\";",
                            "",
                            "            // get the type of amount given",
                            "            if (IntervalType == rotationIntervalTypes.FixedInterval)",
                            "                intervalType = \"Fixed\";",
                            "            else",
                            "                intervalType = \"Target\";",
                            "",
                            "            // make sure that rotation start when startDate < simulationStartDay",
                            "            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))",
                            "                CutRotationStartDate = Clock.Today;",
                            "        }",
                            "        ",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            if (rotationAllowed)",
                            "            {",
                            "                if (Clock.Today == CutRotationStartDate)",
                            "                    DaysAfterCut = CutInterval;",
                            "",
                            "                // Check whether we can defoliate",
                            "                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))",
                            "                {",
                            "                    // Check whether we should start a defoliation",
                            "                    if (DaysAfterCut >= (CutInterval - 1))",
                            "                    {",
                            "                        Graze(AmountGiven, amountType, DurationOfCut);",
                            "                    }",
                            "                }",
                            "            }",
                            "",
                            "            // Check whether we need to continue cutting",
                            "            if ((daysCutting > 0) && (daysCutting < cuttingDuration))",
                            "            {",
                            "                // reset outputs",
                            "                resetVariables();",
                            "",
                            "                removeDM(herbageToRemove);",
                            "                returnExcreta();",
                            "                daysCutting += 1;",
                            "                if (daysCutting == cuttingDuration)",
                            "                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt",
                            "            }",
                            "",
                            "            // reset outputs",
                            "            if (daysCutting < 0)",
                            "            {",
                            "                resetVariables();",
                            "                daysCutting = 0;",
                            "            }",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagementCalculations\")]",
                            "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                            "        {",
                            "            // Check whether a cutting has finished",
                            "            if (daysCutting == cuttingDuration)",
                            "            {",
                            "                aCutHasHappened = true;",
                            "                daysCutting = -1;",
                            "            }",
                            "",
                            "            // Increase the counter for days after cutting",
                            "            if (aCutHasHappened && (daysCutting == 0))",
                            "                DaysAfterCut += 1;",
                            "        }",
                            "",
                            "        public enum removeAmountTypes",
                            "        {",
                            "            /// <summary>Setting DM amount to remove</summary>",
                            "            DMToRemove,",
                            "            /// <summary>Setting residual DM amount</summary>",
                            "            ResidualDM",
                            "        }",
                            "",
                            "        public enum rotationIntervalTypes",
                            "        {",
                            "            /// <summary>Setting a fixed interval</summary>",
                            "            FixedInterval,",
                            "            /// <summary>Setting a target (minimum) inteval</summary>",
                            "            TargetInterval",
                            "        }",
                            "",
                            "        public enum removeDMTypes",
                            "        {",
                            "            /// <summary>Remove all DM</summary>",
                            "            RemoveAll,",
                            "            /// <summary>Remove no DM</summary>",
                            "            RemoveNone,",
                            "            /// <summary>Remove a fraction based on digestibility</summary>",
                            "            BasedOnDigestibility",
                            "        }",
                            "",
                            "        // Resets the values of all outputs",
                            "        private void resetVariables()",
                            "        {",
                            "            DefoliatedWt = 0.0;",
                            "            DefoliatedN = 0.0;",
                            "            HarvestedWt = 0.0;",
                            "            HarvestedN = 0.0;",
                            "            RemovedWt = 0.0;",
                            "            RemovedN = 0.0;",
                            "            ReturnedWt = 0.0;",
                            "            ReturnedN = 0.0;",
                            "            NReturnedInDung = 0.0;",
                            "            NReturnedInUrine = 0.0;",
                            "        }",
                            "",
                            "        // Description: Perform the basic calculations for defoliation",
                            "        public void Graze(double amountDM, string amountType, int duration)",
                            "        {",
                            "            // Get the existing plant amount",
                            "            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "            ",
                            "            // Check the amount to remove and print some info",
                            "            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = amountDM / duration;",
                            "            }",
                            "            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                            "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                            "            }",
                            "            else",
                            "            {",
                            "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                            "                if (intervalType == \"Fixed\")",
                            "                    DaysAfterCut = -duration;",
                            "                return;",
                            "            }",
                            "",
                            "            cuttingDuration = duration;",
                            "            // Preform first defoliation",
                            "            removeDM(herbageToRemove);",
                            "            returnExcreta();",
                            "            daysCutting = 1;",
                            "            DaysAfterCut = 0;",
                            "            if (daysCutting == cuttingDuration)",
                            "                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt",
                            "        }",
                            "",
                            "        // Do the DM removal",
                            "        private void removeDM(double removeAmount)",
                            "        {",
                            "            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt",
                            "",
                            "            // Check whether we harvest anything",
                            "            if (existingWt >= removeAmount)",
                            "            {",
                            "                foreach (AgPasture.PastureSpecies species in Pasture)",
                            "                {",
                            "                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;",
                            "                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");",
                            "                }",
                            "                ",
                            "                // get total harvested",
                            "                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt",
                            "                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN",
                            "                HarvestedWt = DefoliatedWt;",
                            "                HarvestedN = DefoliatedN;",
                            "",
                            "                // get amounts actually removed from field and that to be returned (dung/urine)",
                            "                if (DMRemoveType == removeDMTypes.RemoveAll)",
                            "                    fractionDM2Remove = 1.0;",
                            "                else if (DMRemoveType == removeDMTypes.RemoveNone)",
                            "                    fractionDM2Remove = 0.0;",
                            "                else",
                            "                {",
                            "                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt",
                            "                    fractionDM2Remove /= removeAmount;",
                            "                }",
                            "                ",
                            "                RemovedWt = HarvestedWt * fractionDM2Remove;",
                            "                RemovedN = HarvestedN * FractionN2Remove;",
                            "                ReturnedWt = HarvestedWt - RemovedWt;",
                            "                ReturnedN = HarvestedN - RemovedN;",
                            "                NReturnedInDung = ReturnedN * ProportionN2Dung;",
                            "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                            "            }",
                            "        }",
                            "",
                            "        // Return dung and urine",
                            "        private void returnExcreta()",
                            "        {",
                            "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                            "            {",
                            "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                            "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                            "                float[] dltdm = new float[] { (Single)ReturnedWt };",
                            "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                            "                float[] dltp = new float[] { 0 };",
                            "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                            "",
                            "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                            "                BiomassDung.dm_type = type;",
                            "                BiomassDung.dlt_crop_dm = dltdm;",
                            "                BiomassDung.dlt_dm_n = dltn;",
                            "                BiomassDung.dlt_dm_p = dltp;",
                            "                BiomassDung.fraction_to_residue = fraction;",
                            "                BiomassRemoved.Invoke(BiomassDung);",
                            "            }",
                            "",
                            "            if (NReturnedInUrine > 0.0)",
                            "            {",
                            "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using Models.Soils.Nutrients;",
                            "using Models.Interfaces;",
                            "using System.Xml.Serialization;",
                            "using APSIM.Shared.Utilities;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "",
                            "namespace Models",
                            "{",
                            "    [Serializable]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Fertiliser fertiliser;",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Soil Soil;",
                            "        private DateTime lastApplicationDate;",
                            "        private bool fertiliserIsAllowed;",
                            "        private int nLayers;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NO3;",
                            "        [Link(ByName = true)]",
                            "        private ISolute NH4;",
                            "        [Link(ByName = true)]",
                            "        private ISolute Urea;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn ferliser applications on? \")]",
                            "        public yesnoType AllowFertiliser { get; set; }",
                            "        ",
                            "        [Description(\"Depth to calculate available soil N (mm): \")]",
                            "        public double Depth2SoilN { get; set; }",
                            "",
                            "        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]",
                            "        public double CriticalSoilN { get; set; }",
                            "",
                            "        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]",
                            "        public double FertNAmount { get; set; }",
                            "",
                            "        [Description(\"Type of N fertiliser to apply: \")]",
                            "        public Fertiliser.Types FertType { get; set; }",
                            "",
                            "        [Description(\"Depth at which to apply the fertiliser (mm): \")]",
                            "        public double FertApplicationDepth { get; set; }",
                            "       ",
                            "        [Description(\"Minimum period between applications (days): \")]",
                            "        public double FertMinimumDays { get; set; }",
                            "       ",
                            "        public enum yesnoType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        [JsonIgnore] public double TopMineralN { get; set; }",
                            "        ",
                            "",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {",
                            "            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "        }",
                            "",
                            "        [EventSubscribe(\"DoManagement\")]",
                            "        private void OnDoManagement(object sender, EventArgs e)",
                            "        {",
                            "            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;",
                            "            ",
                            "            // get the N stored in the soil",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopMineralN = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopMineralN += (NO3.kgha[layer]",
                            "                + NH4.kgha[layer]",
                            "                + Urea.kgha[layer])",
                            "                * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= Depth2SoilN)",
                            "                    layer = nLayers;",
                            "            }",
                            "",
                            "            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))",
                            "            {",
                            "                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);",
                            "                lastApplicationDate = Clock.Today;",
                            "            }",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "CodeArray": [
                            "using Newtonsoft.Json;",
                            "using APSIM.Shared.Utilities;",
                            "using System.Xml.Serialization;",
                            "using Models.Soils;",
                            "using Models.PMF;",
                            "using Models.Core;",
                            "using System;",
                            "using Models.Interfaces;",
                            "",
                            "        ",
                            "namespace Models",
                            "{",
                            "    [Serializable] ",
                            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                            "    public class Script : Model",
                            "    {",
                            "        [Link] private ISummary summary;",
                            "        [Link] private Irrigation Irrigation;",
                            "        [Link] private Clock Clock;",
                            "        [Link] private Soil Soil;",
                            "        [Link(IsOptional = true)] private IPlant existingCrop;",
                            "        private DateTime StartDate;",
                            "        private DateTime EndDate;",
                            "        private double TopDUL;",
                            "        private double TopLL;",
                            "        private int nLayers;",
                            "        [Link]",
                            "        private IPhysical soilPhysical;",
                            "        [Link]",
                            "        private ISoilWater waterBalance;",
                            "        //Communication to other modules",
                            "       ",
                            "        //User inputs from properties tab",
                            "        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }",
                            "        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }",
                            "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                            "        public string seasonStart { get; set; }",
                            "        [Description(\"End of irrigation season (dd-MMM)\")]",
                            "        public string seasonEnd { get; set; }",
                            "        [Description(\"Season allocation (mm)\")]",
                            "        public double seasonsAllocation { get; set; }",
                            "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                            "        public double triggerDeficit { get; set; }",
                            "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                            "        public double targetDeficit { get; set; }",
                            "        [Description(\"Minimum days for irrigation to return\")]",
                            "        public double returndays { get; set; }",
                            "        [Description(\"Maximum irrigation application (mm/day)\")]",
                            "        public double maximumAmount { get; set; }",
                            "        [Description(\"Depth to calculate PAWC (mm)\")]",
                            "        public double depthPAWC { get; set; }",
                            "       ",
                            "        public enum answerType",
                            "        {",
                            "            /// <summary>a positive answer</summary>",
                            "            yes,",
                            "            /// <summary>a negative answer</summary>",
                            "            no",
                            "        }",
                            "",
                            "        //Class members",
                            "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                            "        [JsonIgnore] public double TopSWC { get; set; }",
                            "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                            "        [JsonIgnore] public double AmountToApply { get; set; }",
                            "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                            "        ",
                            "        private bool IrrigationIsAllowed { get; set; }",
                            "        private bool IrrigationIsAlwaysAllowed { get; set; }",
                            "        ",
                            "        private bool SeasonIsOpen { get; set; }",
                            "        private bool CropIsActive { get; set; }",
                            "        private bool IrrigatorIsAvailable { get; set; }",
                            "        private bool SoilIsDry { get; set; }",
                            "",
                            "    ",
                            "        //Calculate static soil variables",
                            "        [EventSubscribe(\"StartOfSimulation\")]",
                            "        private void OnStartOfSimulation(object sender, EventArgs e)",
                            "        {   ",
                            "            //Set the season dates",
                            "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                            "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                            "            ",
                            "            //Can we irrigate at all?",
                            "            IrrigationIsAllowed = false; ",
                            "            if (allowIrrigation == answerType.yes)",
                            "                IrrigationIsAllowed = true; ",
                            "            if (allowIrrigationAll == answerType.yes)",
                            "                IrrigationIsAlwaysAllowed = true; ",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "            //Calculate soil water variables",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            nLayers = soilPhysical.Thickness.Length;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                            "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "        }",
                            "             ",
                            "        //Determine daily requirement for irrigation",
                            "        [EventSubscribe(\"StartOfDay\")]",
                            "        private void OnStartOfDay(object sender, EventArgs e)",
                            "        {",
                            "            //Can we irrigate today?          ",
                            "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                            "",
                            "            //Is there a crop in the ground that needs irrigation?",
                            "            CropIsActive = false;",
                            "            if (IrrigationIsAlwaysAllowed)",
                            "                CropIsActive = true;  // might not be but we don't care",
                            "            else if ((existingCrop != null) && (existingCrop.IsAlive))",
                            "                CropIsActive = true;",
                            "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                            "          ",
                            "            //Is the irrigator available?",
                            "            IrrigatorIsAvailable = false;",
                            "            DaysSinceIrrigation += 1;",
                            "            if (DaysSinceIrrigation >= returndays)",
                            "                IrrigatorIsAvailable = true;",
                            "          ",
                            "            //Is the soil dry enough to require irrigation?",
                            "            SoilIsDry = false;",
                            "            double depthFromSurface = 0.0;",
                            "            double fracLayer = 0.0;",
                            "            TopSWC = 0.0;",
                            "            for (int layer = 0; layer < nLayers; layer++)",
                            "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                            "            {",
                            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                            "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                            "                depthFromSurface += soilPhysical.Thickness[layer];",
                            "                if (depthFromSurface >= depthPAWC)",
                            "                    layer = nLayers;",
                            "            }",
                            "            ",
                            "            TopSWdeficit = TopSWC - TopDUL;",
                            "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                            "                SoilIsDry = true;",
                            "                ",
                            "            //Are all the conditions ratifying irrigation",
                            "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                            "            {",
                            "                //Lets bloody well irrigate then!!!!",
                            "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                            "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                            "                Irrigation.Apply(AmountToApply);",
                            "                DaysSinceIrrigation = 0;",
                            "                SeasonAppliedAmount += AmountToApply;",
                            "            }",
                            "        }",
                            "        ",
                            "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                            "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                            "        {",
                            "            bool result = false;",
                            "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                            "            {",
                            "                // period is within one year, ex: summer in the northern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            else",
                            "            {",
                            "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                            "                    result = true;",
                            "            }",
                            "            ",
                            "            return result;",
                            "        }",
                            "    }",
                            "}"
                          ],
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "ResourceName": "Fertiliser",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "SurfOM": [],
                      "Canopies": [],
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "Name": "SurfaceOrganicMatter",
                      "ResourceName": "SurfaceOrganicMatter",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "PHUnits": 0,
                          "EC": null,
                          "ESP": null,
                          "CEC": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "ResourceName": null,
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "ResourceName": null,
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "PSIDul": -100.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "Name": "SoilWater",
                          "ResourceName": "WaterBalance",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Nutrients.Nutrient, Models",
                          "Name": "Nutrient",
                          "ResourceName": "Nutrient",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "CarbonUnits": 0,
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Water, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.4325,
                            0.4325,
                            0.4325,
                            0.4325
                          ],
                          "InitialPAWmm": 199.5,
                          "RelativeTo": "LL15",
                          "FilledFromTop": false,
                          "Name": "Water",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            5.0,
                            5.0,
                            5.0,
                            5.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NO3",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 0,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "NH4",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Solute, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "InitialValues": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "InitialValuesUnits": 1,
                          "WaterTableConcentration": 0.0,
                          "D0": 0.0,
                          "Exco": null,
                          "FIP": null,
                          "DepthConstant": 0.0,
                          "MaxDepthSoluteAccessible": 0.0,
                          "RunoffEffectivenessAtMovingSolute": 0.0,
                          "MaxEffectiveRunoff": 0.0,
                          "Name": "Urea",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "doyGermination": 275,
                      "daysEmergenceToAnthesis": 120,
                      "daysAnthesisToMaturity": 85,
                      "degreesDayForAnthesis": 1100.0,
                      "degreesDayForMaturity": 900.0,
                      "daysAnnualsFactor": 45,
                      "FVPDFunction": {
                        "$type": "Models.Functions.LinearInterpolationFunction, Models",
                        "Name": "LinearInterpolationFunction",
                        "ResourceName": null,
                        "Children": [],
                        "Enabled": true,
                        "ReadOnly": false
                      },
                      "LightProfile": null,
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "initialDMFractionsGrasses": [
                        0.15,
                        0.25,
                        0.25,
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "initialDMFractionsLegumes": [
                        0.16,
                        0.23,
                        0.22,
                        0.05,
                        0.03,
                        0.05,
                        0.05,
                        0.01,
                        0.04,
                        0.08,
                        0.08
                      ],
                      "initialDMFractionsForbs": [
                        0.2,
                        0.2,
                        0.15,
                        0.05,
                        0.1,
                        0.15,
                        0.1,
                        0.05,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "PhotosyntheticEfficiency": 0.01,
                      "PhotosynthesisCurveFactor": 0.8,
                      "FractionPAR": 0.5,
                      "ReferenceCO2": 380.0,
                      "CO2EffectScaleFactor": 700.0,
                      "CO2EffectOffsetFactor": 600.0,
                      "CO2EffectMinimum": 0.7,
                      "CO2EffectExponent": 2.0,
                      "ReproSeasonDurationCoeff": 2.0,
                      "ReproSeasonShouldersLengthFactor": 1.0,
                      "ReproSeasonOnsetDurationFactor": 0.6,
                      "RelativeTurnoverEmerging": 2.0,
                      "DetachmentDroughtCoefficient": 3.0,
                      "DetachmentDroughtEffectMin": 0.1,
                      "TurnoverStockFactor": 0.01,
                      "TurnoverDefoliationEffectMin": 0.025,
                      "MinimumGreenLeafProp": 0.8,
                      "MinimumGreenRootProp": 0.5,
                      "Name": "AGPRyegrass",
                      "ResourceName": "AGPRyegrass",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].Water.MM) as SoilWater",
                        "sum([Soil].NH4.kgha)+sum([Soil].NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialNonuniformSoilN",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}