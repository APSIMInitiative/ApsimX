{
  "$type": "Models.Core.Simulations, Models",
  "Version": 176,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Memo, Models",
      "Text": "A (not very useful by itself) test of the rotation manager's features.\n\n- Many arcs from one node\n- Many arcs to one node\n- Loopback arcs\n- Boolean conditions\n- Integer conditions (returning -1, 1, 2)",
      "Name": "Memo",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "rotation",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1900-01-01T00:00:00",
          "End": "1910-01-01T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "SummaryFile",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Management.RotationManager, Models",
          "Nodes": [
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 1,
              "Name": "A",
              "Location": "417, 206",
              "Colour": "Red"
            },
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 2,
              "Name": "initial",
              "Location": "70, 200",
              "Colour": "Lime"
            },
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 3,
              "Name": "A1",
              "Location": "702, 95",
              "Colour": "Beige"
            },
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 4,
              "Name": "A2",
              "Location": "698, 264",
              "Colour": "Beige"
            },
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 5,
              "Name": "A3",
              "Location": "689, 443",
              "Colour": "Beige"
            },
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 6,
              "Name": "B",
              "Location": "938, 364",
              "Colour": "Beige"
            }
          ],
          "Arcs": [
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 2,
              "DestinationID": 1,
              "Conditions": [
                "[RotationScript].Script.CanGoToA"
              ],
              "Actions": [
                ""
              ],
              "BezierPoints": null,
              "Source": null,
              "Destination": null,
              "ID": 7,
              "Name": "Arc 4",
              "Location": "266, 205",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 1,
              "DestinationID": 3,
              "Conditions": [
                "[RotationScript].Script.CanGoToA1"
              ],
              "Actions": [],
              "BezierPoints": null,
              "Source": null,
              "Destination": null,
              "ID": 8,
              "Name": "Arc 1",
              "Location": "534, 161",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 1,
              "DestinationID": 4,
              "Conditions": [
                "[RotationScript].Script.CanGoFromAToA2"
              ],
              "Actions": [],
              "BezierPoints": null,
              "Source": null,
              "Destination": null,
              "ID": 9,
              "Name": "Arc 2",
              "Location": "549, 252",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 1,
              "DestinationID": 5,
              "Conditions": [
                "[RotationScript].Script.CanGoFromAToA3"
              ],
              "Actions": [],
              "BezierPoints": null,
              "Source": null,
              "Destination": null,
              "ID": 10,
              "Name": "Arc 3",
              "Location": "565, 346",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 3,
              "DestinationID": 3,
              "Conditions": [
                "[RotationScript].Script.A1CanLoopback"
              ],
              "Actions": [
                "[RotationScript].Script.A1Loopback()"
              ],
              "BezierPoints": null,
              "Source": null,
              "Destination": null,
              "ID": 11,
              "Name": "Arc 5",
              "Location": "844, 97",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 3,
              "DestinationID": 4,
              "Conditions": [
                "[RotationScript].Script.CanGoFromA1ToA2"
              ],
              "Actions": [],
              "BezierPoints": null,
              "Source": null,
              "Destination": null,
              "ID": 12,
              "Name": "Arc 6",
              "Location": "703, 176",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 4,
              "DestinationID": 6,
              "Conditions": [
                "[RotationScript].Script.CanGoFromA2ToB"
              ],
              "Actions": [],
              "BezierPoints": null,
              "Source": null,
              "Destination": null,
              "ID": 13,
              "Name": "Arc 7",
              "Location": "804, 308",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 5,
              "DestinationID": 6,
              "Conditions": [
                "[RotationScript].Script.CanGoFromA3ToB"
              ],
              "Actions": [],
              "BezierPoints": null,
              "Source": null,
              "Destination": null,
              "ID": 14,
              "Name": "Arc 8",
              "Location": "834, 408",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 6,
              "DestinationID": 1,
              "Conditions": [
                "[RotationScript].Script.CanGoFromBToA"
              ],
              "Actions": [],
              "BezierPoints": null,
              "Source": null,
              "Destination": null,
              "ID": 15,
              "Name": "Arc 9",
              "Location": "682, 661",
              "Colour": "Yellow"
            }
          ],
          "TopLevel": true,
          "InitialState": "initial",
          "Verbose": false,
          "Name": "RotationManager",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today",
            "[Clock].Today.DayOfYear as doy",
            "[RotationManager].CurrentState as state"
          ],
          "EventNames": [
            "[RotationManager].Transition"
          ],
          "GroupByVariableName": null,
          "Name": "TransitionReport",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using APSIM.Shared.Utilities;",
            "using System.Data;",
            "using Models.Storage;",
            "using Models.Core;",
            "using System;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] private Clock clock;",
            "        private int a1LoopbackCounter;",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void StartOfSim(object sender, EventArgs args)",
            "        {",
            "            a1LoopbackCounter = 0;",
            "        }",
            "",
            "        // Can go to A only on even-numbered days.",
            "        public bool CanGoToA",
            "        {",
            "            get",
            "            {",
            "                return clock.Today.DayOfYear % 2 == 0;",
            "            }",
            "        }",
            "",
            "        // Can go to A1 only in even years.",
            "        public bool CanGoToA1",
            "        {",
            "            get",
            "            {",
            "                return clock.Today.Year % 2 == 0;",
            "            }",
            "        }",
            "",
            "        // A1 can always loopback.",
            "        public bool A1CanLoopback",
            "        {",
            "            get",
            "            {",
            "                return true;",
            "            }",
            "        }",
            "",
            "        // Count the number of times we've looped back inside A1",
            "        public void A1Loopback()",
            "        {",
            "            a1LoopbackCounter++;",
            "        }",
            "",
            "        // Can go from A1 to A2 only after looping back 5 times.",
            "        public int CanGoFromA1ToA2",
            "        {",
            "            get",
            "            {",
            "                if (a1LoopbackCounter < 5)",
            "                    return 0;",
            "                if (a1LoopbackCounter == 5)",
            "                    return 1;",
            "                return 2;",
            "            }",
            "        }",
            "",
            "        // Can go to A2 with normal priority if year >= 1901.",
            "        // Can go to A2 with high priority if year == 1901.",
            "        public int CanGoFromAToA2",
            "        {",
            "            get",
            "            {",
            "                if (clock.Today.Year == 1901)",
            "                    return 2;",
            "                if (clock.Today.Year > 1901)",
            "                    return 1;",
            "                return 0;",
            "            }",
            "        }",
            "",
            "        // Can never go to A3 before 1905.",
            "        // Can go to A3 with normal priority in even years.",
            "        // Gan go to A3 with high priority in odd years.",
            "        public int CanGoFromAToA3",
            "        {",
            "            get",
            "            {",
            "                if (clock.Today.Year < 1905)",
            "                    return -1;",
            "                if (clock.Today.Year % 2 == 0)",
            "                    return 1;",
            "                return 2;",
            "            }",
            "        }",
            "",
            "        // Can go from A2 to B in December only.",
            "        public bool CanGoFromA2ToB",
            "        {",
            "            get",
            "            {",
            "                return clock.Today.Month == 12;",
            "            }",
            "        }",
            "",
            "        // Can go from A3 to B in July.",
            "        public bool CanGoFromA3ToB",
            "        {",
            "            get",
            "            {",
            "                return clock.Today.Month == 7;",
            "            }",
            "        }",
            "",
            "        // Can go from B to A only on January 1.",
            "        public bool CanGoFromBToA",
            "        {",
            "            get",
            "            {",
            "                return clock.Today.DayOfYear == 1;",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [],
          "Name": "RotationScript",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using APSIM.Shared.Utilities;",
            "using System.Data;",
            "using Models.Storage;",
            "using Models.Core;",
            "using System;",
            "using System.Globalization;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model, ITest",
            "    {",
            "        public void Run()",
            "        {",
            "            IStorageReader storage = this.FindInScope<IDataStore>().Reader;",
            "            DataTable data = storage.GetData(\"TransitionReport\", \"Current\", new string[] { \"rotation\" }, new[] { \"doy\", \"state\" });",
            "            int[] dates = DataTableUtilities.GetColumnAsIntegers(data, \"doy\");",
            "            string[] states = DataTableUtilities.GetColumnAsStrings(data, \"state\", CultureInfo.InvariantCulture);",
            "",
            "            if (dates.Length != expectedDates.Length)",
            "                throw new Exception(string.Format(\"Incorrect number of dates. Expected: {0} but was: {1}\", expectedDates.Length, dates.Length));",
            "            for (int i = 0; i < dates.Length; i++)",
            "                if (dates[i] != expectedDates[i])",
            "                    throw new Exception(string.Format(\"Incorrect date. Expected: {0} but was {1}\", expectedDates[i], dates[i]));",
            "            for (int i = 0; i < states.Length; i++)",
            "                if (states[i] != expectedStates[i])",
            "                    throw new Exception(string.Format(\"Incorrect date. Expected: {0} but was {1}\", expectedStates[i], states[i]));",
            "            if (states.Length != expectedStates.Length)",
            "                throw new Exception(string.Format(\"Incorrect number of dates. Expected: {0} but was: {1}\", expectedStates.Length, states.Length));",
            "        }",
            "",
            "        private static readonly int[] expectedDates = new int[]",
            "        {",
            "            2,",
            "            2,",
            "            2,",
            "            2,",
            "            2,",
            "            2,",
            "            2,",
            "            2,",
            "            2,",
            "            335,",
            "            1,",
            "            1,",
            "            335,",
            "            1,",
            "            1,",
            "            1,",
            "            335,",
            "            1,",
            "            1,",
            "            335,",
            "            1,",
            "            1,",
            "            1,",
            "            336,",
            "            1,",
            "            1,",
            "            182,",
            "            1,",
            "            1,",
            "            1,",
            "            335,",
            "            1,",
            "            1,",
            "            182,",
            "            1,",
            "            1,",
            "            1,",
            "            336,",
            "            1,",
            "            1,",
            "            182,",
            "            1,",
            "            1,",
            "            1",
            "        };",
            "",
            "        private static readonly string[] expectedStates = new string[]",
            "        {",
            "            \"initial\",",
            "            \"A\",",
            "            \"A1\",",
            "            \"A1\",",
            "            \"A1\",",
            "            \"A1\",",
            "            \"A1\",",
            "            \"A1\",",
            "            \"A1\",",
            "            \"A2\",",
            "            \"B\",",
            "            \"A\",",
            "            \"A2\",",
            "            \"B\",",
            "            \"A\",",
            "            \"A1\",",
            "            \"A2\",",
            "            \"B\",",
            "            \"A\",",
            "            \"A2\",",
            "            \"B\",",
            "            \"A\",",
            "            \"A1\",",
            "            \"A2\",",
            "            \"B\",",
            "            \"A\",",
            "            \"A3\",",
            "            \"B\",",
            "            \"A\",",
            "            \"A1\",",
            "            \"A2\",",
            "            \"B\",",
            "            \"A\",",
            "            \"A3\",",
            "            \"B\",",
            "            \"A\",",
            "            \"A1\",",
            "            \"A2\",",
            "            \"B\",",
            "            \"A\",",
            "            \"A3\",",
            "            \"B\",",
            "            \"A\",",
            "            \"A1\"",
            "        };",
            "    }",
            "}"
          ],
          "Parameters": [],
          "Name": "ResultsValidator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}