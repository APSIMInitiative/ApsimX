{
  "$type": "Models.Core.Simulations, Models",
  "Version": 174,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Sim",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1972-01-01T00:00:00",
          "End": "1972-01-31T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "%root%/Examples/WeatherFiles/NZ_Lincoln.met",
          "ExcelWorkSheetName": null,
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "Summary",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.MicroClimate, Models",
          "a_interception": 0.0,
          "b_interception": 1.0,
          "c_interception": 0.0,
          "d_interception": 0.0,
          "SoilHeatFluxFraction": 0.4,
          "MinimumHeightDiffForNewLayer": 0.0,
          "NightInterceptionFraction": 0.5,
          "ReferenceHeight": 2.0,
          "Name": "MicroClimate",
          "ResourceName": null,
          "Children": [],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "SoilArbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Newtonsoft.Json;",
            "using System;",
            "using System.Linq;",
            "using System.Xml.Serialization;",
            "using Models.Core;",
            "using Models.PMF;",
            "using Models.Soils;",
            "using APSIM.Shared.Utilities;",
            "using Models.Interfaces;",
            "using MathNet.Numerics.Distributions;",
            "using MathNet.Numerics.LinearAlgebra;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        // - Links to APSIM models",
            "        [Link] Simulation simulation;",
            "        [Link] Clock Clock;",
            "",
            "        // - Paramters for this manager",
            "        [Description(\"Number of realisaitons to be generated: \")] public int NumRealisations { get; set; }",
            "",
            "        [Description(\"First mean load of the generated distribution (g N): \")] public double MeanLoadToGenerate { get; set; }",
            "        [Description(\"Amount to add to the first mean every day (g N): \")] public double AmountAddMeanLoad { get; set; }",
            "",
            "\t\t// should hardcode these",
            "        [Description(\"Means of the original distributions in log space, mu_i load (gN) first and then mu_j volume (L): \")] public double[] VectorOfMeans { get; set; }",
            "        [Description(\"Covariance matrix - in order of E_ii, E_ij, E_ij, E_jj: \")] public double[] CovarianceMatrix { get; set; }",
            "",
            "        // - Outputs from this manager",
            "        [JsonIgnore][Units(\"g N\")] public double[] GeneratedLoad { get; set; } // Array of generated load values",
            "        [JsonIgnore][Units(\"L\")] public double[] GeneratedVolume { get; set; } // Array of generated volume values",
            "        [JsonIgnore][Units(\"g N\")] public double MeanGeneratedLoad { get; set; } // Mean generated load values",
            "        [JsonIgnore][Units(\"L\")] public double MeanGeneratedVolume { get; set; } // Mean of generated volume values",
            "",
            "        [NonSerialized]",
            "        Random RandomNumGenerator = new Random(10);",
            "        ",
            "        public double NormalMeanLoadToGenerate { get; set; }",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")] private void OnSimulationCommencing(object sender, EventArgs e)",
            "        {",
            "",
            "        }",
            "        ",
            "        [EventSubscribe(\"DoManagement\")] private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            // The add here is just for testing if want a different incrementing mean each day of the simulation",
            "            MeanLoadToGenerate += AmountAddMeanLoad;",
            "            ",
            "            // I (VOS) don't understand what the subtraction is here but the secnd version gives an actual mean much closer to the intended mean",
            "            NormalMeanLoadToGenerate = Math.Log10(MeanLoadToGenerate) - 0.5 * CovarianceMatrix[0];",
            "            //NormalMeanLoadToGenerate = Math.Log10(MeanLoadToGenerate) - 1.0 * CovarianceMatrix[0];",
            "",
            "            double[,] TransformedMu = { { NormalMeanLoadToGenerate },",
            "                                        { VectorOfMeans[1] }};",
            "",
            "            double[,] SigmaRows = { { CovarianceMatrix[0], CovarianceMatrix[1] },",
            "                                    { CovarianceMatrix[2], CovarianceMatrix[3] } };",
            "",
            "            double[,] SigmaColumns = { { 1} };",
            "",
            "            // Converts parameters to MathNet matrices.",
            "            Matrix<double> TransformedMuMatrix = Matrix<double>.Build.DenseOfArray(TransformedMu);",
            "            Matrix<double> SigmaRowsMatrix = Matrix<double>.Build.DenseOfArray(SigmaRows);",
            "            Matrix<double> SigmaColumnsMatrix = Matrix<double>.Build.DenseOfArray(SigmaColumns);",
            "",
            "            // Initialises transformed distribution.",
            "            var TransformedMVN = new MatrixNormal(TransformedMuMatrix,",
            "                                                  SigmaRowsMatrix,",
            "                                                  SigmaColumnsMatrix,",
            "                                                  RandomNumGenerator);",
            "",
            "            // Generate samples and transforms them back to lognormal space.",
            "            double[] LogNormalLoadSamples = new double[NumRealisations];",
            "            double[] LogNormalVolumeSamples = new double[NumRealisations];",
            "",
            "            for (int i = 0; i < NumRealisations; i++)",
            "            {",
            "                Matrix<double> LoadVolumeSample = TransformedMVN.Sample();",
            "                LogNormalLoadSamples[i] = Math.Pow(10.0, LoadVolumeSample[0,0]);",
            "                LogNormalVolumeSamples[i] = Math.Pow(10.0, LoadVolumeSample[1,0]);",
            "            }",
            "",
            "            // Actual sampled array and means",
            "            GeneratedLoad = LogNormalLoadSamples;   // could aim to correct this against the intended??? Not the best solution",
            "            GeneratedVolume = LogNormalVolumeSamples;",
            "            MeanGeneratedLoad = LogNormalLoadSamples.Average();",
            "            MeanGeneratedVolume = LogNormalVolumeSamples.Average();",
            "        }",
            "",
            "        [EventSubscribe(\"DoManagementCalculations\")] private void OnDoManagementCalculations(object sender, EventArgs e)",
            "        {",
            "        }",
            "        ",
            "                /*private void CalculateArrayLoad()",
            "        {",
            "            // Defines parameters of transformed distribution.",
            "            MeanLoadToGenerate += AmountAddMeanLoad;",
            "            double NormalMeanLoadToGenerate = Math.Log10(MeanLoadToGenerate) - 0.5 * CovarianceMatrix[0];",
            "",
            "            double[,] TransformedMu = { { NormalMeanLoadToGenerate },",
            "                                        { VectorOfMeans[1] }};",
            "",
            "            double[,] SigmaRows = { { CovarianceMatrix[0], CovarianceMatrix[1] },",
            "                                    { CovarianceMatrix[2], CovarianceMatrix[3] } };",
            "",
            "            double[,] SigmaColumns = { { 1} };",
            "",
            "            // Converts parameters to MathNet matrices.",
            "            Matrix<double> TransformedMuMatrix = Matrix<double>.Build.DenseOfArray(TransformedMu);",
            "            Matrix<double> SigmaRowsMatrix = Matrix<double>.Build.DenseOfArray(SigmaRows);",
            "            Matrix<double> SigmaColumnsMatrix = Matrix<double>.Build.DenseOfArray(SigmaColumns);",
            "",
            "            // Initializes transformed distribution.",
            "            var TransformedMVN = new MatrixNormal(TransformedMuMatrix,",
            "                                                  SigmaRowsMatrix,",
            "                                                  SigmaColumnsMatrix,",
            "                                                  RandomNumGenerator);",
            "",
            "            // Generates samples and transforms them back to lognormal space.",
            "            double[] LogNormalLoadSamples = new double[NumRealisations];",
            "            double[] LogNormalVolumeSamples = new double[NumRealisations];",
            "",
            "            for (int i = 0; i < NumRealisations; i++)",
            "            {",
            "                Matrix<double> LoadVolumeSample = TransformedMVN.Sample();",
            "                LogNormalLoadSamples[i] = Math.Pow(10.0, LoadVolumeSample[0,0]);",
            "                LogNormalVolumeSamples[i] = Math.Pow(10.0, LoadVolumeSample[1,0]);",
            "            }",
            "",
            "            // Updates some script parameters.",
            "            ArrayLoad = LogNormalLoadSamples;",
            "            ArrayVolume = LogNormalVolumeSamples;",
            "        } */",
            "",
            "",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "NumRealisations",
              "Value": "1000"
            },
            {
              "Key": "MeanLoadToGenerate",
              "Value": "20"
            },
            {
              "Key": "AmountAddMeanLoad",
              "Value": "0"
            },
            {
              "Key": "VectorOfMeans",
              "Value": "1.1567018157972, 0.400851532821705"
            },
            {
              "Key": "CovarianceMatrix",
              "Value": "0.047123025480434, 0.033361752139528, 0.033361752139528, 0.033598852595467"
            }
          ],
          "Name": "BivariateNormal",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today as Date",
            "//[BivariateNormal].Script.VectorOfMeans",
            "//[BivariateNormal].Script.CovarianceMatrix",
            "[BivariateNormal].Script.MeanLoadToGenerate as IntendedMeanLoad",
            "[BivariateNormal].Script.NormalMeanLoadToGenerate as MysteryParm",
            "[BivariateNormal].Script.MeanGeneratedLoad as ActualMeanLoad",
            "[BivariateNormal].Script.MeanGeneratedVolume as ActualMeanVol",
            "//[BivariateNormal].Script.GeneratedLoad as GenLoad",
            "//[BivariateNormal].Script.GeneratedVolume as GenVol"
          ],
          "EventNames": [
            "[Clock].EndOfDay"
          ],
          "GroupByVariableName": null,
          "Name": "BivariateNormalResults",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}