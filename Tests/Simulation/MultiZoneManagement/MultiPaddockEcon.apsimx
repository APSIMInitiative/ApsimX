{
  "$type": "Models.Core.Simulations, Models",
  "Version": 187,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Farm",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1990-01-01T00:00:00",
          "End": "1995-04-30T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "SummaryFile",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "%root%/Examples/WeatherFiles/AU_Dalby.met",
          "ExcelWorkSheetName": "",
          "Latitude": -27.18,
          "Tav": 19.09,
          "Amp": 14.63,
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "Soil Arbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 100.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Field 1",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 30,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Dalby",
              "NearestTown": "Dalby, Q 4405",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": null,
              "ApsoilNumber": "27",
              "Latitude": -27.1229551,
              "Longitude": 151.3054008,
              "LocationAccuracy": " +/- 20m",
              "YearOfSampling": "0",
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba",
              "Comments": "Clay - Toowoomba - Wheat ll,xf copied from sorghum. Wheat kl is just default apsim kl values for wheat. ",
              "Name": "Black Vertosol-Bongeen (Dalby No027)",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "ParticleSizeClay": null,
                  "Rocks": null,
                  "Texture": null,
                  "BD": [
                    1.25,
                    1.31,
                    1.23,
                    1.24,
                    1.25,
                    1.26,
                    1.29
                  ],
                  "AirDry": [
                    0.115,
                    0.184,
                    0.23,
                    0.23,
                    0.23,
                    0.23,
                    0.23
                  ],
                  "LL15": [
                    0.23,
                    0.23,
                    0.23,
                    0.23,
                    0.23,
                    0.23,
                    0.23
                  ],
                  "DUL": [
                    0.45,
                    0.43,
                    0.46,
                    0.45,
                    0.45,
                    0.44,
                    0.43
                  ],
                  "SAT": [
                    0.5,
                    0.48,
                    0.51,
                    0.5,
                    0.5,
                    0.49,
                    0.48
                  ],
                  "KS": null,
                  "BDMetadata": [
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility"
                  ],
                  "AirDryMetadata": [
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge"
                  ],
                  "LL15Metadata": [
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge"
                  ],
                  "DULMetadata": [
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility"
                  ],
                  "SATMetadata": [
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD"
                  ],
                  "KSMetadata": null,
                  "RocksMetadata": null,
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClayMetadata": null,
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.23,
                        0.24,
                        0.29,
                        0.34,
                        0.37,
                        0.38,
                        0.39
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge"
                      ],
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "wheatSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.23,
                        0.23,
                        0.23,
                        0.26,
                        0.3,
                        0.33,
                        0.37
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.09,
                        0.07,
                        0.05
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility"
                      ],
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "cottonSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.23,
                        0.24,
                        0.29,
                        0.34,
                        0.37,
                        0.38,
                        0.39
                      ],
                      "KL": [
                        0.07,
                        0.07,
                        0.07,
                        0.05,
                        0.05,
                        0.04,
                        0.03
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility"
                      ],
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "sorghumSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.23,
                        0.24,
                        0.29,
                        0.34,
                        0.37,
                        0.38,
                        0.39
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge"
                      ],
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "SCRUMSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.23,
                        0.24,
                        0.29,
                        0.34,
                        0.37,
                        0.38,
                        0.39
                      ],
                      "KL": [
                        0.07,
                        0.07,
                        0.07,
                        0.05,
                        0.05,
                        0.04,
                        0.03
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility"
                      ],
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "MaizeSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 6.0,
                  "SummerCona": 3.5,
                  "WinterDate": "1-Apr",
                  "WinterU": 4.0,
                  "WinterCona": 2.5,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "PSIDul": -100.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "Name": "SoilWater",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    0.915384615384615,
                    0.776923076923077,
                    0.346153846153846,
                    0.230769230769231,
                    0.153846153846154,
                    0.123076923076923,
                    0.130769230769231
                  ],
                  "CarbonUnits": 1,
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.1290323127564,
                    270.3443621919937,
                    163.97214434990104,
                    99.45413288704063,
                    60.32198083112468,
                    36.58713082867487,
                    22.1912165985086
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "PH": [
                    8.2,
                    8.5,
                    8.6,
                    8.6,
                    7.4,
                    5.3,
                    5.3
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": [
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge"
                  ],
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": null,
                  "InitialValues": null,
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": null,
                  "InitialValues": null,
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.406,
                    0.39,
                    0.414,
                    0.406,
                    0.406,
                    0.398,
                    0.39
                  ],
                  "InitialPAWmm": 309.6,
                  "RelativeTo": "LL15",
                  "FilledFromTop": true,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "CERESSoilTemperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "ResourceName": "MicroClimate",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "Maize",
              "ResourceName": "Maize",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "Wheat",
              "ResourceName": "Wheat",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Wheat].Phenology.Zadok.Stage",
                "[Wheat].Phenology.CurrentStageName",
                "[Wheat].IsAlive",
                "[Wheat].IsReadyForHarvesting",
                "[Wheat].AboveGround.Wt",
                "[Wheat].AboveGround.N",
                "[Wheat].Grain.Total.Wt*10 as WheatYield",
                "[Maize].Grain.Total.Wt*10 as MaizeYield",
                "[Wheat].Grain.Protein",
                "[Wheat].Grain.Size",
                "[Wheat].Grain.Number",
                "[Wheat].Grain.Total.Wt",
                "[Wheat].Grain.Total.N",
                "[Wheat].Total.Wt",
                "",
                "Sum([Soil].SoilWater.ESW) as ESW",
                "[Soil].SoilWater.Es as ESoil"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "Report",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 100.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Field 2",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 30,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Dalby",
              "NearestTown": "Dalby, Q 4405",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": null,
              "ApsoilNumber": "27",
              "Latitude": -27.1229551,
              "Longitude": 151.3054008,
              "LocationAccuracy": " +/- 20m",
              "YearOfSampling": "0",
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba",
              "Comments": "Clay - Toowoomba - Wheat ll,xf copied from sorghum. Wheat kl is just default apsim kl values for wheat. ",
              "Name": "Black Vertosol-Bongeen (Dalby No027)",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "ParticleSizeClay": null,
                  "Rocks": null,
                  "Texture": null,
                  "BD": [
                    1.25,
                    1.31,
                    1.23,
                    1.24,
                    1.25,
                    1.26,
                    1.29
                  ],
                  "AirDry": [
                    0.115,
                    0.184,
                    0.23,
                    0.23,
                    0.23,
                    0.23,
                    0.23
                  ],
                  "LL15": [
                    0.23,
                    0.23,
                    0.23,
                    0.23,
                    0.23,
                    0.23,
                    0.23
                  ],
                  "DUL": [
                    0.45,
                    0.43,
                    0.46,
                    0.45,
                    0.45,
                    0.44,
                    0.43
                  ],
                  "SAT": [
                    0.5,
                    0.48,
                    0.51,
                    0.5,
                    0.5,
                    0.49,
                    0.48
                  ],
                  "KS": null,
                  "BDMetadata": [
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility"
                  ],
                  "AirDryMetadata": [
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge"
                  ],
                  "LL15Metadata": [
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge"
                  ],
                  "DULMetadata": [
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility",
                    "Field measured and checked for sensibility"
                  ],
                  "SATMetadata": [
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD",
                    "Calculated from measured, estimated or calculated BD"
                  ],
                  "KSMetadata": null,
                  "RocksMetadata": null,
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClayMetadata": null,
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.23,
                        0.24,
                        0.29,
                        0.34,
                        0.37,
                        0.38,
                        0.39
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge"
                      ],
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "wheatSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.23,
                        0.23,
                        0.23,
                        0.26,
                        0.3,
                        0.33,
                        0.37
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.09,
                        0.07,
                        0.05
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility"
                      ],
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "cottonSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.23,
                        0.24,
                        0.29,
                        0.34,
                        0.37,
                        0.38,
                        0.39
                      ],
                      "KL": [
                        0.07,
                        0.07,
                        0.07,
                        0.05,
                        0.05,
                        0.04,
                        0.03
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility"
                      ],
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "sorghumSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.23,
                        0.24,
                        0.29,
                        0.34,
                        0.37,
                        0.38,
                        0.39
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge",
                        "Estimated based on local knowledge"
                      ],
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "SCRUMSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.23,
                        0.24,
                        0.29,
                        0.34,
                        0.37,
                        0.38,
                        0.39
                      ],
                      "KL": [
                        0.07,
                        0.07,
                        0.07,
                        0.05,
                        0.05,
                        0.04,
                        0.03
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility",
                        "Field measured and checked for sensibility"
                      ],
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "MaizeSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 6.0,
                  "SummerCona": 3.5,
                  "WinterDate": "1-Apr",
                  "WinterU": 4.0,
                  "WinterCona": 2.5,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "PSIDul": -100.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "Name": "SoilWater",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    0.915384615384615,
                    0.776923076923077,
                    0.346153846153846,
                    0.230769230769231,
                    0.153846153846154,
                    0.123076923076923,
                    0.130769230769231
                  ],
                  "CarbonUnits": 1,
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.1290323127564,
                    270.3443621919937,
                    163.97214434990104,
                    99.45413288704063,
                    60.32198083112468,
                    36.58713082867487,
                    22.1912165985086
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "PH": [
                    8.2,
                    8.5,
                    8.6,
                    8.6,
                    7.4,
                    5.3,
                    5.3
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": [
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge",
                    "Estimated based on local knowledge"
                  ],
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": null,
                  "InitialValues": null,
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": null,
                  "InitialValues": null,
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.406,
                    0.39,
                    0.414,
                    0.406,
                    0.406,
                    0.398,
                    0.39
                  ],
                  "InitialPAWmm": 309.6,
                  "RelativeTo": "LL15",
                  "FilledFromTop": true,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "CERESSoilTemperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "ResourceName": "MicroClimate",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "Maize",
              "ResourceName": "Maize",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "Wheat",
              "ResourceName": "Wheat",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Wheat].Phenology.Zadok.Stage",
                "[Wheat].Phenology.CurrentStageName",
                "[Wheat].IsAlive",
                "[Wheat].IsReadyForHarvesting",
                "[Wheat].AboveGround.Wt",
                "[Wheat].AboveGround.N",
                "[Wheat].Grain.Total.Wt*10 as WheatYield",
                "[Maize].Grain.Total.Wt*10 as MaizeYield",
                "[Wheat].Grain.Protein",
                "[Wheat].Grain.Size",
                "[Wheat].Grain.Number",
                "[Wheat].Grain.Total.Wt",
                "[Wheat].Grain.Total.N",
                "[Wheat].Total.Wt",
                "",
                "Sum([Soil].SoilWater.ESW) as ESW",
                "[Soil].SoilWater.Es as ESoil"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "Report",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Management.FarmEconomics, Models",
          "InitialBalance": 0.0,
          "Balance": 0.0,
          "Name": "FarmEconomics",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Management.CostPriceInfo, Models",
              "VariableCost": 800.0,
              "Price": 200.0,
              "Name": "Wheat",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Management.CostPriceInfo, Models",
              "VariableCost": 1200.0,
              "Price": 350.0,
              "Name": "Maize",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Management.CostInfo, Models",
              "Cost": 0.8,
              "Name": "Urea",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Management.CostInfo, Models",
              "Cost": 12.0,
              "Name": "Roundup",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Management.FarmMachinery, Models",
          "FuelCost": 1.85,
          "TractorNames": [
            "220kW FWA",
            "220kW FWA",
            "SprayRig",
            "SprayRig"
          ],
          "ImplementNames": [
            "Planter",
            "Sprayer",
            "Planter",
            "Sprayer"
          ],
          "WorkRates": [
            42.0,
            0.0,
            0.0,
            50.0
          ],
          "FuelConsRates": [
            15.0,
            0.0,
            0.0,
            10.0
          ],
          "FuelConsumption": 0.0,
          "Name": "FarmMachinery",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Management.FarmMachineryItem, Models",
              "MachineryType": 0,
              "MaxHours": 12.0,
              "NewPrice": 0.0,
              "TradeInValue": 0.0,
              "LifeOfEquipment": 0.0,
              "OilTyreCost": 1.0,
              "RepairsMaintenance": 0.0,
              "Name": "220kW FWA",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Management.FarmMachineryItem, Models",
              "MachineryType": 1,
              "MaxHours": 12.0,
              "NewPrice": 0.0,
              "TradeInValue": 0.0,
              "LifeOfEquipment": 0.0,
              "OilTyreCost": 0.0,
              "RepairsMaintenance": 0.0,
              "Name": "Planter",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Management.FarmMachineryItem, Models",
              "MachineryType": 0,
              "MaxHours": 8.0,
              "NewPrice": 0.0,
              "TradeInValue": 0.0,
              "LifeOfEquipment": 0.0,
              "OilTyreCost": 0.5,
              "RepairsMaintenance": 0.0,
              "Name": "SprayRig",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Management.FarmMachineryItem, Models",
              "MachineryType": 1,
              "MaxHours": 8.0,
              "NewPrice": 0.0,
              "TradeInValue": 0.0,
              "LifeOfEquipment": 0.0,
              "OilTyreCost": 0.0,
              "RepairsMaintenance": 0.0,
              "Name": "Sprayer",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using System;",
            "using System.Linq;",
            "using System.Collections.Generic;",
            "using Models.Core;",
            "using Models.Interfaces;",
            "using Models.Functions;",
            "using Models.PMF;",
            "using Models.Soils;",
            "using Models.WaterModel;",
            "using Models.Management;",
            "using Models.Soils.Nutrients;",
            "using Models.Management;",
            "using Models.Utilities;",
            "using Models.Climate;",
            "using APSIM.Shared.Utilities;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class MScript : Model",
            "    {",
            "        [Link] private Clock Clock;",
            "        [Link] private Summary Summary;",
            "        [Link] private RotationManager RotationManager;",
            "",
            "        // The paddocks - ie the names of zones.",
            "        private List<string> myPaddockNames {get; set;}",
            "        public string[] managedPaddocks {get {return myPaddockNames.ToArray();} set {}}",
            "        ",
            "        // Default parameters for crops we manage.",
            "        // The parameters for each alias are child components (FarmCropMgtInfo) of this manager ",
            "        // Crop aliases: \"Early Wheat\" and \"Late Wheat\" both mean \"Wheat\", but different parameters. ",
            "        private Dictionary<string, FarmCropMgtInfo> cropDefaults; ",
            "       ",
            "        // Helpers for rotation arc rules. These will be called from the rotation manager ",
            "        // component, which in turn is asked to do the daily management step by us. ",
            "        public double CanSowEarlyWheat {get { return(canSow(\"Early Wheat\")); } set {} }",
            "        public double CanSowWheat {get { return(canSow(\"Wheat\")); } set {} }",
            "        public double CanSowMaize {get { return(canSow(\"Maize\")); } set {} }",
            "         ",
            "        public double CanHarvestEarlyWheat {get { return(canHarvest(\"Early Wheat\")); } set {} }",
            "        public double CanHarvestWheat {get { return(canHarvest(\"Wheat\")); } set {} }",
            "        public double CanHarvestMaize {get { return(canHarvest(\"Maize\")); } set {} }",
            "        ",
            "        // This is set during the management phase to the current paddock being managed.        ",
            "        public string _currentPaddock ;       ",
            "        public string currentPaddock {get => _currentPaddock; set => _currentPaddock = value; }",
            "        ",
            "        // Keep these around as they're tedious to find ",
            "        private Dictionary<string, Accumulator> accumulatedRain = new Dictionary<string, Accumulator>();",
            "        private Dictionary<string, Zone> myPaddockZones = new Dictionary<string, Zone>();",
            "        private Dictionary<string, WaterBalance> myWaterBalances = new Dictionary<string, WaterBalance>();",
            "        private Dictionary<string, Physical> myPhysicals = new Dictionary<string, Physical>();",
            "        ",
            "        // The current state of each paddock",
            "        public Dictionary<string, string> currentStateAll {get; private set;}",
            "        public string currentState {get { return currentStateAll[currentPaddock] ;} set {}}",
            "        public string getCurrentStateOfPaddock(string paddock) {",
            "           return currentStateAll[paddock];",
            "        }",
            "",
            "        private Dictionary<string, int> daysSinceLastHarvests;",
            "        [NonSerialized] private Events myEvents;",
            "           ",
            "        private bool afterInit = false;",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            cropDefaults = new Dictionary<string, FarmCropMgtInfo>();",
            "            foreach (var def in (this.Parent.Children).OfType<FarmCropMgtInfo>()) {",
            "               cropDefaults[def.Name] = def;",
            "               Summary.WriteMessage(this, $\"Found crop defaults for '{def.Name}' aka '{def.RealName}'\", MessageType.Diagnostic);",
            "            }",
            "            // A rain accumulator is kept for each crop",
            "            foreach (var crop in cropDefaults.Keys) {",
            "               accumulatedRain.Add(crop, new Accumulator(this, \"[Weather].Rain\", cropDefaults[crop].RainDays));",
            "            }",
            "            accumulatedRain.Add(\"weed\", new Accumulator(this, \"[Weather].Rain\", 4));",
            "            ",
            "            // Set up initial values",
            "            myEvents = new Events(this);",
            "            currentStateAll = new Dictionary<string, string>();",
            "            daysSinceLastHarvests = new Dictionary<string, int>();",
            "            myPaddockNames = new List<string>();",
            "            ",
            "            // find a child component with initial state parameters ",
            "            var initStateModel = (this.Parent.Children).OfType<FarmPaddocks>().FirstOrDefault();",
            "            ",
            "            for (var i = 0; i < initStateModel.PaddockNames.Length; i++) {",
            "               if (initStateModel.IsManaged[i]) ",
            "               {",
            "                  myPaddockNames.Add(initStateModel.PaddockNames[i]);",
            "                  if (! RotationManager.Nodes.Exists(x => x.Name == initStateModel.InitialState[i]))",
            "                     throw new Exception(\"Can't find a initial state/node called '\" + initStateModel.InitialState[i] + \"'\");",
            "                  currentStateAll.Add(initStateModel.PaddockNames[i], initStateModel.InitialState[i]);",
            "                  daysSinceLastHarvests.Add(initStateModel.PaddockNames[i], initStateModel.DaysSinceHarvest[i]);",
            "               }",
            "            }",
            "            ",
            "            // Hook up the water balance objects etc to our dictionaries ",
            "            foreach (var paddock in myPaddockNames) {",
            "                myPaddockZones[ paddock ] = FindInScope(paddock) as Zone; ",
            "                if (myPaddockZones[ paddock ]  == null) { throw new Exception(\"Can't find a paddock called '\" + paddock + \"'\");}",
            " ",
            "                myWaterBalances[ paddock ] = myPaddockZones[ paddock ].FindInScope(\"SoilWater\") as WaterBalance;",
            "                if (myWaterBalances[ paddock ] == null) { throw new Exception(\"Can't find a waterbalance in '\" + paddock + \"'\");}",
            "",
            "                myPhysicals[ paddock ] = myWaterBalances[ paddock ].FindSibling(\"Physical\") as Physical;",
            "               ",
            "                // trick the logger into recording initial state",
            "                currentPaddock = paddock;",
            "                RotationManager.CurrentState = currentStateAll[paddock];",
            "                RotationManager.DoLogState(); ",
            "                currentPaddock = \"\";",
            "                RotationManager.CurrentState = \"\";",
            "            }",
            "            afterInit = true;",
            "        }",
            "",
            "        [EventSubscribe(\"StartOfDay\")]",
            "        private void DoStartOfDay(object sender, EventArgs e) ",
            "        {",
            "        }",
            "        ",
            "        [EventSubscribe(\"EndOfDay\")]",
            "        private void DoEndOfDay(object sender, EventArgs e) ",
            "        {",
            "            foreach (var paddock in myPaddockNames) {",
            "               var cropIn = false;",
            "               var cropModules = cropDefaults.Values.Select(c => c.RealName).Distinct();",
            "               foreach (var crop in cropModules) {",
            "                  IPlant Crop = myPaddockZones[paddock].FindInScope(crop) as IPlant;",
            "                  if (Crop.IsAlive)",
            "                     cropIn = true;",
            "               }",
            "               if (!cropIn) ",
            "                  daysSinceLastHarvests[paddock]++;",
            "            }",
            "        }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void DoManagement(object sender, EventArgs e)",
            "        {",
            "            foreach (var crop in accumulatedRain.Keys) {",
            "               accumulatedRain[crop].Update();",
            "            }",
            "            ",
            "            bool moreToDo = true;",
            "            while (moreToDo) {",
            "               foreach (var paddock in myPaddockNames) {",
            "                  currentPaddock = paddock;",
            "                  RotationManager.CurrentState = currentStateAll[paddock];",
            "                  //Summary.WriteMessage(this, $\"Calling DoManagement for {currentPaddock}\", MessageType.Diagnostic);",
            "                  moreToDo = RotationManager.DoManagement();",
            "                  currentStateAll[paddock] = RotationManager.CurrentState;",
            "               }",
            "            }",
            "            currentPaddock = \"\";",
            "        }",
            "",
            "        // Rotation arc rules & actions. These depend on currentPaddock being set ",
            "        private double canSow (string crop) {",
            "            if (currentPaddock == \"\") { return 0; }",
            "            //Summary.WriteMessage(this, $\"Being asked for crop {crop} in {currentPaddock}\", MessageType.Diagnostic);",
            "            var Crop = findMyCrop(cropDefaults[crop].RealName);",
            "",
            "            if ((DateUtilities.WithinDates(cropDefaults[crop].StartDate, Clock.Today, cropDefaults[crop].EndDate) &&",
            "                 !Crop.IsAlive &&",
            "                 MathUtilities.Sum(myWaterBalances[currentPaddock].ESW) > cropDefaults[crop].MinESW &&",
            "                 accumulatedRain[crop].Sum > cropDefaults[crop].MinRain) ||",
            "                (!Crop.IsAlive && DateUtilities.DatesAreEqual(cropDefaults[crop].EndDate, Clock.Today) && ",
            "                 cropDefaults[crop].MustSow)) ",
            "                return 1; ",
            "            return 0; ",
            "        }",
            "               ",
            "        private double canHarvest (string crop) {",
            "            if (currentPaddock == \"\") { return 0; }",
            "            var Crop = findMyCrop(cropDefaults[crop].RealName);",
            "            if (Crop.IsReadyForHarvesting) {",
            "               return(1);",
            "            }",
            "            return(0);   ",
            "        }",
            "               ",
            "        public void SowCrop(string crop) ",
            "        {   ",
            "            crop = crop.Replace(\"\\\"\", \"\"); //NFI why the quotes are added in??",
            "            var myPaddock = FindInScope(currentPaddock) as Zone; ",
            "            if (myPaddock == null) { throw new Exception(\"Can't find a paddock called '\" + currentPaddock + \"'\");}",
            "            ",
            "            Plant Crop = myPaddock.FindInScope(cropDefaults[crop].RealName) as Plant;",
            "            if (Crop == null) { throw new Exception(\"Can't find crop called '\" + currentPaddock + \".\" + crop + \"'\");}",
            "",
            "            Summary.WriteMessage(this, this.FullPath + \" -  sowing \" + Crop.FullPath, MessageType.Diagnostic);",
            "            Crop.Sow(population: cropDefaults[crop].Population, cultivar: cropDefaults[crop].CultivarName, ",
            "                     depth: cropDefaults[crop].SowingDepth, rowSpacing: cropDefaults[crop].RowSpacing);",
            "            myEvents.Publish(\"DoPaddockExpenditure\",  new object[] { this, ",
            "                  new FarmEconomics.PaddockExpenditureArgs{",
            "                      Description = $\"{crop} Sowing\",",
            "                      Category = \"In-crop\", ",
            "                      Paddock = currentPaddock,",
            "                      Name = Crop.Name,",
            "                      Rate = 1,",
            "                      Area = myPaddockZones [ currentPaddock ].Area}});",
            "                      ",
            "            Fertiliser fert = myPaddock.FindInScope(\"Fertiliser\") as Fertiliser;",
            "            fert.Apply(cropDefaults[crop].fertAmount, cropDefaults[crop].fertType); ",
            "            myEvents.Publish(\"DoPaddockExpenditure\",  new object[] { this, ",
            "                  new FarmEconomics.PaddockExpenditureArgs{",
            "                      Description = $\"{crop} fertiliser\",",
            "                      Category = \"In-crop\", ",
            "                      Paddock = currentPaddock,",
            "                      Name = cropDefaults[crop].fertType,",
            "                      Rate = cropDefaults[crop].fertAmount,",
            "                      Area = myPaddockZones [ currentPaddock ].Area}}); ",
            "",
            "            myEvents.Publish(\"Operate\",  new object[] { this, ",
            "                  new FarmMachinery.FarmMachineryOperateArgs{",
            "                      Tractor = \"220kW FWA\",",
            "                      Implement = \"Planter\",",
            "                      Category = \"In-crop\",",
            "                      Paddock = currentPaddock}}); ",
            "",
            "            myEvents.Publish(\"KillWeeds\",  new object [] {this, ",
            "                  new EventArgs()}) ; ",
            "         }",
            "        ",
            "        public void HarvestCrop(string crop)",
            "        {",
            "            crop = crop.Replace(\"\\\"\", \"\");",
            "            var myPaddock = FindInScope(currentPaddock) as Zone; ",
            "            Plant Crop = myPaddock.FindInScope(cropDefaults[crop].RealName) as Plant;",
            "",
            "            Summary.WriteMessage(this, this.FullPath + \" -  harvesting \" + Crop.FullPath, MessageType.Diagnostic);",
            "            myEvents.Publish(\"DoPaddockIncome\",  new object[] { this, ",
            "                  new FarmEconomics.PaddockIncomeArgs{",
            "                       Description = $\"{crop} aka {Crop.Name} Harvest\",",
            "                       Category = \"In-crop\", ",
            "                       Paddock = currentPaddock,",
            "                       Name = Crop.Name,",
            "                       //  wet yield @ 14% moisture ",
            "                       Yield = 1.14 * GetValuebyName(myPaddock.Get(\"[\" + Crop.Name + \"].Grain.Total.Wt\")) * 10 / 1000,  // g/m2 -> t/ha",
            "                       Protein = GetValuebyName(myPaddock.Get(\"[\" + Crop.Name + \"].Grain.Protein\")) ,",
            "                       Area = myPaddockZones [ currentPaddock ].Area}});   ",
            "            Crop.Harvest();",
            "            Crop.EndCrop();",
            "            daysSinceLastHarvests[currentPaddock] = 0;",
            "            myEvents.Publish(\"CropHarvested\",  null); ",
            "        }",
            "",
            "        private Plant findMyCrop(string crop) {",
            "            if (currentPaddock == \"\") { return null; }",
            "            var myPaddock = FindInScope(currentPaddock) as Zone; ",
            "            if (myPaddock == null) { throw new Exception(\"Can't find a paddock called '\" + currentPaddock + \"'\");}",
            "            ",
            "            Plant Crop = myPaddock.FindInScope(cropDefaults[crop].RealName) as Plant;",
            "            if (Crop == null) { throw new Exception(\"Can't find crop called '\" + currentPaddock + \".\" + crop + \"'\");}",
            "            return (Crop);        ",
            "        }",
            "        ",
            "        private double GetValuebyName(object value) ",
            "        {",
            "            if (value is null) return(0);",
            "              ",
            "            if (value is IFunction function)",
            "                value = function.Value();",
            "                ",
            "            double result = (double) Convert.ChangeType(value, typeof(double));",
            "            return(result);",
            "        }",
            "",
            "",
            "        // More helpers for rotation arc rules. These rules also depend on currentPaddock being set ",
            "        // earlier (ie we're calling the rotation graph, and in turn, it's asking us for something)",
            "",
            "        // See if the potential area planted for this crop is less or equal to the total area allowed         ",
            "        public int AreaPlantedOk (string crop) {",
            "           double areaCrop = 0;",
            "           double areaTot = 0;",
            "           foreach (var paddockZone in myPaddockZones.Values) {",
            "               IPlant Crop = paddockZone.FindInScope(cropDefaults[crop].RealName) as IPlant;",
            "               if (Crop == null) { throw new Exception($\"Can't find crop {crop} in '{paddockZone.Name}'\");}",
            "               if (Crop.IsAlive) ",
            "                  areaCrop += paddockZone.Area;",
            "               areaTot += paddockZone.Area;",
            "           }",
            "           var thisPaddockArea = myPaddockZones [ currentPaddock ].Area;",
            "           var areaFrac = (thisPaddockArea + areaCrop) / areaTot ; ",
            "           int result = areaFrac <= cropDefaults[crop].maxArea ? 1 : 0;",
            "           //Summary.WriteMessage(this, $\"area rule for crop {crop} is {result}: this = {thisPaddockArea}, pot= {(areaCrop + thisPaddockArea)}, tot={areaTot}\", MessageType.Diagnostic);",
            "           return(result);        ",
            "        }",
            "        ",
            "        // The number of days since the last crop was harvested",
            "        public int daysSinceLastHarvest {",
            "           get { ",
            "             if (!afterInit) return 0;",
            "             return(daysSinceLastHarvests[currentPaddock]);",
            "           }",
            "           set {}",
            "        }",
            "        ",
            "        public int daysSinceLastHarvest_gt_30 {get {return (daysSinceLastHarvest > 30 ? 1 : 0); } set {}}",
            "        public int daysSinceLastHarvest_gt_180 {get {return (daysSinceLastHarvest > 180 ? 1 : 0); } set {}}",
            "        ",
            "",
            "    }",
            "}",
            ""
          ],
          "Parameters": [],
          "Name": "Manager",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "### Whole farm management \n\nThis simulation aims to manage paddocks from a single \"top level\" manager that applies a rotation to each, testing environmental (rainfall, water content), current (eg %age of farm planted) and historical (eg max 2 cereals in a row) states for what crop to sow next. \n\nThe top level manager ",
              "Name": "APSFarm",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Management.FarmPaddocks, Models",
              "PaddockNames": [
                "Field 1",
                "Field 2"
              ],
              "IsManaged": [
                true,
                true
              ],
              "InitialState": [
                "Fallow 1",
                "Summer Fallow"
              ],
              "DaysSinceHarvest": [
                44,
                16
              ],
              "Name": "Initial Values",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Management.FarmCropMgtInfo, Models",
              "RealName": "Wheat",
              "MinRain": 30.0,
              "RainDays": 7,
              "StartDate": "1-apr",
              "EndDate": "1-may",
              "MinESW": 80.0,
              "MustSow": true,
              "Population": 50.0,
              "CultivarName": "Hartog",
              "SowingDepth": 30.0,
              "RowSpacing": 250.0,
              "maxArea": 0.2,
              "fertType": "UreaGranular",
              "fertAmount": 120.0,
              "Name": "Early Wheat",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Management.FarmCropMgtInfo, Models",
              "RealName": "Wheat",
              "MinRain": 30.0,
              "RainDays": 7,
              "StartDate": "1-apr",
              "EndDate": "1-may",
              "MinESW": 80.0,
              "MustSow": true,
              "Population": 50.0,
              "CultivarName": "Hartog",
              "SowingDepth": 30.0,
              "RowSpacing": 250.0,
              "maxArea": 0.8,
              "fertType": "UreaGranular",
              "fertAmount": 120.0,
              "Name": "Wheat",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Management.FarmCropMgtInfo, Models",
              "RealName": "Maize",
              "MinRain": 20.0,
              "RainDays": 7,
              "StartDate": "1-nov",
              "EndDate": "30-dec",
              "MinESW": 80.0,
              "MustSow": true,
              "Population": 6.0,
              "CultivarName": "sc501",
              "SowingDepth": 50.0,
              "RowSpacing": 1000.0,
              "maxArea": 0.8,
              "fertType": "UreaGranular",
              "fertAmount": 200.0,
              "Name": "Maize",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using System;",
            "using System.Linq;",
            "using System.Collections.Generic;",
            "using Models.Core;",
            "using Models.Interfaces;",
            "using Models.Functions;",
            "using Models.PMF;",
            "using Models.Soils;",
            "using Models.WaterModel;",
            "using Models.Soils.Nutrients;",
            "using Models.Management;",
            "using Models.Utilities;",
            "using Models.Climate;",
            "using APSIM.Shared.Utilities;",
            "",
            "namespace Models",
            "{",
            "    public class WeedEventArgs: EventArgs",
            "    {",
            "       /// <summary> </summary>",
            "       public string Paddock { get; set; }",
            "    }        ",
            "    [Serializable]",
            "    public class WeedScript : Model",
            "    {",
            "        ////////////////////////////////////////////////////////",
            "        [Separator(\"Weeds - fallow cost of control\")]",
            "        [Description(\"Rainfall amount for germination (mm over 4 days)\")]",
            "        public double rainAmount{get; set;} ",
            "",
            "        [Description(\"Thermal time to seed set (dd)\")]",
            "        public double ttSum{get; set;} ",
            "",
            "        [Description(\"Surface soil water threshold for weed death (0-1)\")]",
            "        public double swFrac{get; set;} ",
            "       ",
            "        [Description(\"Control chemical ()\")]",
            "        public string controlChemical{get; set;} ",
            "",
            "        [Description(\"Control rate (l/ha)\")]",
            "        public double controlRate{get; set;} ",
            "       ",
            "        ////////////////////////////////////////////////////////",
            "        // The paddocks - ie the names of zones.",
            "        [NonSerialized] public List<string> myPaddockNames;",
            "        ",
            "        [Link] Simulation Simulation;",
            "        [Link] Weather Weather;",
            "        [Link] private Clock Clock;",
            "        [Link] private Summary Summary;",
            "        [Link] private RotationManager RotationManager;",
            "        [Link(ByName = true)] private Manager Manager;",
            "        private MScript ManagerScript ;",
            "        ",
            "        [NonSerialized] private Events myEvents;",
            "        private Accumulator accumulatedRain;",
            "        ",
            "        // Keep these around as they're tedious to find ",
            "        private Dictionary<string, Zone> myPaddockZones = new Dictionary<string, Zone>();",
            "        private Dictionary<string, WaterBalance> myWaterBalances = new Dictionary<string, WaterBalance>();",
            "        private Dictionary<string, Physical> myPhysicals = new Dictionary<string, Physical>();",
            "          ",
            "        private bool afterInit = false;",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            ManagerScript = Manager.Script as MScript;",
            "            accumulatedRain =  new Accumulator(this, \"[Weather].Rain\", 4);",
            "            ",
            "            // Set up initial values",
            "            myEvents = new Events(this);",
            "            myPaddockNames = ManagerScript.managedPaddocks.ToList();",
            "            ",
            "            // Hook up the water balance objects etc to our dictionaries ",
            "            foreach (var paddock in myPaddockNames) {",
            "                myPaddockZones[ paddock ] = FindInScope(paddock) as Zone; ",
            "                if (myPaddockZones[ paddock ]  == null) { throw new Exception(\"Can't find a paddock called '\" + paddock + \"'\");}",
            " ",
            "                myWaterBalances[ paddock ] = myPaddockZones[ paddock ].FindInScope(\"SoilWater\") as WaterBalance;",
            "                if (myWaterBalances[ paddock ] == null) { throw new Exception(\"Can't find a waterbalance in '\" + paddock + \"'\");}",
            "",
            "                myPhysicals[ paddock ] = myWaterBalances[ paddock ].FindSibling(\"Physical\") as Physical;",
            "                ",
            "                weedsGerminated.Add(paddock, false);",
            "                weedsTT.Add(paddock, 0);",
            "            }",
            "            afterInit = true;",
            "        }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void DoManagement(object sender, EventArgs e)",
            "        {",
            "            accumulatedRain.Update();",
            "            ",
            "            foreach (var paddock in myPaddockNames) {",
            "               checkWeeds(paddock);",
            "            }",
            "        }",
            "        ",
            "        // Weeds-------------------",
            "        private Dictionary<string, bool> weedsGerminated = new Dictionary<string, bool>();",
            "        private Dictionary<string, double> weedsTT = new Dictionary<string, double>();",
            "",
            "        //[EventSubscribe(\"CropHarvested\")] fixme",
            "",
            "",
            "        [EventSubscribe(\"KillWeeds\")]",
            "        private void KillWeeds(object sender, EventArgs e) {",
            "            var currentPaddock = ManagerScript.currentPaddock;",
            "            weedsGerminated[currentPaddock] = false;",
            "            weedsTT[currentPaddock] = 0;",
            "        }",
            "",
            "        private void checkWeeds (string paddock) {",
            "            var currentState = ManagerScript.getCurrentStateOfPaddock(paddock);",
            "            if (currentState.Contains(\"Fallow\", StringComparison.CurrentCultureIgnoreCase ) /*&&",
            "                daysSinceHarvest[paddock] > 30*/) {",
            "",
            "                  if (! weedsGerminated[paddock] && accumulatedRain.Sum >= rainAmount) {",
            "                     weedsGerminated[paddock] = true;",
            "                     weedsTT[paddock] = 0;",
            "                     Summary.WriteMessage(this, $\"Weeds germinating in {paddock}\", MessageType.Diagnostic);",
            "",
            "                  } else if (weedsGerminated[paddock]) {",
            "                     // Thermal time calc",
            "                     weedsTT[paddock] += (Weather.MaxT + Weather.MinT) / 2;",
            "         ",
            "                     // Surface SW calc",
            "                     var ll = myPhysicals[paddock].LL15[0];",
            "                     var dul = myPhysicals[paddock].DUL[0];",
            "                     var sw = myWaterBalances[paddock].SW[0];",
            "                     var swf = (sw-ll)/(dul-ll);",
            "         ",
            "                     if (swf < swFrac) {",
            "                         // kill off weeds",
            "                         weedsGerminated[paddock] = false;",
            "                         Summary.WriteMessage(this, $\"Weeds die in {paddock}\", MessageType.Diagnostic);",
            "         ",
            "                     } else if (weedsTT[paddock] > ttSum) {",
            "                         // Weeds are mature - spray them",
            "                         ",
            "                         myEvents.Publish(\"DoPaddockExpenditure\",  new object[] { this, ",
            "                             new FarmEconomics.PaddockExpenditureArgs {",
            "                                 Description = \"Weed control - \" + controlChemical,",
            "                                 Category = \"Fallow\", ",
            "                                 Paddock = paddock,",
            "                                 Name = controlChemical,",
            "                                 Rate = controlRate,",
            "                                 Area = myPaddockZones [ paddock ].Area}}); ",
            "                         myEvents.Publish(\"Operate\",  new object[] { this, ",
            "                             new FarmMachinery.FarmMachineryOperateArgs{",
            "                                Tractor = \"SprayRig\",",
            "                                Category = \"Fallow\", ",
            "                                Implement = \"Sprayer\",",
            "                                Paddock = paddock}}); ",
            "                         Summary.WriteMessage(this, $\"Weeds mature in {paddock} - sprayed out.\", MessageType.Diagnostic);",
            "                         weedsGerminated[paddock] = false;",
            "                         weedsTT[paddock] = 0;",
            "                     }  ",
            "                 }",
            "              }   ",
            "       }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "rainAmount",
              "Value": "0"
            },
            {
              "Key": "ttSum",
              "Value": "0"
            },
            {
              "Key": "swFrac",
              "Value": "0"
            },
            {
              "Key": "controlChemical",
              "Value": ""
            },
            {
              "Key": "controlRate",
              "Value": "0"
            }
          ],
          "Name": "Weeds",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using System;",
            "using System.Linq;",
            "using System.Collections.Generic;",
            "",
            "using Models.Core;",
            "using Models.Interfaces;",
            "using Models.Functions;",
            "using Models.Climate;",
            "using Models.Soils;",
            "using Models.WaterModel;",
            "using Models.Soils.Nutrients;",
            "using Models.Management;",
            "using Models.Utilities;",
            "",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "",
            "// General accumulator for rotations. Reports on each transition in each paddock",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class AccScript : Model",
            "    {",
            "        [Link] Simulation Simulation;",
            "        [Link] IClock Clock;",
            "        [Link] Weather Weather;",
            "        [Link] ISummary Summary;",
            "",
            "        [Link(ByName = true)] private Manager Manager;",
            "        private MScript ManagerScript ;",
            "        ",
            "        [Link(IsOptional = true)] private RotationManager RotationManager;",
            "        [Link(IsOptional = true)] private Zone defaultZone;",
            "",
            "        private Dictionary<string, Zone> myPaddockZones = null;",
            "        private Dictionary<string, WaterBalance> myWaterBalances;",
            "        private Dictionary<string, Nutrient> myNutrient;",
            "        private Dictionary<string, Solute> myNO3;",
            "        private Dictionary<string, Fertiliser> myFert;",
            "        private Dictionary<string, Plant> myCrops; // eg [\"paddockName,cropName\"]",
            "        ",
            "        // A state / accumulator for each thing in each paddock",
            "        private Dictionary<string, double> me = new Dictionary<string, double>();",
            "        private Dictionary<string, double[]> meArray = new Dictionary<string, double[]>();",
            "        private Dictionary<string, int> meInt = new Dictionary<string, int>();",
            "        ",
            "        private string currentPaddock {get { ",
            "           return((ManagerScript is null) ? ",
            "             defaultZone.Name : ",
            "                ManagerScript.currentPaddock); } set {}} ",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        public void OnStart_Simulation(object sender, EventArgs e) { ",
            "            myPaddockZones = new Dictionary<string, Zone>();",
            "            myWaterBalances = new Dictionary<string, WaterBalance>();",
            "            myNO3 = new Dictionary<string, Solute>();",
            "            myFert = new Dictionary<string, Fertiliser>();",
            "            myNutrient = new Dictionary<string, Nutrient>();",
            "            myCrops = new Dictionary<string, Plant>();",
            "            ",
            "            ManagerScript = Manager.Script as MScript;",
            "            ",
            "            foreach (var z in Simulation.FindAllChildren<Zone>() ) {",
            "               myPaddockZones.Add(z.Name, z);",
            "               ",
            "               var w = (z as Zone).FindInScope(\"SoilWater\") as WaterBalance;",
            "               myWaterBalances.Add(z.Name, w);",
            "",
            "               var no3 = (z as Zone).FindInScope(\"NO3\") as Solute;",
            "               myNO3.Add(z.Name, no3);",
            "",
            "               var nut = (z as Zone).FindInScope(\"Nutrient\") as Nutrient;",
            "               myNutrient.Add(z.Name, nut);",
            "",
            "               var fert = (z as Zone).FindInScope(\"Fertiliser\") as Fertiliser;",
            "               myFert.Add(z.Name, fert);",
            "               ",
            "               foreach (var c in z.FindAllChildren<Plant>() ) {",
            "                   myCrops.Add(z.Name + \",\" + c.Name, c);",
            "               }",
            "            }  ",
            "                    ",
            "            foreach (string paddockName in myPaddockZones.Keys) {",
            "               me.Add(paddockName + \"__NeedReset\", 1);",
            "",
            "               Summary.WriteMessage(this, \"Adding \" + paddockName, MessageType.Diagnostic);",
            "               me.Add(paddockName + \"_eswStart\", 0);",
            "               me.Add(paddockName + \"_eswYesterday\", 0);",
            "               me.Add(paddockName + \"_Ep\", 0);",
            "               me.Add(paddockName + \"_drainage\", 0);",
            "               me.Add(paddockName + \"_runoff\", 0);",
            "               me.Add(paddockName + \"_no3Start\", 0);",
            "               me.Add(paddockName + \"_no3Yesterday\", 0);",
            "               me.Add(paddockName + \"_rain\", 0);",
            "               me.Add(paddockName + \"_evaporation\", 0);",
            "               me.Add(paddockName + \"_applied_fert\", 0);",
            "               ",
            "               double[] TotalC = myNutrient[paddockName].TotalC.ToArray(); // ",
            "               meArray.Add(paddockName + \"_CStart\", new double[TotalC.Length]);",
            "               meArray.Add(paddockName + \"_CYesterday\", new double[TotalC.Length]);",
            "               meArray.Add(paddockName + \"_dlt_carbon_tot\", new double[TotalC.Length]);",
            "               meArray.Add(paddockName + \"_n2o_tot\", new double[TotalC.Length]);",
            "               meInt.Add(paddockName + \"_daysInPhase\", 0);",
            "               ",
            "",
            "               double[] dlayer = myWaterBalances[paddockName].Thickness.ToArray();",
            "               double dep = 0;",
            "               int iLayer = 0;",
            "               for (iLayer = 0; iLayer < dlayer.Length && dep < 300; iLayer++)",
            "                    dep += dlayer[iLayer];",
            "               if (dep != 300) { throw new Exception($\"Layer structure is not aligned to 300mm boundary in {paddockName}\"); }",
            "               meInt.Add(paddockName + \"_iLayer_300mm\", iLayer);",
            "               Summary.WriteMessage(this, \"L @300 = \" + iLayer.ToString(), MessageType.Diagnostic);",
            "      ",
            "               for ( ;iLayer < dlayer.Length && dep < 1000; iLayer++)",
            "                    dep += dlayer[iLayer];",
            "               //if (dep > 1000) { throw new Exception($\"Layer structure is not aligned to 1000mm boundary in {paddockName}\"); }",
            "               meInt.Add(paddockName + \"iLayer_300_1000mm\", iLayer);",
            "               Summary.WriteMessage(this, $\"L @1000 = {iLayer}  (= {dep} mm)\", MessageType.Diagnostic);",
            "",
            "           }",
            "       } ",
            "       ",
            "       [EventSubscribe(\"Transition\")] ",
            "       public void OnTransition(object sender, EventArgs e) {",
            "          me[currentPaddock + \"__NeedReset\"] = 1;",
            "       } ",
            "   ",
            "   [EventSubscribe(\"StartOfDay\")] ",
            "   public void OnStartOfDay(object sender, EventArgs e) { ",
            "      foreach (string paddockName in myPaddockZones.Keys) {",
            "         if (me[paddockName + \"__NeedReset\"] > 0) {",
            "            me[paddockName + \"__NeedReset\"] = 0;",
            "            me[paddockName + \"_eswStart\"] = MathUtilities.Sum(myWaterBalances[paddockName].ESW);",
            "            me[paddockName + \"_swYesterday\"] = me[paddockName + \"_eswStart\"];",
            "            me[paddockName + \"_Ep\"] = 0;",
            "            me[paddockName + \"_drainage\"] = 0;",
            "            me[paddockName + \"_runoff\"] = 0;",
            "            me[paddockName + \"_no3Start\"] = myNO3[paddockName].kgha.Sum();",
            "            me[paddockName + \"_no3Yesterday\"] = me[paddockName + \"_no3Start\"];",
            "            me[paddockName + \"_rain\"] = 0;",
            "            me[paddockName + \"_evaporation\"] = 0;",
            "            me[paddockName + \"_applied_fert\"] = 0;",
            "            ",
            "            // C pools aren't initialised properly until the end of the 1st day. Fudge it for now.",
            "            var TotalC = myNutrient[paddockName].TotalC.ToArray();",
            "            meArray[paddockName + \"_CStart\"] = TotalC;",
            "            meArray[paddockName + \"_CYesterday\"] = TotalC;",
            "            meArray[paddockName + \"_dlt_carbon_tot\"] = new double[TotalC.Length];",
            "            meArray[paddockName + \"_n2o_tot\"] = new double[TotalC.Length];",
            "            meInt[paddockName + \"_daysInPhase\"] = 0;",
            "            ",
            "         }",
            "      }",
            "   }",
            "    ",
            "   private IEnumerable<string> listCropsIn(string paddock) {",
            "      return(myCrops.Keys.ToList().",
            "          Where(c => c.StartsWith(paddock + \",\" )).",
            "          Select(s => s.Substring(s.IndexOf(',') + 1)));",
            "   }",
            "   ",
            "   [EventSubscribe(\"EndOfDay\")] ",
            "   public void OnEndOfDay(object sender, EventArgs e) { ",
            "      foreach (string paddockName in myPaddockZones.Keys) ",
            "      {",
            "         foreach (var cropName in listCropsIn(paddockName))",
            "         {",
            "            double Ep =  GetValuebyName(myPaddockZones[paddockName].Get($\"[{cropName}].Leaf.WaterAllocation\"));  ",
            "            me[paddockName + \"_Ep\"] += Ep;",
            "         }",
            "         ",
            "         me[paddockName + \"_swYesterday\"] = MathUtilities.Sum(myWaterBalances[paddockName].ESW);",
            "",
            "         me[paddockName + \"_drainage\"] += myWaterBalances[paddockName].Drainage;",
            "",
            "         me[paddockName + \"_runoff\"] += myWaterBalances[paddockName].Runoff;",
            "",
            "         me[paddockName + \"_rain\"] += Weather.Rain;",
            "         ",
            "         me[paddockName + \"_evaporation\"] += myWaterBalances[paddockName].Es;",
            "",
            "         me[paddockName + \"_applied_fert\"] += myFert[paddockName].NitrogenApplied;",
            "",
            "         me[paddockName + \"_no3Yesterday\"] = myNO3[paddockName].kgha.Sum();",
            "",
            "         var TotalC = myNutrient[paddockName].TotalC.ToArray();",
            "         if (MathUtilities.Sum( meArray[paddockName + \"_CStart\"] ) <= 0) {  // only occurs on the 1st day of simulation",
            "            meArray[paddockName + \"_CStart\"] = TotalC;  ",
            "         }",
            "         meArray[paddockName + \"_CYesterday\"] = TotalC;  ",
            "         for (int i = 0; i < TotalC.Length; i++) {",
            "            meArray[paddockName + \"_dlt_carbon_tot\"][i] = TotalC[i] - meArray[paddockName + \"_CStart\"][i];",
            "            meArray[paddockName + \"_n2o_tot\"][i] += myNutrient[paddockName].N2Oatm[i];",
            "         }",
            "         meInt[paddockName + \"_daysInPhase\"]++;",
            "      }",
            "    }",
            "",
            "   // Cumulative Ep: The total transpiration since the last transition",
            "   public double TEp {",
            "      get {return(getv(currentPaddock + \"_Ep\"));}",
            "      set {}",
            "   }",
            "   // Cumulative Drainage",
            "   public double TDrainage {",
            "      get {return(getv(currentPaddock + \"_drainage\"));}",
            "   }",
            "   // Cumulative Runoff",
            "   public double TRunoff {",
            "      get {return(getv(currentPaddock + \"_runoff\"));}",
            "   }",
            "   // <summary> The total rain since the last transition</summary>",
            "   public double TRainfall {",
            "      get {return(getv(currentPaddock + \"_rain\"));}",
            "   }",
            "   ",
            "   public double TEs {",
            "      get {return(getv(currentPaddock + \"_evaporation\"));}",
            "      set {}",
            "   }",
            "   // <summary> The total NO3 applied since the last transition </summary>",
            "   public double TFertAsNO3 {",
            "      get {return(getv(currentPaddock + \"_applied_fert\"));}",
            "      set {}",
            "   }",
            "",
            "   // <summary> Instantaneous sw at start </summary>",
            "   public double eswStart {",
            "      get { return(getv(currentPaddock + \"_eswStart\"));} ",
            "      set {}",
            "   }",
            "   // <summary> Instantaneous sw at end </summary>",
            "   public double eswYesterday {",
            "      get {return(getv(currentPaddock + \"_eswYesterday\"));} ",
            "      set {}",
            "   }",
            "   // <summary> Instantaneous no3 at start of a phase </summary>",
            "   public double no3Start { ",
            "      get {return(getv(currentPaddock + \"_no3Start\"));}",
            "   }",
            "   // <summary> Instantaneous no3 at end of a phase </summary>",
            "   public double no3Yesterday {",
            "      get {return(getv(currentPaddock + \"_no3Yesterday\"));}",
            "   }",
            "",
            "   // <summary> Instantaneous total carbon at start of a phase </summary>",
            "   public double[] totCStart { ",
            "      get {return(geta(currentPaddock + \"_CStart\"));}",
            "   }",
            "   // <summary> Instantaneous no3 at end of a phase </summary>",
            "   public double[] totCYesterday {",
            "      get {return(geta(currentPaddock + \"_CYesterday\"));}",
            "   }",
            "   ",
            "   // <summary> Change in total carbon to 300mm over water year </summary>",
            "   public double dlt_carbon_tot_300mm {",
            "      get {",
            "         double res = 0;",
            "         int n = getInt( currentPaddock + \"_iLayer_300mm\" );",
            "         for (var i = 0; i < n; i++)",
            "            res += geta(currentPaddock + \"_dlt_carbon_tot\", i);",
            "         return(res);",
            "      }",
            "   }",
            "    // <summary> Change in total carbon from 300mm - 1000mm over water year</summary>",
            "    public double dlt_carbon_tot_300_1000mm {",
            "      get {",
            "         double res = 0;",
            "         int n1 = getInt( currentPaddock + \"_iLayer_300mm\" );",
            "         int n2 = getInt( currentPaddock + \"_iLayer_300mm_1000mm\" );",
            "         for (var i = n1; i < n2; i++)",
            "            res += geta(currentPaddock + \"_dlt_carbon_tot\", i);",
            "         return(res);",
            "      }",
            "   }",
            "   ",
            "   ",
            "   // <summary> N2O emitted from top300mm since start of water year </summary>",
            "   public double n2o_300mm {",
            "      get {",
            "         double res = 0;",
            "         int n = getInt( currentPaddock + \"_iLayer_300mm\" );",
            "         for (var i = 0; i < n; i++)",
            "            res += geta(currentPaddock + \"_n2o_tot\", i);",
            "         return(res);",
            "      }",
            "   }",
            "   // <summary> N2O emitted from 300mm - 1000mm since start of water year</summary>",
            "   public double n2o_300_1000mm {",
            "      get {",
            "         double res = 0;",
            "         int n1 = getInt( currentPaddock + \"_iLayer_300mm\" );",
            "         int n2 = getInt( currentPaddock + \"_iLayer_300mm_1000mm\" );",
            "         for (var i = n1; i < n2; i++)",
            "            res += geta(currentPaddock + \"_n2o_tot\", i);",
            "         return(res);",
            "      }",
            "   }",
            "   ",
            "    //<summary>CO2 equivalent emissions to 300mm since transition</summary> ",
            "   public double co2_equiv_300mm {",
            "      get {",
            "         return((-1 * dlt_carbon_tot_300mm * 3.67 + ",
            "                 n2o_300mm * 298) / 1000.0);",
            "      }",
            "   }",
            "    //<summary>CO2 equivalent emissions from 300mm -  1000mm since transition</summary>",
            "   public double co2_equiv_300_1000mm {",
            "      get {",
            "         return((-1 * dlt_carbon_tot_300_1000mm * 3.67 + ",
            "            n2o_300_1000mm * 298) / 1000.0);",
            "      }",
            "   }",
            "",
            "   // <summary> Instantaneous yield (kg/ha, sum of all crops) </summary>",
            "   public double yield_kgha {",
            "      get{",
            "         double yld2 = 0;",
            "         foreach (var cropName in listCropsIn(currentPaddock))",
            "         {",
            "            // This is quite a mouthful. Should be an easier way to do this..",
            "            var yld =  GetValuebyName(myPaddockZones[currentPaddock].Get($\"[{cropName}].Grain.Total.Wt\")) * 10;  // g/m2 -> kg/ha",
            "            yld2 = yld2 + yld;",
            "         }",
            "         return yld2 ;",
            "      }",
            "      set {}",
            "   }",
            "",
            "   //<summary> Instantaneous yield (kg) of all crops </summary>",
            "   public double yield_kg {",
            "      get{",
            "         double yld2 = 0;",
            "         foreach (var cropName in listCropsIn(currentPaddock))",
            "         {",
            "            // This is quite a mouthful. Should be an easier way to do this..",
            "            var yld =  GetValuebyName(myPaddockZones[currentPaddock].Get($\"[{cropName}].Grain.Total.Wt\")) * 10;  // g/m2 -> kg/ha",
            "            yld2 = yld2 + yld * myPaddockZones[currentPaddock].Area;",
            "         }",
            "         return yld2 ;",
            "      }",
            "      set {}",
            "   }",
            "",
            "   //<summary> Instantaneous biomass (kg/ha) of all crops</summary>",
            "   public double biomass_kgha {",
            "      get{",
            "         double biomass2 = 0;",
            "         foreach (var cropName in listCropsIn(currentPaddock))",
            "         {",
            "            // This is quite a mouthful. Should be an easier way to do this..",
            "            var biomass =  GetValuebyName(myPaddockZones[currentPaddock].Get($\"[{cropName}].AboveGround.Wt\")) * 10;  // g/m2 -> kg/ha",
            "            biomass2 = biomass2 + biomass;",
            "         }",
            "         return biomass2 ;}",
            "      set {}",
            "   }",
            "   // <summary>Instantaneous biomass (kg) of all crops</summary>",
            "   public double biomass_kg {",
            "      get{",
            "         double biomass2 = 0;",
            "         foreach (var cropName in listCropsIn(currentPaddock))",
            "         {",
            "            // This is quite a mouthful. Should be an easier way to do this..",
            "            var biomass =  GetValuebyName(myPaddockZones[currentPaddock].Get($\"[{cropName}].AboveGround.Wt\")) * 10;  // g/m2 -> kg/ha",
            "            biomass2 = biomass2 + biomass * myPaddockZones[currentPaddock].Area;",
            "         }",
            "         return biomass2 ;}",
            "   }",
            "#if false",
            "   // Instantaneous protein of all crops",
            "   [Output, Description(\"Grain Protein\"), Units(\"%\")] public double protein {",
            "      get{",
            "         double pro2 = 0;",
            "         Paddock p = (Paddock) MySimulation.LinkByName(currentPaddock());",
            "         foreach (Component crop in p.Crops)",
            "         {",
            "            double pro = 0;",
            "            crop.Get(\"grain_protein\", out pro);",
            "            pro2 = pro2 + pro;",
            "         }",
            "        ",
            "         return pro2 ;}",
            "   }",
            "   ",
            "   // Instantaneous N of all crops",
            "   [Output, Description(\"Grain N\"), Units(\"g/m2\")] public double GrainN_gm2 {",
            "      get{",
            "         double GN2 = 0;",
            "         Paddock p = (Paddock) MySimulation.LinkByName(currentPaddock());",
            "         foreach (Component crop in p.Crops)",
            "         {",
            "            double GN = 0;",
            "            if (crop.Get(\"grain_N\", out GN))",
            "               GN2 = GN2 + GN;",
            "            else if (crop.Get(\"GrainGreenN\", out GN))",
            "               GN2 = GN2 + GN;",
            "         }",
            "         return GN2 ;}",
            "   }",
            "",
            "#endif",
            "   ",
            "   public int daysInPhase {",
            "      get {",
            "        return(getInt( currentPaddock + \"_daysInPhase\"));",
            "      }",
            "   }",
            "   ",
            "        private double[] geta(string key) {",
            "           if (meArray.ContainsKey(key)) return(meArray[key]);",
            "           return(null);",
            "        }",
            "",
            "        private double geta(string key, int i) {",
            "           if (meArray.ContainsKey(key)) return(meArray[key] [i]);",
            "           return(-1.0);",
            "        }",
            "        ",
            "        private double getv(string key) {",
            "           if (me.ContainsKey(key)) return(me[key]);",
            "           return(-1.0);",
            "        }",
            "        ",
            "        private int getInt(string key) {",
            "           if (meInt.ContainsKey(key)) return(meInt[key]);",
            "           return(0);",
            "        }",
            "        ",
            "        private double GetValuebyName(object value) ",
            "        {",
            "            double result;",
            "            if (value is IFunction function)",
            "                value = function.Value();",
            "            result = (double) Convert.ChangeType(value, typeof(double));",
            "            return(result);",
            "        }",
            "",
            "    ",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void DoDailyCalculations(object sender, EventArgs e)",
            "        {",
            "            // Called once per day",
            "        }",
            "    }",
            "}",
            ""
          ],
          "Parameters": [],
          "Name": "PhaseAccumulations",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Management.RotationManager, Models",
          "Nodes": [
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 1,
              "Name": "Summer Fallow",
              "Location": "454, 271",
              "Colour": "143, 89, 2"
            },
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 2,
              "Name": "Wheat",
              "Location": "256, 50",
              "Colour": "Red"
            },
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 3,
              "Name": "Maize",
              "Location": "265, 426",
              "Colour": "96, 96, 217"
            },
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 4,
              "Name": "Fallow 1",
              "Location": "78, 276",
              "Colour": "Lime"
            },
            {
              "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
              "Description": null,
              "Transparent": false,
              "ID": 5,
              "Name": "Early Wheat",
              "Location": "256, 193",
              "Colour": "173, 127, 168"
            }
          ],
          "Arcs": [
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 2,
              "DestinationID": 1,
              "Conditions": [
                "[Manager].Script.CanHarvestWheat"
              ],
              "Actions": [
                "[Manager].Script.HarvestCrop(\"Wheat\");"
              ],
              "BezierPoints": [
                "256, 50",
                "259, 49",
                "262, 49",
                "264, 49",
                "267, 49",
                "270, 49",
                "273, 49",
                "276, 49",
                "279, 49",
                "282, 49",
                "285, 49",
                "287, 49",
                "290, 49",
                "293, 49",
                "295, 49",
                "298, 49",
                "301, 49",
                "303, 49",
                "306, 49",
                "308, 49",
                "311, 49",
                "313, 49",
                "316, 49",
                "318, 49",
                "321, 49",
                "323, 49",
                "326, 49",
                "328, 49",
                "330, 49",
                "333, 49",
                "335, 49",
                "337, 49",
                "339, 49",
                "341, 49",
                "344, 49",
                "346, 49",
                "348, 49",
                "350, 49",
                "352, 49",
                "354, 49",
                "356, 49",
                "358, 50",
                "360, 50",
                "362, 50",
                "364, 50",
                "366, 50",
                "368, 50",
                "370, 50",
                "372, 50",
                "374, 50",
                "375, 51",
                "377, 51",
                "379, 51",
                "381, 51",
                "382, 51",
                "384, 51",
                "386, 51",
                "387, 52",
                "389, 52",
                "391, 52",
                "392, 52",
                "394, 52",
                "395, 53",
                "397, 53",
                "398, 53",
                "400, 53",
                "401, 54",
                "403, 54",
                "404, 54",
                "406, 54",
                "407, 55",
                "408, 55",
                "410, 55",
                "411, 56",
                "412, 56",
                "414, 56",
                "415, 57",
                "416, 57",
                "417, 57",
                "419, 58",
                "420, 58",
                "421, 58",
                "422, 59",
                "423, 59",
                "424, 60",
                "426, 60",
                "427, 61",
                "428, 61",
                "429, 61",
                "430, 62",
                "431, 62",
                "432, 63",
                "433, 63",
                "434, 64",
                "435, 65",
                "436, 65",
                "436, 66",
                "437, 66",
                "438, 67",
                "439, 67",
                "440, 68",
                "441, 69",
                "442, 69",
                "442, 70",
                "443, 71",
                "444, 71",
                "445, 72",
                "445, 73",
                "446, 73",
                "447, 74",
                "447, 75",
                "448, 76",
                "449, 76",
                "449, 77",
                "450, 78",
                "451, 79",
                "451, 80",
                "452, 81",
                "452, 81",
                "453, 82",
                "453, 83",
                "454, 84",
                "455, 85",
                "455, 86",
                "455, 87",
                "456, 88",
                "456, 89",
                "457, 90",
                "457, 91",
                "458, 92",
                "458, 93",
                "458, 94",
                "459, 95",
                "459, 96",
                "460, 97",
                "460, 98",
                "460, 100",
                "460, 101",
                "461, 102",
                "461, 103",
                "461, 104",
                "462, 106",
                "462, 107",
                "462, 108",
                "462, 109",
                "463, 111",
                "463, 112",
                "463, 113",
                "463, 115",
                "463, 116",
                "463, 118",
                "464, 119",
                "464, 120",
                "464, 122",
                "464, 123",
                "464, 125",
                "464, 126",
                "464, 128",
                "464, 130",
                "464, 131",
                "464, 133",
                "464, 134",
                "464, 136",
                "464, 138",
                "464, 139",
                "464, 141",
                "464, 143",
                "464, 145",
                "464, 146",
                "464, 148",
                "464, 150",
                "464, 152",
                "464, 154",
                "464, 155",
                "464, 157",
                "464, 159",
                "464, 161",
                "464, 163",
                "464, 165",
                "464, 167",
                "463, 169",
                "463, 171",
                "463, 173",
                "463, 175",
                "463, 178",
                "463, 180",
                "463, 182",
                "462, 184",
                "462, 186",
                "462, 189",
                "462, 191",
                "462, 193",
                "461, 195",
                "461, 198",
                "461, 200",
                "461, 202",
                "461, 205",
                "460, 207",
                "460, 210",
                "460, 212",
                "460, 215",
                "459, 217",
                "459, 220",
                "459, 222",
                "458, 225",
                "458, 228",
                "458, 230",
                "458, 233",
                "457, 236",
                "457, 239",
                "457, 241",
                "456, 244",
                "456, 247",
                "456, 250",
                "455, 253",
                "455, 256",
                "455, 259",
                "455, 261",
                "454, 264",
                "454, 267"
              ],
              "Source": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 2,
                "Name": "Wheat",
                "Location": "256, 50",
                "Colour": "Red"
              },
              "Destination": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 1,
                "Name": "Summer Fallow",
                "Location": "454, 271",
                "Colour": "143, 89, 2"
              },
              "ID": 6,
              "Name": "Arc 1",
              "Location": "479, 47",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 1,
              "DestinationID": 3,
              "Conditions": [
                "[Manager].Script.CanSowMaize",
                "[Manager].Script.daysSinceLastHarvest_gt_180",
                "[FarmMachinery].MachineryAvailable(\"220kW FWA\", \"Planter\")"
              ],
              "Actions": [
                "[Manager].Script.SowCrop(\"Maize\");"
              ],
              "BezierPoints": [
                "454, 271",
                "453, 273",
                "453, 275",
                "453, 277",
                "453, 279",
                "453, 281",
                "453, 283",
                "453, 285",
                "453, 287",
                "453, 289",
                "453, 291",
                "452, 293",
                "452, 295",
                "452, 297",
                "452, 299",
                "452, 301",
                "452, 303",
                "452, 305",
                "452, 306",
                "452, 308",
                "452, 310",
                "451, 312",
                "451, 314",
                "451, 315",
                "451, 317",
                "451, 319",
                "451, 320",
                "451, 322",
                "451, 323",
                "450, 325",
                "450, 327",
                "450, 328",
                "450, 330",
                "450, 331",
                "450, 333",
                "450, 334",
                "449, 336",
                "449, 337",
                "449, 339",
                "449, 340",
                "449, 341",
                "448, 343",
                "448, 344",
                "448, 345",
                "448, 347",
                "448, 348",
                "447, 349",
                "447, 351",
                "447, 352",
                "447, 353",
                "446, 354",
                "446, 355",
                "446, 357",
                "446, 358",
                "445, 359",
                "445, 360",
                "445, 361",
                "444, 362",
                "444, 363",
                "444, 364",
                "443, 365",
                "443, 367",
                "443, 368",
                "442, 369",
                "442, 370",
                "442, 371",
                "441, 372",
                "441, 372",
                "440, 373",
                "440, 374",
                "440, 375",
                "439, 376",
                "439, 377",
                "438, 378",
                "438, 379",
                "437, 380",
                "437, 380",
                "436, 381",
                "436, 382",
                "435, 383",
                "435, 384",
                "434, 384",
                "433, 385",
                "433, 386",
                "432, 387",
                "432, 387",
                "431, 388",
                "430, 389",
                "430, 389",
                "429, 390",
                "428, 391",
                "428, 391",
                "427, 392",
                "426, 393",
                "425, 393",
                "425, 394",
                "424, 395",
                "423, 395",
                "422, 396",
                "421, 396",
                "421, 397",
                "420, 397",
                "419, 398",
                "418, 399",
                "417, 399",
                "416, 400",
                "415, 400",
                "414, 401",
                "413, 401",
                "412, 402",
                "411, 402",
                "410, 403",
                "409, 403",
                "408, 403",
                "407, 404",
                "406, 404",
                "405, 405",
                "404, 405",
                "403, 406",
                "401, 406",
                "400, 406",
                "399, 407",
                "398, 407",
                "396, 408",
                "395, 408",
                "394, 408",
                "393, 409",
                "391, 409",
                "390, 409",
                "389, 410",
                "387, 410",
                "386, 410",
                "384, 411",
                "383, 411",
                "381, 411",
                "380, 412",
                "378, 412",
                "377, 412",
                "375, 413",
                "374, 413",
                "372, 413",
                "370, 414",
                "369, 414",
                "367, 414",
                "365, 414",
                "364, 415",
                "362, 415",
                "360, 415",
                "358, 415",
                "356, 416",
                "355, 416",
                "353, 416",
                "351, 417",
                "349, 417",
                "347, 417",
                "345, 417",
                "343, 418",
                "341, 418",
                "339, 418",
                "337, 418",
                "335, 419",
                "333, 419",
                "330, 419",
                "328, 419",
                "326, 419",
                "324, 420",
                "322, 420",
                "319, 420",
                "317, 420",
                "315, 421",
                "312, 421",
                "310, 421",
                "307, 421",
                "305, 422",
                "302, 422",
                "300, 422",
                "297, 422",
                "295, 423",
                "292, 423",
                "290, 423",
                "287, 423",
                "284, 424",
                "281, 424",
                "279, 424",
                "276, 424",
                "273, 425",
                "270, 425",
                "267, 425"
              ],
              "Source": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 1,
                "Name": "Summer Fallow",
                "Location": "454, 271",
                "Colour": "143, 89, 2"
              },
              "Destination": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 3,
                "Name": "Maize",
                "Location": "265, 426",
                "Colour": "96, 96, 217"
              },
              "ID": 7,
              "Name": "Arc 2",
              "Location": "448, 409",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 3,
              "DestinationID": 4,
              "Conditions": [
                "[Manager].Script.CanHarvestMaize"
              ],
              "Actions": [
                "[Manager].Script.HarvestCrop(\"Maize\");"
              ],
              "BezierPoints": [
                "265, 426",
                "261, 425",
                "258, 425",
                "255, 424",
                "251, 424",
                "248, 424",
                "245, 424",
                "242, 423",
                "239, 423",
                "235, 423",
                "232, 422",
                "229, 422",
                "226, 422",
                "223, 421",
                "221, 421",
                "218, 421",
                "215, 420",
                "212, 420",
                "209, 420",
                "207, 420",
                "204, 419",
                "201, 419",
                "198, 419",
                "196, 418",
                "193, 418",
                "191, 418",
                "188, 418",
                "186, 417",
                "183, 417",
                "181, 417",
                "178, 416",
                "176, 416",
                "174, 416",
                "172, 415",
                "169, 415",
                "167, 415",
                "165, 415",
                "163, 414",
                "160, 414",
                "158, 414",
                "156, 413",
                "154, 413",
                "152, 413",
                "150, 412",
                "148, 412",
                "146, 412",
                "144, 412",
                "143, 411",
                "141, 411",
                "139, 411",
                "137, 410",
                "135, 410",
                "134, 410",
                "132, 409",
                "130, 409",
                "128, 409",
                "127, 408",
                "125, 408",
                "124, 407",
                "122, 407",
                "121, 407",
                "119, 406",
                "118, 406",
                "116, 406",
                "115, 405",
                "113, 405",
                "112, 404",
                "111, 404",
                "109, 404",
                "108, 403",
                "107, 403",
                "105, 402",
                "104, 402",
                "103, 401",
                "102, 401",
                "101, 401",
                "100, 400",
                "98, 400",
                "97, 399",
                "96, 399",
                "95, 398",
                "94, 398",
                "93, 397",
                "92, 397",
                "91, 396",
                "90, 396",
                "89, 395",
                "89, 394",
                "88, 394",
                "87, 393",
                "86, 393",
                "85, 392",
                "84, 392",
                "84, 391",
                "83, 390",
                "82, 390",
                "81, 389",
                "81, 389",
                "80, 388",
                "79, 387",
                "79, 387",
                "78, 386",
                "78, 385",
                "77, 384",
                "77, 384",
                "76, 383",
                "75, 382",
                "75, 382",
                "74, 381",
                "74, 380",
                "74, 379",
                "73, 378",
                "73, 378",
                "72, 377",
                "72, 376",
                "72, 375",
                "71, 374",
                "71, 373",
                "71, 373",
                "70, 372",
                "70, 371",
                "70, 370",
                "70, 369",
                "69, 368",
                "69, 367",
                "69, 366",
                "69, 365",
                "69, 364",
                "68, 363",
                "68, 362",
                "68, 361",
                "68, 360",
                "68, 359",
                "68, 358",
                "68, 357",
                "68, 356",
                "68, 354",
                "68, 353",
                "68, 352",
                "67, 351",
                "67, 350",
                "67, 349",
                "68, 347",
                "68, 346",
                "68, 345",
                "68, 344",
                "68, 342",
                "68, 341",
                "68, 340",
                "68, 338",
                "68, 337",
                "68, 336",
                "68, 334",
                "68, 333",
                "69, 331",
                "69, 330",
                "69, 328",
                "69, 327",
                "69, 325",
                "70, 324",
                "70, 322",
                "70, 321",
                "70, 319",
                "70, 318",
                "71, 316",
                "71, 314",
                "71, 313",
                "71, 311",
                "72, 309",
                "72, 308",
                "72, 306",
                "72, 304",
                "73, 303",
                "73, 301",
                "73, 299",
                "74, 297",
                "74, 295",
                "74, 293",
                "75, 291",
                "75, 290",
                "75, 288",
                "76, 286",
                "76, 284",
                "76, 282",
                "77, 280",
                "77, 278"
              ],
              "Source": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 3,
                "Name": "Maize",
                "Location": "265, 426",
                "Colour": "96, 96, 217"
              },
              "Destination": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 4,
                "Name": "Fallow 1",
                "Location": "78, 276",
                "Colour": "Lime"
              },
              "ID": 8,
              "Name": "Arc 3",
              "Location": "55, 405",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 4,
              "DestinationID": 2,
              "Conditions": [
                "[Manager].Script.CanSowWheat",
                "[Manager].Script.AreaPlantedOk(\"Wheat\")",
                "[FarmMachinery].MachineryAvailable(\"220kW FWA\", \"Planter\")"
              ],
              "Actions": [
                "[Manager].Script.SowCrop(\"Wheat\");"
              ],
              "BezierPoints": [
                "78, 276",
                "78, 273",
                "78, 270",
                "78, 267",
                "78, 264",
                "78, 261",
                "78, 259",
                "78, 256",
                "78, 253",
                "78, 250",
                "78, 248",
                "78, 245",
                "78, 243",
                "78, 240",
                "78, 237",
                "78, 235",
                "78, 232",
                "78, 230",
                "78, 227",
                "78, 225",
                "78, 223",
                "78, 220",
                "78, 218",
                "79, 216",
                "79, 213",
                "79, 211",
                "79, 209",
                "79, 206",
                "79, 204",
                "79, 202",
                "79, 200",
                "79, 198",
                "79, 195",
                "79, 193",
                "79, 191",
                "79, 189",
                "79, 187",
                "80, 185",
                "80, 183",
                "80, 181",
                "80, 179",
                "80, 177",
                "80, 175",
                "80, 173",
                "80, 171",
                "80, 170",
                "80, 168",
                "81, 166",
                "81, 164",
                "81, 162",
                "81, 161",
                "81, 159",
                "81, 157",
                "81, 155",
                "82, 154",
                "82, 152",
                "82, 150",
                "82, 149",
                "82, 147",
                "82, 145",
                "83, 144",
                "83, 142",
                "83, 141",
                "83, 139",
                "83, 138",
                "84, 136",
                "84, 135",
                "84, 133",
                "84, 132",
                "85, 131",
                "85, 129",
                "85, 128",
                "85, 126",
                "86, 125",
                "86, 124",
                "86, 122",
                "86, 121",
                "87, 120",
                "87, 119",
                "87, 117",
                "88, 116",
                "88, 115",
                "88, 114",
                "89, 113",
                "89, 111",
                "89, 110",
                "90, 109",
                "90, 108",
                "90, 107",
                "91, 106",
                "91, 105",
                "91, 104",
                "92, 103",
                "92, 102",
                "93, 101",
                "93, 100",
                "94, 99",
                "94, 98",
                "94, 97",
                "95, 96",
                "95, 95",
                "96, 94",
                "96, 93",
                "97, 92",
                "97, 91",
                "98, 91",
                "98, 90",
                "99, 89",
                "99, 88",
                "100, 87",
                "101, 86",
                "101, 86",
                "102, 85",
                "102, 84",
                "103, 83",
                "104, 83",
                "104, 82",
                "105, 81",
                "105, 81",
                "106, 80",
                "107, 79",
                "107, 79",
                "108, 78",
                "109, 77",
                "110, 77",
                "110, 76",
                "111, 75",
                "112, 75",
                "112, 74",
                "113, 74",
                "114, 73",
                "115, 73",
                "116, 72",
                "116, 71",
                "117, 71",
                "118, 70",
                "119, 70",
                "120, 69",
                "121, 69",
                "122, 68",
                "122, 68",
                "123, 68",
                "124, 67",
                "125, 67",
                "126, 66",
                "127, 66",
                "128, 65",
                "129, 65",
                "130, 65",
                "131, 64",
                "132, 64",
                "133, 63",
                "134, 63",
                "135, 63",
                "137, 62",
                "138, 62",
                "139, 62",
                "140, 61",
                "141, 61",
                "142, 61",
                "143, 60",
                "145, 60",
                "146, 60",
                "147, 60",
                "148, 59",
                "149, 59",
                "151, 59",
                "152, 59",
                "153, 58",
                "155, 58",
                "156, 58",
                "157, 58",
                "159, 57",
                "160, 57",
                "161, 57",
                "163, 57",
                "164, 56",
                "166, 56",
                "167, 56",
                "169, 56",
                "170, 56",
                "172, 55",
                "173, 55",
                "175, 55",
                "176, 55",
                "178, 55",
                "179, 55",
                "181, 54",
                "183, 54",
                "184, 54",
                "186, 54",
                "188, 54",
                "189, 54",
                "191, 53",
                "193, 53",
                "194, 53",
                "196, 53",
                "198, 53",
                "200, 53",
                "202, 53",
                "203, 52",
                "205, 52",
                "207, 52",
                "209, 52",
                "211, 52",
                "213, 52",
                "215, 52",
                "217, 52",
                "219, 51",
                "221, 51",
                "223, 51",
                "225, 51",
                "227, 51",
                "229, 51",
                "231, 51",
                "233, 51",
                "235, 51",
                "237, 50",
                "240, 50",
                "242, 50",
                "244, 50",
                "246, 50",
                "249, 50",
                "251, 50",
                "253, 50"
              ],
              "Source": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 4,
                "Name": "Fallow 1",
                "Location": "78, 276",
                "Colour": "Lime"
              },
              "Destination": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 2,
                "Name": "Wheat",
                "Location": "256, 50",
                "Colour": "Red"
              },
              "ID": 9,
              "Name": "Arc 4",
              "Location": "81, 59",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 4,
              "DestinationID": 5,
              "Conditions": [
                "[Manager].Script.CanSowEarlyWheat",
                "[Manager].Script.AreaPlantedOk(\"Early Wheat\")",
                "[FarmMachinery].MachineryAvailable(\"220kW FWA\", \"Planter\")"
              ],
              "Actions": [
                "[Manager].Script.SowCrop(\"Early Wheat\");"
              ],
              "BezierPoints": [
                "78, 276",
                "78, 273",
                "79, 271",
                "80, 269",
                "80, 267",
                "81, 265",
                "82, 263",
                "83, 261",
                "83, 259",
                "84, 257",
                "85, 255",
                "85, 253",
                "86, 251",
                "87, 249",
                "87, 247",
                "88, 245",
                "89, 243",
                "89, 242",
                "90, 240",
                "91, 238",
                "91, 236",
                "92, 235",
                "93, 233",
                "93, 231",
                "94, 230",
                "94, 228",
                "95, 226",
                "96, 225",
                "96, 223",
                "97, 222",
                "97, 220",
                "98, 219",
                "99, 217",
                "99, 216",
                "100, 214",
                "100, 213",
                "101, 212",
                "101, 210",
                "102, 209",
                "103, 208",
                "103, 206",
                "104, 205",
                "104, 204",
                "105, 203",
                "105, 201",
                "106, 200",
                "107, 199",
                "107, 198",
                "108, 197",
                "108, 196",
                "109, 195",
                "109, 194",
                "110, 192",
                "111, 191",
                "111, 190",
                "112, 189",
                "112, 189",
                "113, 188",
                "114, 187",
                "114, 186",
                "115, 185",
                "115, 184",
                "116, 183",
                "116, 182",
                "117, 182",
                "118, 181",
                "118, 180",
                "119, 179",
                "120, 179",
                "120, 178",
                "121, 177",
                "121, 176",
                "122, 176",
                "123, 175",
                "123, 175",
                "124, 174",
                "125, 173",
                "125, 173",
                "126, 172",
                "127, 172",
                "127, 171",
                "128, 171",
                "129, 170",
                "129, 170",
                "130, 169",
                "131, 169",
                "132, 169",
                "132, 168",
                "133, 168",
                "134, 167",
                "135, 167",
                "135, 167",
                "136, 166",
                "137, 166",
                "138, 166",
                "139, 166",
                "139, 165",
                "140, 165",
                "141, 165",
                "142, 165",
                "143, 165",
                "144, 165",
                "145, 164",
                "145, 164",
                "146, 164",
                "147, 164",
                "148, 164",
                "149, 164",
                "150, 164",
                "151, 164",
                "152, 164",
                "153, 164",
                "154, 164",
                "155, 164",
                "156, 164",
                "157, 164",
                "158, 164",
                "159, 164",
                "160, 164",
                "161, 164",
                "162, 164",
                "164, 165",
                "165, 165",
                "166, 165",
                "167, 165",
                "168, 165",
                "169, 166",
                "171, 166",
                "172, 166",
                "173, 166",
                "174, 167",
                "176, 167",
                "177, 167",
                "178, 167",
                "180, 168",
                "181, 168",
                "182, 168",
                "184, 169",
                "185, 169",
                "186, 170",
                "188, 170",
                "189, 170",
                "191, 171",
                "192, 171",
                "194, 172",
                "195, 172",
                "197, 173",
                "198, 173",
                "200, 174",
                "202, 174",
                "203, 175",
                "205, 175",
                "207, 176",
                "208, 176",
                "210, 177",
                "212, 177",
                "213, 178",
                "215, 178",
                "217, 179",
                "219, 180",
                "221, 180",
                "223, 181",
                "224, 182",
                "226, 182",
                "228, 183",
                "230, 184",
                "232, 184",
                "234, 185",
                "236, 186",
                "238, 186",
                "240, 187",
                "242, 188",
                "245, 189",
                "247, 189",
                "249, 190",
                "251, 191",
                "253, 192"
              ],
              "Source": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 4,
                "Name": "Fallow 1",
                "Location": "78, 276",
                "Colour": "Lime"
              },
              "Destination": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 5,
                "Name": "Early Wheat",
                "Location": "256, 193",
                "Colour": "173, 127, 168"
              },
              "ID": 10,
              "Name": "Arc 5",
              "Location": "123, 146",
              "Colour": "Yellow"
            },
            {
              "$type": "APSIM.Shared.Graphing.Arc, APSIM.Shared",
              "SourceID": 5,
              "DestinationID": 1,
              "Conditions": [
                "[Manager].Script.CanHarvestEarlyWheat"
              ],
              "Actions": [
                "[Manager].Script.HarvestCrop(\"Early Wheat\");"
              ],
              "BezierPoints": [
                "256, 193",
                "258, 192",
                "260, 192",
                "262, 191",
                "264, 191",
                "266, 190",
                "268, 190",
                "269, 189",
                "271, 189",
                "273, 188",
                "275, 188",
                "277, 187",
                "279, 187",
                "281, 187",
                "283, 186",
                "284, 186",
                "286, 185",
                "288, 185",
                "290, 185",
                "291, 184",
                "293, 184",
                "295, 183",
                "296, 183",
                "298, 183",
                "300, 182",
                "301, 182",
                "303, 182",
                "304, 181",
                "306, 181",
                "307, 181",
                "309, 180",
                "310, 180",
                "312, 180",
                "313, 179",
                "315, 179",
                "316, 179",
                "318, 179",
                "319, 178",
                "320, 178",
                "322, 178",
                "323, 178",
                "325, 177",
                "326, 177",
                "327, 177",
                "328, 177",
                "330, 177",
                "331, 176",
                "332, 176",
                "334, 176",
                "335, 176",
                "336, 176",
                "337, 175",
                "338, 175",
                "340, 175",
                "341, 175",
                "342, 175",
                "343, 175",
                "344, 175",
                "345, 175",
                "346, 174",
                "348, 174",
                "349, 174",
                "350, 174",
                "351, 174",
                "352, 174",
                "353, 174",
                "354, 174",
                "355, 174",
                "356, 174",
                "357, 174",
                "358, 174",
                "359, 174",
                "360, 174",
                "361, 174",
                "362, 174",
                "363, 174",
                "364, 174",
                "364, 174",
                "365, 174",
                "366, 174",
                "367, 175",
                "368, 175",
                "369, 175",
                "370, 175",
                "371, 175",
                "371, 175",
                "372, 175",
                "373, 176",
                "374, 176",
                "375, 176",
                "376, 176",
                "376, 176",
                "377, 177",
                "378, 177",
                "379, 177",
                "380, 177",
                "380, 178",
                "381, 178",
                "382, 178",
                "383, 178",
                "383, 179",
                "384, 179",
                "385, 179",
                "386, 180",
                "386, 180",
                "387, 180",
                "388, 181",
                "388, 181",
                "389, 182",
                "390, 182",
                "391, 182",
                "391, 183",
                "392, 183",
                "393, 184",
                "393, 184",
                "394, 185",
                "395, 185",
                "395, 186",
                "396, 186",
                "397, 187",
                "397, 187",
                "398, 188",
                "399, 188",
                "399, 189",
                "400, 190",
                "401, 190",
                "401, 191",
                "402, 191",
                "403, 192",
                "403, 193",
                "404, 193",
                "405, 194",
                "405, 195",
                "406, 195",
                "407, 196",
                "407, 197",
                "408, 198",
                "409, 198",
                "409, 199",
                "410, 200",
                "410, 201",
                "411, 202",
                "412, 202",
                "412, 203",
                "413, 204",
                "414, 205",
                "414, 206",
                "415, 207",
                "416, 208",
                "416, 209",
                "417, 209",
                "418, 210",
                "418, 211",
                "419, 212",
                "420, 213",
                "420, 214",
                "421, 215",
                "422, 216",
                "422, 217",
                "423, 219",
                "424, 220",
                "425, 221",
                "425, 222",
                "426, 223",
                "427, 224",
                "427, 225",
                "428, 226",
                "429, 228",
                "430, 229",
                "430, 230",
                "431, 231",
                "432, 233",
                "432, 234",
                "433, 235",
                "434, 236",
                "435, 238",
                "436, 239",
                "436, 240",
                "437, 242",
                "438, 243",
                "439, 244",
                "440, 246",
                "440, 247",
                "441, 249",
                "442, 250",
                "443, 252",
                "444, 253",
                "445, 255",
                "445, 256",
                "446, 258",
                "447, 259",
                "448, 261",
                "449, 262",
                "450, 264",
                "451, 266",
                "452, 267",
                "453, 269"
              ],
              "Source": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 5,
                "Name": "Early Wheat",
                "Location": "256, 193",
                "Colour": "173, 127, 168"
              },
              "Destination": {
                "$type": "APSIM.Shared.Graphing.Node, APSIM.Shared",
                "Description": null,
                "Transparent": false,
                "ID": 1,
                "Name": "Summer Fallow",
                "Location": "454, 271",
                "Colour": "143, 89, 2"
              },
              "ID": 11,
              "Name": "Arc 6",
              "Location": "392, 161",
              "Colour": "Yellow"
            }
          ],
          "TopLevel": false,
          "InitialState": "initial",
          "Verbose": false,
          "Name": "RotationManager",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Management.RotationRugplot, Models",
              "SimulationName": "Farm",
              "CurrentPaddockString": "[Manager].Script.currentPaddock",
              "Name": "RotationRugplot",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today",
            "[Manager].Script.currentPaddock as Paddock",
            "[Manager].Script.currentState as currentState",
            "[FarmEconomics].Balance as Balance",
            "[PhaseAccumulations].AccScript.TRainfall as Rain",
            "//Sum of [FarmMachinery].FuelConsumption from [TransitionReport].DateOfLastOutput to [Clock].Today as FuelConsumption "
          ],
          "EventNames": [
            "[RotationManager].Transition"
          ],
          "GroupByVariableName": null,
          "Name": "TransitionReport",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}