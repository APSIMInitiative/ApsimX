{
  "$type": "Models.Core.Simulations, Models",
  "ExplorerWidth": 309,
  "Version": 54,
  "Name": "Simulations",
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "Children": [],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Name": "Sward",
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "StartDate": "1972-01-01T00:00:00",
          "EndDate": "1972-01-15T00:00:00",
          "Name": "Clock",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Weather, Models",
          "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
          "ExcelWorkSheetName": null,
          "Name": "Weather",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "CaptureErrors": true,
          "CaptureWarnings": true,
          "CaptureSummaryText": true,
          "Name": "Summary",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "SoilArbitrator",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "Code": "using System;\r\nusing System.Linq;\r\nusing System.Xml.Serialization;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.Interfaces;\r\nusing MathNet.Numerics.Distributions;\r\nusing MathNet.Numerics.LinearAlgebra;\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        // - Links to APSIM models\r\n        [Link] Simulation simulation;\r\n        [Link] Clock Clock;\r\n\r\n        // - Paramters for this manager\r\n        [Description(\"Number of realisaitons to be generated: \")] public int NumRealisations { get; set; }\r\n        [Description(\"First mean load of the generated distribution (g N): \")] public double MeanLoadToGenerate { get; set; }\r\n        [Description(\"Amount to add to the first mean every day (g N): \")] public double AmountAddMeanLoad { get; set; }\r\n        [Description(\"Means of the original distributions, mu_i load (gN) first and then mu_j volume (L): \")] public double[] VectorOfMeans { get; set; }\r\n        [Description(\"Covariance matrix - in order of E_ii, E_ij, E_ij, E_jj: \")] public double[] CovarianceMatrix { get; set; }\r\n\r\n        // - Outputs from this manager\r\n        [XmlIgnore][Units(\"g N\")] public double[] GeneratedLoad { get; set; } // Array of generated load values\r\n        [XmlIgnore][Units(\"L\")] public double[] GeneratedVolume { get; set; } // Array of generated volume values\r\n        [XmlIgnore][Units(\"g N\")] public double MeanGeneratedLoad { get; set; } // Mean generated load values\r\n        [XmlIgnore][Units(\"L\")] public double MeanGeneratedVolume { get; set; } // Mean of generated volume values\r\n\r\n        Random RandomNumGenerator = new Random(10);\r\n\r\n        [EventSubscribe(\"Commencing\")] private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n\r\n        }\r\n        \r\n        [EventSubscribe(\"DoManagement\")] private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            // Defines parameters of transformed distribution.\r\n            MeanLoadToGenerate += AmountAddMeanLoad;\r\n            double NormalMeanLoadToGenerate = Math.Log10(MeanLoadToGenerate) - 0.5 * CovarianceMatrix[0];\r\n\r\n            double[,] TransformedMu = { { NormalMeanLoadToGenerate },\r\n                                        { VectorOfMeans[1] }};\r\n\r\n            double[,] SigmaRows = { { CovarianceMatrix[0], CovarianceMatrix[1] },\r\n                                    { CovarianceMatrix[2], CovarianceMatrix[3] } };\r\n\r\n            double[,] SigmaColumns = { { 1} };\r\n\r\n            // Converts parameters to MathNet matrices.\r\n            Matrix<double> TransformedMuMatrix = Matrix<double>.Build.DenseOfArray(TransformedMu);\r\n            Matrix<double> SigmaRowsMatrix = Matrix<double>.Build.DenseOfArray(SigmaRows);\r\n            Matrix<double> SigmaColumnsMatrix = Matrix<double>.Build.DenseOfArray(SigmaColumns);\r\n\r\n            // Initializes transformed distribution.\r\n            var TransformedMVN = new MatrixNormal(TransformedMuMatrix,\r\n                                                  SigmaRowsMatrix,\r\n                                                  SigmaColumnsMatrix,\r\n                                                  RandomNumGenerator);\r\n\r\n            // Generates samples and transforms them back to lognormal space.\r\n            double[] LogNormalLoadSamples = new double[NumRealisations];\r\n            double[] LogNormalVolumeSamples = new double[NumRealisations];\r\n\r\n            for (int i = 0; i < NumRealisations; i++)\r\n            {\r\n                Matrix<double> LoadVolumeSample = TransformedMVN.Sample();\r\n                LogNormalLoadSamples[i] = Math.Pow(10.0, LoadVolumeSample[0,0]);\r\n                LogNormalVolumeSamples[i] = Math.Pow(10.0, LoadVolumeSample[1,0]);\r\n            }\r\n\r\n            // Updates some script parameters.\r\n            GeneratedLoad = LogNormalLoadSamples;\r\n            GeneratedVolume = LogNormalVolumeSamples;\r\n            MeanGeneratedLoad = LogNormalLoadSamples.Average();\r\n            MeanGeneratedVolume = LogNormalVolumeSamples.Average();\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagementCalculations\")] private void OnDoManagementCalculations(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n    }\r\n}\r\n",
          "Parameters": [
            {
              "Key": "NumRealisations",
              "Value": "15"
            },
            {
              "Key": "MeanLoadToGenerate",
              "Value": "0"
            },
            {
              "Key": "AmountAddMeanLoad",
              "Value": "2.5"
            },
            {
              "Key": "VectorOfMeans",
              "Value": "1.1567018157972,0.400851532821705"
            },
            {
              "Key": "CovarianceMatrix",
              "Value": "0.047123025480434,0.033361752139528,0.033361752139528,0.033598852595467"
            }
          ],
          "Name": "BivariateNormal",
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report.Report, Models",
          "ExperimentFactorNames": null,
          "ExperimentFactorValues": null,
          "VariableNames": [
            "[Clock].Today as Date",
            "// [BivariateNormal].Script.VectorOfMeans",
            "// [BivariateNormal].Script.CovarianceMatrix",
            "[BivariateNormal].Script.MeanLoadToGenerate",
            "[BivariateNormal].Script.MeanGeneratedLoad",
            "[BivariateNormal].Script.MeanGeneratedVolume",
            "[BivariateNormal].Script.GeneratedLoad",
            "[BivariateNormal].Script.GeneratedVolume"
          ],
          "EventNames": [
            "[Clock].EndOfDay"
          ],
          "Name": "BivariateNormalResults",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "Name": "Field",
          "Children": [
            {
              "$type": "Models.Core.Folder, Models",
              "ShowPageOfGraphs": true,
              "Name": "Managers",
              "Children": [
                {
                  "$type": "Models.Manager, Models",
                  "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\r\n// currenty defoliates the amount specified by spreading evenly over the specified period\r\n\r\nusing System;\r\nusing System.Xml.Serialization;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.Interfaces;\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        // - Links to APSIM models\r\n        [Link] Zone zone;\r\n        [Link] Clock Clock;\r\n        [Link] Fertiliser fertiliser;\r\n        [ScopedLinkByName] ISolute no3;\r\n        [Link] Soil mySoil;\r\n        [Link] ISummary summary = null;\r\n        [Link] AgPasture.Sward Pasture;\r\n        \r\n        // - Paramters for this manager\r\n        [Description(\"Allow this manager to control defoliation? \")]\r\n        public yesnoType AllowControl { get; set; }\r\n        [Description(\"Date to begin the rotation: \")]\r\n        public DateTime CutRotationStartDate { get; set; }\r\n        [Description(\"Date to finish the rotation: \")]\r\n        public DateTime CutRotationEndDate { get; set; }\r\n        [Description(\"How the interval is defined: \")]\r\n        public rotationIntervalTypes IntervalType { get; set; }\r\n        [Description(\"Rotation interval (days): \")]\r\n        public int CutInterval { get; set; }\r\n        [Description(\"Duration of each event (days): \")]\r\n        public int DurationOfCut { get; set; }\r\n        [Description(\"What amount is being defined: \")]\r\n        public removeAmountTypes RemoveAmountType { get; set; }\r\n        [Description(\"Amount to use (kg/ha): \")]\r\n        public double AmountGiven { get; set; }\r\n        [Description(\"How much of DM is removed from the field: \")]\r\n        public removeDMTypes DMRemoveType { get; set; }\r\n        [Description(\"Fraction of N that is removed from the field (0-1):\")]\r\n        public double FractionN2Remove { get; set; }\r\n        [Description(\"How defoliated material is returned to the field? \")]\r\n        public returnTypes ReturnType { get; set; }\r\n        [Description(\"How the partition of N to dung and urine are defined:\")]\r\n        public dungNContentTypes NDungType { get; set; }\r\n        [Description(\"Proportion of N returned in dung (0-1):\")]\r\n        public double ProportionN2Dung { get; set; }\r\n        [Description(\"The C:N of dung (typically around 20): \")]\r\n        public double CNRatioDung { get; set; }\r\n        [Description(\"Depth down to which urine is applied (mm): \")]\r\n        public double UrineDepth { get; set; }\r\n\r\n        // - Outputs from this manager\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today\r\n        public double DefoliatedWt { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today\r\n        public double DefoliatedN { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today\r\n        public double HarvestedWt { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today\r\n        public double HarvestedN { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field\r\n        public double RemovedWt { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field\r\n        public double RemovedN { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field\r\n        public double ReturnedWt { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field\r\n        public double ReturnedN { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)\r\n        public double NReturnedInDung { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)\r\n        public double NReturnedInUrine { get; set; }\r\n        [XmlIgnore][Units(\"day\")]// Description: Number of days after last defoliation\r\n        public int DaysAfterCut { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut\r\n        public double PreHarvestDM { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut\r\n        public double PostHarvestDM { get; set; }\r\n        // fraction of urine that is applied to each layer\r\n        private double[] fractionUrine;\r\n        // number of layer in the soil\r\n        private int nLayers;\r\n        \r\n        // - Internal variables\r\n        // fraction of harvested Dm to actually remove from field\r\n        private double fractionDM2Remove = 1.0;\r\n        // flag whether defoliation is allowed\r\n        private bool rotationAllowed = true;\r\n        // number of days for each defoliation event\r\n        private int cuttingDuration = 0;\r\n        // counter for day within each defoliation\r\n        private int daysCutting = 0;\r\n        // total existing DM harvestable\r\n        private double existingDM;\r\n        // total herbage to remove in g/m2 per day\r\n        private double herbageToRemove;\r\n        // type of DM amount (ResidualDM or DMToRemove)\r\n        private string amountType;\r\n        // auxiliary flag for defoliation\r\n        private bool aCutHasHappened = false;\r\n\r\n        // - Event to add residue or dung to surface OM\r\n        public event BiomassRemovedDelegate BiomassRemoved;\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n            // reset variables\r\n            DaysAfterCut = 0;\r\n            resetVariables();\r\n            cuttingDuration = DurationOfCut;\r\n            \r\n            // get the type of amount given\r\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\r\n                amountType = \"SetResidueAmount\";\r\n            else\r\n                amountType = \"SetRemoveAmount\";\r\n\r\n            // make sure that rotation start when startDate < simulationStartDay\r\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\r\n                CutRotationStartDate = Clock.Today;\r\n\r\n            // set the fraction of urine for each layer\r\n            nLayers = mySoil.Thickness.Length;\r\n            fractionUrine = new double[nLayers];\r\n            double soilDepth = 0.0;\r\n            double distFactor = 1.5;\r\n            if (ReturnType == returnTypes.AsDungUrine)\r\n            {\r\n                double atZ0;\r\n                double atZ1;\r\n                double totalProp = UrineDepth * Math.Pow(1.0, distFactor) / (distFactor + 1.0);\r\n                \r\n                atZ1 = (UrineDepth - soilDepth) * Math.Pow(1.0 - soilDepth / UrineDepth, distFactor) / (distFactor + 1.0);\r\n                for (int z = 0; z < nLayers; z++)\r\n                {\r\n                    atZ0 = atZ1;\r\n                    soilDepth += mySoil.Thickness[z];\r\n                    atZ1 = (UrineDepth - soilDepth) * Math.Pow(1.0 - soilDepth / UrineDepth, distFactor) / (distFactor + 1);\r\n                    if (1.0 - (soilDepth / UrineDepth) < 0.0)\r\n                        atZ1 = 0;\r\n                    fractionUrine[z] = (atZ0 - atZ1) / totalProp;\r\n                }\r\n            }\r\n        }\r\n        \r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            // Check whether defoliation is allowed at all\r\n            if (AllowControl == yesnoType.yes)\r\n            {\r\n                if (Clock.Today == CutRotationStartDate)\r\n                    DaysAfterCut = CutInterval;\r\n\r\n                // Check whether we can defoliate\r\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate))\r\n                {\r\n                    // Check whether we should start a defoliation\r\n                    if ((Pasture.IsAlive) && (DaysAfterCut >= (CutInterval - 1)))\r\n                        StartDefoliation(AmountGiven, amountType, DurationOfCut);\r\n                }\r\n            }\r\n\r\n            // Check whether we need to continue cutting\r\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\r\n            {\r\n                // reset outputs\r\n                resetVariables();\r\n\r\n                removeDM(herbageToRemove);\r\n                if (ReturnType == returnTypes.AsResidue)\r\n                    returnResidues();\r\n                else\r\n                    returnExcreta();\r\n                daysCutting += 1;\r\n                if (daysCutting == cuttingDuration)\r\n                    PostHarvestDM = Pasture.StandingHerbageWt;\r\n            }\r\n\r\n            // reset outputs\r\n            if (daysCutting < 0)\r\n            {\r\n                resetVariables();\r\n                daysCutting = 0;\r\n            }\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagementCalculations\")]\r\n        private void OnDoManagementCalculations(object sender, EventArgs e)\r\n        {\r\n            // Check whether a cutting has finished\r\n            if (daysCutting == cuttingDuration)\r\n            {\r\n                aCutHasHappened = true;\r\n                daysCutting = -1;\r\n            }\r\n\r\n            // Increase the counter for days after cutting\r\n            if (aCutHasHappened && (daysCutting == 0))\r\n                DaysAfterCut += 1;\r\n        }\r\n\r\n        // Resets the values of all outputs\r\n        private void resetVariables()\r\n        {\r\n            DefoliatedWt = 0.0;\r\n            DefoliatedN = 0.0;\r\n            HarvestedWt = 0.0;\r\n            HarvestedN = 0.0;\r\n            RemovedWt = 0.0;\r\n            RemovedN = 0.0;\r\n            ReturnedWt = 0.0;\r\n            ReturnedN = 0.0;\r\n            NReturnedInDung = 0.0;\r\n            NReturnedInUrine = 0.0;\r\n        }\r\n\r\n        // Description: Perform the basic calculations for defoliation\r\n        public void StartDefoliation(double amountDM, string amountType, int duration)\r\n        {\r\n            // Get the existing plant amount\r\n            PreHarvestDM = Pasture.StandingHerbageWt;\r\n            existingDM = Pasture.HarvestableWt;\r\n            \r\n            // Check the amount to remove and print some info\r\n            if ((amountType == \"SetRemoveAmount\") && (existingDM >= amountDM / duration))\r\n            {\r\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\");\r\n                herbageToRemove = amountDM / duration;\r\n            }\r\n            else if ((amountType == \"SetResidueAmount\") && (existingDM >= amountDM))\r\n            {\r\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\");\r\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\r\n            }\r\n            else\r\n            {\r\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\");\r\n                if (IntervalType == rotationIntervalTypes.FixedInterval)\r\n                    DaysAfterCut = -duration;\r\n                return;\r\n            }\r\n\r\n            cuttingDuration = duration;\r\n            // Preform first defoliation\r\n            removeDM(herbageToRemove);\r\n            if (ReturnType == returnTypes.AsResidue)\r\n                returnResidues();\r\n            else\r\n                returnExcreta();\r\n            daysCutting = 1;\r\n            DaysAfterCut = 0;\r\n            if (daysCutting == cuttingDuration)\r\n                PostHarvestDM = Pasture.StandingHerbageWt;\r\n        }\r\n\r\n        // Do the DM removal\r\n        private void removeDM(double removeAmount)\r\n        {\r\n            Pasture.Graze(amount: removeAmount, type: \"SetRemoveAmount\");\r\n            \r\n            // get total harvested\r\n            DefoliatedWt = Pasture.HarvestedWt;\r\n            DefoliatedN = Pasture.HarvestedN;\r\n            HarvestedWt = DefoliatedWt;\r\n            HarvestedN = DefoliatedN;\r\n\r\n            // get amounts actually removed from field and that to be returned (dung/urine)\r\n            if (DMRemoveType == removeDMTypes.RemoveAll)\r\n                fractionDM2Remove = 1.0;\r\n            else if (DMRemoveType == removeDMTypes.RemoveNone)\r\n                fractionDM2Remove = 0.0;\r\n            else\r\n                fractionDM2Remove = Pasture.HarvestedDigestibility;\r\n\r\n            RemovedWt = HarvestedWt * fractionDM2Remove;\r\n            RemovedN = HarvestedN * FractionN2Remove;\r\n            ReturnedWt = HarvestedWt - RemovedWt;\r\n            ReturnedN = HarvestedN - RemovedN;\r\n            \r\n            if (ReturnType == returnTypes.AsDungUrine)\r\n            {\r\n                if (NDungType == dungNContentTypes.DefineProportion)\r\n                    NReturnedInDung = ReturnedN * ProportionN2Dung;\r\n                else\r\n                    NReturnedInDung = Math.Min(ReturnedN, ReturnedWt * 0.4 / CNRatioDung);\r\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\r\n            }\r\n            else\r\n            {\r\n                NReturnedInDung = 0.0;\r\n                NReturnedInUrine = 0.0;\r\n            }\r\n        }\r\n\r\n        // Return dung and urine\r\n        private void returnExcreta()\r\n        {\r\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\r\n            {\r\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\r\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\r\n                float[] dltdm = new float[] { (Single)ReturnedWt };\r\n                float[] dltn = new float[] { (Single)NReturnedInDung };\r\n                float[] dltp = new float[] { 0 };\r\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\r\n\r\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\r\n                BiomassDung.dm_type = type;\r\n                BiomassDung.dlt_crop_dm = dltdm;\r\n                BiomassDung.dlt_dm_n = dltn;\r\n                BiomassDung.dlt_dm_p = dltp;\r\n                BiomassDung.fraction_to_residue = fraction;\r\n                BiomassRemoved.Invoke(BiomassDung);\r\n            }\r\n\r\n            if (NReturnedInUrine > 0.0)\r\n            {\r\n                double[] myUrineDeposition = new double[nLayers];\r\n                for (int z = 0; z < nLayers; z++)\r\n                    myUrineDeposition[z] = NReturnedInUrine * fractionUrine[z];\r\n\r\n                no3.AddKgHaDelta(SoluteSetterType.Fertiliser, myUrineDeposition);\r\n                //fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\r\n            }\r\n        }\r\n\r\n        // Return pasture residues\r\n        private void returnResidues()\r\n        {\r\n            if ((ReturnedWt > 0.0) || (ReturnedN > 0.0))\r\n            {\r\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\r\n                string[] type = new string[] { \"Grass\" };\r\n                float[] dltdm = new float[] { (Single)ReturnedWt };\r\n                float[] dltn = new float[] { (Single)ReturnedN };\r\n                float[] dltp = new float[] { 0 };\r\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\r\n\r\n                BiomassDung.crop_type = \"Grass\";\r\n                BiomassDung.dm_type = type;\r\n                BiomassDung.dlt_crop_dm = dltdm;\r\n                BiomassDung.dlt_dm_n = dltn;\r\n                BiomassDung.dlt_dm_p = dltp;\r\n                BiomassDung.fraction_to_residue = fraction;\r\n                BiomassRemoved.Invoke(BiomassDung);\r\n            }\r\n        }\r\n        \r\n        // Auxiliary bits and pieces  - - - - - - - - - - - - - - - - - - - - - - - -  - - - - -  - -\r\n\r\n        public enum yesnoType\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n        public enum removeAmountTypes\r\n        {\r\n            /// <summary>Setting DM amount to remove</summary>\r\n            DMToRemove,\r\n            /// <summary>Setting residual DM amount</summary>\r\n            ResidualDM\r\n        }\r\n\r\n        public enum rotationIntervalTypes\r\n        {\r\n            /// <summary>Setting a fixed interval</summary>\r\n            FixedInterval,\r\n            /// <summary>Setting a target (minimum) inteval</summary>\r\n            TargetInterval\r\n        }\r\n        \r\n        public enum removeDMTypes\r\n        {\r\n            /// <summary>Remove all DM</summary>\r\n            RemoveAll,\r\n            /// <summary>Remove no DM</summary>\r\n            RemoveNone,\r\n            /// <summary>Remove a fraction based on digestibility</summary>\r\n            BasedOnDigestibility\r\n        }\r\n\r\n        public enum returnTypes\r\n        {\r\n            /// <summary>Return plant material as residue</summary>\r\n            AsResidue,\r\n            /// <summary>Return meterial as dung and urine</summary>\r\n            AsDungUrine\r\n        }\r\n\r\n        public enum dungNContentTypes\r\n        {\r\n            /// <summary>Define the proportion of N returned as dung</summary>\r\n            DefineProportion,\r\n            /// <summary>Define the C:N of dung</summary>\r\n            DefineCNratio,\r\n        }\r\n    }\r\n}\r\n",
                  "Parameters": [
                    {
                      "Key": "AllowControl",
                      "Value": "yes"
                    },
                    {
                      "Key": "CutRotationStartDate",
                      "Value": "1900-01-01"
                    },
                    {
                      "Key": "CutRotationEndDate",
                      "Value": "2100-12-31"
                    },
                    {
                      "Key": "IntervalType",
                      "Value": "FixedInterval"
                    },
                    {
                      "Key": "CutInterval",
                      "Value": "21"
                    },
                    {
                      "Key": "DurationOfCut",
                      "Value": "1"
                    },
                    {
                      "Key": "RemoveAmountType",
                      "Value": "ResidualDM"
                    },
                    {
                      "Key": "AmountGiven",
                      "Value": "1000"
                    },
                    {
                      "Key": "DMRemoveType",
                      "Value": "BasedOnDigestibility"
                    },
                    {
                      "Key": "FractionN2Remove",
                      "Value": "0.75"
                    },
                    {
                      "Key": "ReturnType",
                      "Value": "AsDungUrine"
                    },
                    {
                      "Key": "NDungType",
                      "Value": "DefineProportion"
                    },
                    {
                      "Key": "ProportionN2Dung",
                      "Value": "0.4"
                    },
                    {
                      "Key": "CNRatioDung",
                      "Value": "0"
                    },
                    {
                      "Key": "UrineDepth",
                      "Value": "250"
                    }
                  ],
                  "Name": "CutRotation",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "Code": "using Models.Interfaces;\r\nusing System.Xml.Serialization;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Fertiliser fertiliser;\r\n        [Link] private ISummary summary;\r\n        [Link] private Soil Soil;\r\n        private DateTime lastApplicationDate;\r\n        private bool fertiliserIsAllowed;\r\n        private int nLayers;\r\n        [ScopedLinkByName]\r\n        private ISolute NO3;\r\n        [ScopedLinkByName]\r\n        private ISolute NH4;\r\n        [ScopedLinkByName]\r\n        private ISolute Urea;\r\n\r\n        //User inputs from properties tab\r\n        [Description(\"Turn ferliser applications on? \")]\r\n        public yesnoType AllowFertiliser { get; set; }\r\n        \r\n        [Description(\"Depth to calculate available soil N (mm): \")]\r\n        public double Depth2SoilN { get; set; }\r\n\r\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\r\n        public double CriticalSoilN { get; set; }\r\n\r\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\r\n        public double FertNAmount { get; set; }\r\n\r\n        [Description(\"Type of N fertiliser to apply: \")]\r\n        public Fertiliser.Types FertType { get; set; }\r\n\r\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\r\n        public double FertApplicationDepth { get; set; }\r\n       \r\n        [Description(\"Minimum period between applications (days): \")]\r\n        public double FertMinimumDays { get; set; }\r\n       \r\n        public enum yesnoType\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n        [XmlIgnore] public double TopMineralN { get; set; }\r\n        \r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\r\n            nLayers = Soil.Thickness.Length;\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\r\n            \r\n            // get the N stored in the soil\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            TopMineralN = 0.0;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.Thickness[layer]);\r\n                TopMineralN += (NO3.kgha[layer]\r\n                + NH4.kgha[layer]\r\n                + Urea.kgha[layer])\r\n                * fracLayer;\r\n                depthFromSurface += Soil.Thickness[layer];\r\n                if (depthFromSurface >= Depth2SoilN)\r\n                    layer = nLayers;\r\n            }\r\n\r\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\r\n            {\r\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\r\n                lastApplicationDate = Clock.Today;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                  "Parameters": [
                    {
                      "Key": "AllowFertiliser",
                      "Value": "yes"
                    },
                    {
                      "Key": "Depth2SoilN",
                      "Value": "500"
                    },
                    {
                      "Key": "CriticalSoilN",
                      "Value": "5"
                    },
                    {
                      "Key": "FertNAmount",
                      "Value": "25"
                    },
                    {
                      "Key": "FertType",
                      "Value": "UreaN"
                    },
                    {
                      "Key": "FertApplicationDepth",
                      "Value": "1"
                    },
                    {
                      "Key": "FertMinimumDays",
                      "Value": "15"
                    }
                  ],
                  "Name": "AutomaticFertiliser",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\n\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation Irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil Soil;\r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public bool allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string seasonStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string seasonEnd { get; set; }\r\n        [Description(\"Season allocation (mm)\")]\r\n        public double seasonsAllocation { get; set; }\r\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\r\n        public double triggerDeficit { get; set; }\r\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\r\n        public double targetDeficit { get; set; }\r\n        [Description(\"Minimum days for irrigation to return\")]\r\n        public double returndays { get; set; }\r\n        [Description(\"Maximum irrigation application (mm/day)\")]\r\n        public double maximumAmount { get; set; }\r\n        [Description(\"Depth to calculate PAWC (mm)\")]\r\n        public double depthPAWC { get; set; }\r\n\r\n        //Class members\r\n        [XmlIgnore] public double TopSWdeficit { get; set; }\r\n        [XmlIgnore] public double TopSWC { get; set; }\r\n        [XmlIgnore] public double DaysSinceIrrigation { get; set; }\r\n        [XmlIgnore] public double AmountToApply { get; set; }\r\n        [XmlIgnore] public double SeasonAppliedAmount { get; set; }\r\n        \r\n        private bool IrrigationIsAllowed { get; set; }\r\n        private bool SeasonIsOpen { get; set; }\r\n        private bool CropIsActive { get; set; }\r\n        private bool IrrigatorIsAvailable { get; set; }\r\n        private bool SoilIsDry { get; set; }\r\n\r\n        private DateTime StartDate;\r\n        private DateTime EndDate;\r\n        private double TopDUL;\r\n        private double TopLL;\r\n        private int nLayers;\r\n    \r\n        //Calculate static soil variables\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {   \r\n            //Set the season dates\r\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\r\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\r\n            \r\n            //Can we irrigate at all?\r\n            IrrigationIsAllowed = false; \r\n            if (allowIrrigation)\r\n                IrrigationIsAllowed = true; \r\n\r\n            //Calculate soil water variables\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            nLayers = Soil.Thickness.Length;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.Thickness[layer]);\r\n                TopLL += Soil.LL15mm[layer] * fracLayer;\r\n                TopDUL += Soil.DULmm[layer] * fracLayer;\r\n                depthFromSurface += Soil.Thickness[layer];\r\n                if (depthFromSurface >= depthPAWC)\r\n                    layer = nLayers;\r\n            }\r\n        }\r\n             \r\n        //Determine daily requirement for irrigation\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            //Can we irrigate today?          \r\n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\r\n\r\n            //Is there a crop in the ground that needs irrigation?\r\n            CropIsActive = false;\r\n            if ((existingCrop != null) && (existingCrop.IsAlive))\r\n                CropIsActive = true;\r\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\r\n          \r\n            //Is the irrigator available?\r\n            IrrigatorIsAvailable = false;\r\n            DaysSinceIrrigation += 1;\r\n            if (DaysSinceIrrigation >= returndays)\r\n                IrrigatorIsAvailable = true;\r\n          \r\n            //Is the soil dry enough to require irrigation?\r\n            SoilIsDry = false;\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            TopSWC = 0.0;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            //for (int layer = 0; depthFromSurface < depthPAWC + Soil.Thickness[layer]; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.Thickness[layer]);\r\n                TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;\r\n                depthFromSurface += Soil.Thickness[layer];\r\n                if (depthFromSurface >= depthPAWC)\r\n                    layer = nLayers;\r\n            }\r\n            \r\n            TopSWdeficit = TopSWC - TopDUL;\r\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\r\n                SoilIsDry = true;\r\n                \r\n            //Are all the conditions ratifying irrigation\r\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\r\n            {\r\n                //Lets bloody well irrigate then!!!!\r\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\r\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\r\n                Irrigation.Apply(AmountToApply);\r\n                DaysSinceIrrigation = 0;\r\n                SeasonAppliedAmount += AmountToApply;\r\n            }\r\n        }\r\n        \r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n    }\r\n}\r\n",
                  "Parameters": [
                    {
                      "Key": "allowIrrigation",
                      "Value": "True"
                    },
                    {
                      "Key": "seasonStart",
                      "Value": "15-Aug"
                    },
                    {
                      "Key": "seasonEnd",
                      "Value": "30-May"
                    },
                    {
                      "Key": "seasonsAllocation",
                      "Value": "10000"
                    },
                    {
                      "Key": "triggerDeficit",
                      "Value": "75"
                    },
                    {
                      "Key": "targetDeficit",
                      "Value": "99"
                    },
                    {
                      "Key": "returndays",
                      "Value": "1"
                    },
                    {
                      "Key": "maximumAmount",
                      "Value": "30"
                    },
                    {
                      "Key": "depthPAWC",
                      "Value": "300"
                    }
                  ],
                  "Name": "AutomaticIrrigation",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 0.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "soil_albedo": 0.23,
              "SoilHeatFluxFraction": 0.4,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "InitialResidueName": "Sward",
              "InitialResidueType": "grass",
              "InitialResidueMass": 1000.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 15.0,
              "FractionFaecesAdded": 0.5,
              "ResourceName": "SurfaceOrganicMatter",
              "Name": "SurfaceOrganicMatter",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "Weirdo": null,
              "RecordNumber": 0,
              "ASCOrder": null,
              "ASCSubOrder": null,
              "SoilType": "NZ_Sedimentary",
              "LocalName": "Lismore",
              "Site": "Winchmore",
              "NearestTown": "Ashburton",
              "Region": "Canterbury",
              "State": null,
              "Country": "New Zealand",
              "NaturalVegetation": null,
              "ApsoilNumber": null,
              "Latitude": -48.48,
              "Longitude": 0.0,
              "LocationAccuracy": null,
              "DataSource": null,
              "Comments": null,
              "Name": "LismoreSoil",
              "Children": [
                {
                  "$type": "Models.Soils.Analysis, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    150.0,
                    250.0,
                    300.0,
                    300.0
                  ],
                  "Rocks": [
                    0.0,
                    0.0,
                    10.0,
                    40.0,
                    60.0,
                    70.0,
                    70.0
                  ],
                  "RocksMetadata": null,
                  "Texture": null,
                  "TextureMetadata": null,
                  "MunsellColour": null,
                  "MunsellMetadata": null,
                  "EC": null,
                  "ECMetadata": null,
                  "PH": [
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0
                  ],
                  "PHMetadata": null,
                  "CL": null,
                  "CLMetadata": null,
                  "Boron": null,
                  "BoronMetadata": null,
                  "CEC": [
                    12.5,
                    10.0,
                    9.0,
                    5.0,
                    4.0,
                    4.0,
                    4.0
                  ],
                  "CECMetadata": null,
                  "Ca": null,
                  "CaMetadata": null,
                  "Mg": null,
                  "MgMetadata": null,
                  "Na": null,
                  "NaMetadata": null,
                  "K": null,
                  "KMetadata": null,
                  "ESP": null,
                  "ESPMetadata": null,
                  "Mn": null,
                  "MnMetadata": null,
                  "Al": null,
                  "AlMetadata": null,
                  "ParticleSizeSand": [
                    15.0,
                    20.0,
                    25.0,
                    35.0,
                    40.0,
                    40.0,
                    40.0
                  ],
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSilt": [
                    65.0,
                    65.0,
                    63.0,
                    57.0,
                    54.0,
                    55.0,
                    55.0
                  ],
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClay": [
                    20.0,
                    15.0,
                    12.0,
                    8.0,
                    6.0,
                    5.0,
                    5.0
                  ],
                  "ParticleSizeClayMetadata": null,
                  "PHUnits": 0,
                  "BoronUnits": 0,
                  "Name": "Analysis",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    150.0,
                    250.0,
                    300.0,
                    300.0
                  ],
                  "BD": [
                    1.3,
                    1.35,
                    1.0,
                    0.53,
                    0.31,
                    0.3,
                    0.3
                  ],
                  "AirDry": [
                    0.05,
                    0.12,
                    0.055,
                    0.015,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "LL15": [
                    0.15,
                    0.14,
                    0.055,
                    0.015,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "DUL": [
                    0.36,
                    0.34,
                    0.19,
                    0.065,
                    0.04,
                    0.03,
                    0.03
                  ],
                  "SAT": [
                    0.45,
                    0.43,
                    0.25,
                    0.15,
                    0.11,
                    0.11,
                    0.11
                  ],
                  "KS": [
                    5000.0,
                    2500.0,
                    3000.0,
                    10000.0,
                    17500.0,
                    20000.0,
                    20000.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "Name": "Water",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.15,
                        0.14,
                        0.06,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.08,
                        0.04,
                        0.01,
                        0.0,
                        0.0
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        0.0,
                        0.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "SwardSoil",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.15,
                        0.14,
                        0.06,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.08,
                        0.04,
                        0.01,
                        0.0,
                        0.0
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        0.0,
                        0.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "RyegrassSoil",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.15,
                        0.14,
                        0.06,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.08,
                        0.04,
                        0.01,
                        0.0,
                        0.0
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        0.0,
                        0.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "WhiteCloverSoil",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.SoilWater, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 6.0,
                  "SummerCona": 3.5,
                  "WinterDate": "1-apr",
                  "WinterU": 2.0,
                  "WinterCona": 2.0,
                  "DiffusConst": 88.0,
                  "DiffusSlope": 35.0,
                  "Salb": 0.13,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "slope": 0.0,
                  "discharge_width": 0.0,
                  "catchment_area": 0.0,
                  "max_pond": 0.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    150.0,
                    250.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.5,
                    0.52,
                    0.55,
                    0.6,
                    0.65,
                    0.65,
                    0.65
                  ],
                  "KLAT": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "ResidueInterception": 0.0,
                  "Name": "SoilWater",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.SoilNitrogen, Models",
                  "fom_types": [
                    "default",
                    "manure",
                    "mucuna",
                    "lablab",
                    "shemp",
                    "stable"
                  ],
                  "fract_carb": [
                    0.2,
                    0.3,
                    0.54,
                    0.57,
                    0.45,
                    0.0
                  ],
                  "fract_cell": [
                    0.7,
                    0.3,
                    0.37,
                    0.37,
                    0.47,
                    0.1
                  ],
                  "fract_lign": [
                    0.1,
                    0.4,
                    0.09,
                    0.06,
                    0.08,
                    0.9
                  ],
                  "Name": "SoilNitrogen",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilNitrogenNO3, Models",
                      "Name": "NO3",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenNH4, Models",
                      "Name": "NH4",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenUrea, Models",
                      "Name": "Urea",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                      "Name": "PlantAvailableNO3",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                      "Name": "PlantAvailableNH4",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.SoilOrganicMatter, Models",
                  "RootCN": 40.0,
                  "SoilCN": 12.0,
                  "EnrACoeff": 7.4,
                  "EnrBCoeff": 0.2,
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    150.0,
                    250.0,
                    300.0,
                    300.0
                  ],
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-50",
                    "50-65",
                    "65-90",
                    "90-120",
                    "120-150"
                  ],
                  "OC": [
                    3.0,
                    1.0,
                    0.6,
                    0.4,
                    0.25,
                    0.15,
                    0.1
                  ],
                  "OCMetadata": null,
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.0,
                    0.0
                  ],
                  "FInert": [
                    0.5,
                    0.7,
                    0.83,
                    0.9,
                    0.95,
                    0.99,
                    0.99
                  ],
                  "RootWt": [
                    331.337020409173,
                    245.46050190550559,
                    164.53709493722965,
                    121.89207790753734,
                    73.931282427002344,
                    40.574348067292682,
                    22.267674346259405
                  ],
                  "OCUnits": 0,
                  "Name": "SoilOrganicMatter",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.InitialWater, Models",
                  "PercentMethod": 1,
                  "FractionFull": 0.95,
                  "DepthWetSoil": "NaN",
                  "RelativeTo": null,
                  "Name": "Initial water",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Sample, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    150.0,
                    250.0,
                    300.0,
                    300.0
                  ],
                  "NO3": [
                    5.0,
                    2.5,
                    1.0,
                    0.75,
                    0.5,
                    0.5,
                    0.5
                  ],
                  "NH4": [
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1
                  ],
                  "SW": null,
                  "OC": null,
                  "EC": null,
                  "CL": null,
                  "ESP": null,
                  "PH": null,
                  "NO3Units": 0,
                  "NH4Units": 0,
                  "SWUnits": 0,
                  "OCUnits": 0,
                  "PHUnits": 0,
                  "Name": "Initial nitrogen",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "CERESSoilTemperature",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.AgPasture.Sward, Models",
              "ControlledBySward": 0,
              "WaterUptakeSource": "soilarbitrator",
              "NUptakeSource": "soilarbitrator",
              "Name": "Sward",
              "Children": [
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "MaximumNUptake": 10.0,
                  "Albedo": 0.26,
                  "Gsmax": 0.011,
                  "R50": 200.0,
                  "SpeciesFamily": 0,
                  "PhotosyntheticPathway": 0,
                  "InitialShootDM": 1500.0,
                  "InitialRootDM": 450.0,
                  "InitialRootDepth": 750.0,
                  "ReferencePhotosyntheticRate": 1.0,
                  "LightExtinctionCoefficient": 0.5,
                  "GrowthTminimum": 1.0,
                  "GrowthToptimum": 20.0,
                  "GrowthTEffectExponent": 1.7,
                  "UseHeatStressFactor": 0,
                  "HeatOnsetTemperature": 28.0,
                  "HeatFullTemperature": 35.0,
                  "HeatRecoverySumDD": 30.0,
                  "HeatRecoveryTReference": 25.0,
                  "UseColdStressFactor": 0,
                  "ColdOnsetTemperature": 1.0,
                  "ColdFullTemperature": -5.0,
                  "ColdRecoverySumDD": 25.0,
                  "ColdRecoveryTReference": 0.0,
                  "MaintenanceRespirationCoefficient": 0.03,
                  "GrowthRespirationCoefficient": 0.25,
                  "RespirationTReference": 20.0,
                  "RespirationExponent": 1.5,
                  "NThresholdsForLeaves": [
                    0.04,
                    0.012,
                    0.05
                  ],
                  "NThresholdsForStems": [
                    0.02,
                    0.006,
                    0.025
                  ],
                  "NThresholdsForStolons": [
                    0.0,
                    0.0,
                    0.0
                  ],
                  "NThresholdsForRoots": [
                    0.02,
                    0.006,
                    0.025
                  ],
                  "DegreesDayForGermination": 125.0,
                  "TargetShootRootRatio": 4.0,
                  "MaxRootAllocation": 0.25,
                  "ShootRootGlfFactor": 0.5,
                  "UseReproSeasonFactor": 0,
                  "ReproSeasonReferenceLatitude": 41.0,
                  "ReproSeasonTimingCoeff": 0.14,
                  "ReproSeasonMaxAllocationIncrease": 0.5,
                  "ReproSeasonAllocationCoeff": 0.1,
                  "FractionLeafMaximum": 0.7,
                  "FractionLeafMinimum": 0.7,
                  "FractionLeafDMThreshold": 500.0,
                  "FractionLeafDMFactor": 2000.0,
                  "FractionLeafExponent": 3.0,
                  "FractionToStolon": 0.0,
                  "SpecificLeafArea": 25.0,
                  "SpecificRootLength": 100.0,
                  "StolonEffectOnLAI": 0.0,
                  "ShootMaxEffectOnLAI": 1000.0,
                  "MaxStemEffectOnLAI": 1.0,
                  "LiveLeavesPerTiller": 3.0,
                  "TissueTurnoverRateShoot": 0.05,
                  "TissueTurnoverRateRoot": 0.02,
                  "DetachmentRateShoot": 0.08,
                  "TurnoverTemperatureMin": 2.0,
                  "TurnoverTemperatureRef": 20.0,
                  "TurnoverTemperatureExponent": 1.0,
                  "TurnoverDroughtEffectMax": 1.0,
                  "TurnoverDroughtThreshold": 0.5,
                  "TurnoverDefoliationCoefficient": 0.5,
                  "TurnoverDefoliationRootEffect": 0.1,
                  "FractionNLuxuryRemobilisable": [
                    0.1,
                    0.1,
                    0.1
                  ],
                  "MinimumNFixation": 0.0,
                  "MaximumNFixation": 0.0,
                  "SoilSaturationEffectMax": 0.1,
                  "MinimumWaterFreePorosity": -1.0,
                  "SoilSaturationRecoveryFactor": 0.25,
                  "NDillutionCoefficient": 0.25,
                  "GlfGeneric": 1.0,
                  "GlfSoilFertility": 1.0,
                  "PlantHeightMinimum": 25.0,
                  "PlantHeightMaximum": 600.0,
                  "PlantHeightMassForMax": 10000.0,
                  "PlantHeightExponent": 2.8,
                  "RootDepthMinimum": 50.0,
                  "RootDepthMaximum": 750.0,
                  "RootElongationRate": 25.0,
                  "RootDistributionDepthParam": 90.0,
                  "RootDistributionExponent": 3.2,
                  "DigestibilitiesCellWall": [
                    0.6,
                    0.6,
                    0.6,
                    0.2
                  ],
                  "MinimumGreenWt": 100.0,
                  "FractionStolonStanding": 0.0,
                  "PreferenceForGreenOverDead": 1.0,
                  "PreferenceForLeafOverStems": 1.0,
                  "WaterAvailableMethod": 0,
                  "NitrogenAvailableMethod": 0,
                  "Name": "Ryegrass",
                  "Children": [
                    {
                      "$type": "Models.AgPasture.PastureAboveGroundOrgan, Models",
                      "Name": "Leaves",
                      "Children": [
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort1",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort2",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "Dead",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureAboveGroundOrgan, Models",
                      "Name": "Stems",
                      "Children": [
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort1",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort2",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "Dead",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureAboveGroundOrgan, Models",
                      "Name": "Stolons",
                      "Children": [
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort1",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort2",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "Dead",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "MaximumNUptake": 10.0,
                  "Albedo": 0.26,
                  "Gsmax": 0.011,
                  "R50": 200.0,
                  "SpeciesFamily": 1,
                  "PhotosyntheticPathway": 0,
                  "InitialShootDM": 500.0,
                  "InitialRootDM": 150.0,
                  "InitialRootDepth": 350.0,
                  "ReferencePhotosyntheticRate": 1.0,
                  "LightExtinctionCoefficient": 0.8,
                  "GrowthTminimum": 2.0,
                  "GrowthToptimum": 22.0,
                  "GrowthTEffectExponent": 1.7,
                  "UseHeatStressFactor": 0,
                  "HeatOnsetTemperature": 30.0,
                  "HeatFullTemperature": 36.0,
                  "HeatRecoverySumDD": 20.0,
                  "HeatRecoveryTReference": 25.0,
                  "UseColdStressFactor": 0,
                  "ColdOnsetTemperature": 2.0,
                  "ColdFullTemperature": -5.0,
                  "ColdRecoverySumDD": 30.0,
                  "ColdRecoveryTReference": 0.0,
                  "MaintenanceRespirationCoefficient": 0.04,
                  "GrowthRespirationCoefficient": 0.25,
                  "RespirationTReference": 20.0,
                  "RespirationExponent": 1.5,
                  "NThresholdsForLeaves": [
                    0.045,
                    0.02,
                    0.055
                  ],
                  "NThresholdsForStems": [
                    0.0225,
                    0.01,
                    0.0275
                  ],
                  "NThresholdsForStolons": [
                    0.0225,
                    0.01,
                    0.0275
                  ],
                  "NThresholdsForRoots": [
                    0.0225,
                    0.01,
                    0.0275
                  ],
                  "DegreesDayForGermination": 125.0,
                  "TargetShootRootRatio": 4.0,
                  "MaxRootAllocation": 0.25,
                  "ShootRootGlfFactor": 0.5,
                  "UseReproSeasonFactor": 0,
                  "ReproSeasonReferenceLatitude": 41.0,
                  "ReproSeasonTimingCoeff": 0.14,
                  "ReproSeasonMaxAllocationIncrease": 0.5,
                  "ReproSeasonAllocationCoeff": 0.1,
                  "FractionLeafMaximum": 0.56,
                  "FractionLeafMinimum": 0.28,
                  "FractionLeafDMThreshold": 500.0,
                  "FractionLeafDMFactor": 2000.0,
                  "FractionLeafExponent": 3.0,
                  "FractionToStolon": 0.2,
                  "SpecificLeafArea": 30.0,
                  "SpecificRootLength": 45.0,
                  "StolonEffectOnLAI": 0.3,
                  "ShootMaxEffectOnLAI": 500.0,
                  "MaxStemEffectOnLAI": 0.5,
                  "LiveLeavesPerTiller": 3.0,
                  "TissueTurnoverRateShoot": 0.05,
                  "TissueTurnoverRateRoot": 0.02,
                  "DetachmentRateShoot": 0.11,
                  "TurnoverTemperatureMin": 2.0,
                  "TurnoverTemperatureRef": 20.0,
                  "TurnoverTemperatureExponent": 1.0,
                  "TurnoverDroughtEffectMax": 1.0,
                  "TurnoverDroughtThreshold": 0.5,
                  "TurnoverDefoliationCoefficient": 0.5,
                  "TurnoverDefoliationRootEffect": 0.1,
                  "FractionNLuxuryRemobilisable": [
                    0.1,
                    0.1,
                    0.1
                  ],
                  "MinimumNFixation": 0.2,
                  "MaximumNFixation": 0.6,
                  "SoilSaturationEffectMax": 0.1,
                  "MinimumWaterFreePorosity": -1.0,
                  "SoilSaturationRecoveryFactor": 0.25,
                  "NDillutionCoefficient": 1.0,
                  "GlfGeneric": 1.0,
                  "GlfSoilFertility": 1.0,
                  "PlantHeightMinimum": 25.0,
                  "PlantHeightMaximum": 350.0,
                  "PlantHeightMassForMax": 7500.0,
                  "PlantHeightExponent": 2.5,
                  "RootDepthMinimum": 30.0,
                  "RootDepthMaximum": 350.0,
                  "RootElongationRate": 25.0,
                  "RootDistributionDepthParam": 70.0,
                  "RootDistributionExponent": 2.5,
                  "DigestibilitiesCellWall": [
                    0.6,
                    0.6,
                    0.6,
                    0.2
                  ],
                  "MinimumGreenWt": 50.0,
                  "FractionStolonStanding": 0.0,
                  "PreferenceForGreenOverDead": 1.0,
                  "PreferenceForLeafOverStems": 1.0,
                  "WaterAvailableMethod": 0,
                  "NitrogenAvailableMethod": 0,
                  "Name": "WhiteClover",
                  "Children": [
                    {
                      "$type": "Models.AgPasture.PastureAboveGroundOrgan, Models",
                      "Name": "Leaves",
                      "Children": [
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort1",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort2",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "Dead",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureAboveGroundOrgan, Models",
                      "Name": "Stems",
                      "Children": [
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort1",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort2",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "Dead",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureAboveGroundOrgan, Models",
                      "Name": "Stolons",
                      "Children": [
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort1",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort2",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "LeafCohort3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.GenericTissue, Models",
                          "Name": "Dead",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "IncludeInDocumentation": true,
  "Enabled": true,
  "ReadOnly": false
}