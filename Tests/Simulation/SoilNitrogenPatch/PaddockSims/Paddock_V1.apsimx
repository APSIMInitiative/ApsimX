{
  "$type": "Models.Core.Simulations, Models",
  "Version": 174,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Base",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1972-01-01T00:00:00",
          "End": "1972-12-31T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "%root%/Tests/WeatherFiles/Ruakura.met",
          "ExcelWorkSheetName": "",
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "Summary",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "Soil Arbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.ForageDigestibility.Forages, Models",
          "Parameters": [
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "SurfaceOrganicMatter.Residue",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 0.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "SurfaceOrganicMatter.Residue",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 0.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Leaf",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Leaf",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Stem",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Stem",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Stolon",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Stolon",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Leaf",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Leaf",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Stem",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Stem",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Stolon",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Stolon",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            }
          ],
          "Name": "Forages",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.MicroClimate, Models",
          "a_interception": 0.0,
          "b_interception": 0.0,
          "c_interception": 0.0,
          "d_interception": 0.0,
          "SoilHeatFluxFraction": 0.0,
          "MinimumHeightDiffForNewLayer": 0.0,
          "NightInterceptionFraction": 0.0,
          "ReferenceHeight": 2.0,
          "Name": "MicroClimate",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Climate;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "using Models.Zones;",
            "using Models.AgPasture;",
            "using System.Xml.Serialization;",
            "using Models.WaterModel;",
            "using Models.Surface;",
            "using Models.Soils;",
            "using APSIM.Shared.Utilities;",
            "using System.Collections.Generic;",
            "using Models.Interfaces;",
            "using Models.Soils.Nutrients;",
            "using Models.Soils.NutrientPatching;",
            "using MathNet.Numerics.Distributions;",
            "using MathNet.Numerics.LinearAlgebra;",
            "using System.Diagnostics;",
            "using Newtonsoft.Json;",
            "using Models.Core.ApsimFile;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class SimpleCowScript : Model",
            "    {",
            "        [Link] Simulation simulation;",
            "        [Link] Clock clock;",
            "        [Link] Fertiliser fertiliser;",
            "        [Link] WaterBalance waterBalance;",
            "        [Link] IPhysical physical;",
            "        [Link] SurfaceOrganicMatter surfaceOrganicMatter;",
            "        [Link] NutrientPatchManager patchManager;",
            "        [Link] ISummary summary;",
            "        [Link] List<Zone> zones;",
            "        [Link] List<NutrientPatchManager> patchManagers;",
            "    ",
            "        [Link] private Soil soil;",
            "        [Link] private Weather weather;",
            "        [Link] private Zone zone;",
            "        [Link] private IPhysical soilPhysical;",
            "",
            "        /// <summary>class for encapsulating a urine return.</summary>",
            "        public class DoUrineReturnEventData : EventArgs",
            "        {",
            "            /// <summary>Amount of urine to return (kg)</summary>",
            "            public double Amount { get; set;  }",
            "",
            "               /// <summary>Depth (mm) of soil to return urine into.</summary>",
            "            public double Depth { get; set;  }",
            "",
            "               /// <summary>Grazed dry matter.</summary>",
            "            public double GrazedDM { get; set; }",
            "        }",
            "        ",
            "        public enum UrineReturnPatterns",
            "        {",
            "            // <summary>Not enabled Uniform</summary>",
            "            //UniformAcrossAllPatches,",
            "            /// <summary>Rotating in order</summary>",
            "            RotatingInOrder,",
            "            /// <summary>Not enabled Random</summary>",
            "            Random,",
            "            /// <summary>Not enabled Pseudo-random</summary>",
            "            PseudoRandom",
            "        }",
            "        ",
            "        public enum UrineReturnTypes",
            "        {",
            "            /// <summary>FromHarvest</summary>",
            "            FromHarvest,",
            "            /// <summary>SetMonthly</summary>",
            "            SetMonthly",
            "        }        ",
            "",
            "        /// below is the definition of the event",
            "        public event EventHandler<DoUrineReturnEventData> DoCowUrineReturn;",
            "",
            "",
            "        // --------------- Privates ---------------------------------",
            "",
            "        //private double CowBodyWeight = 450.0;      // kg put on UI",
            "        //private string CowDateCalving = \"1-aug\";   // put on UI",
            "        //private string CowDateInCalf = \"1-nov\";    //  3 months after calving",
            "        //private string CowDateDryOff = \"30-apr\";   // put on UI",
            "        private double CowMSPerDay = 0.0;         // kgMS/day/head - calculated, initialising here",
            "        private double CowMSEnergyPerKg = 77.0;         // MJME/kg MS (trying 77 c.f. 80)",
            "        private double CowWalkingDist = 3.0;            // km",
            "        private double CowWalkingEnergyPerKm = 2.0;         // MJME/km",
            "        private double[] CowN2BodyPerc = { 30.0, 10.0 };         // Percent N in intake to body and product for milking and dry",
            "        private double[] CowN2UrinePerc = { 42.0, 54.0 };         // Percent N in intake to uriney and product for milking and dry",
            "        private double[] CowN2DungPerc = { 28.0, 36.0 };         // Percent N in intake to dung and product for milking and dry",
            "        //private double[] LactationCurveParam = { 20.0, 0.2, -0.04, 0.092 };         // put on UI Parameters for the lactation curve, last parm 0.113 will give 500 kg MS, 0.092 will give 406 kg MS",
            "        private double WeeksBeforeCalving = 0.0;     // cannot this be calculated?",
            "        private double LactationWeek = 0.0;          // and this?",
            "        private double UrineDepth = 0;               // wot?",
            "   ",
            "   ",
            "        // perhaps should relate this to cow body weight",
            "        //private double[] CowPregnancyParam = {54.59, -0.135}; // multiplier and exponential parameters for pregnancy energy (25 kg calf), time in weeks before",
            "        //private double[] CowPregnancyParam = {63.931, -0.139}; // multiplier and exponential parameters for pregnancy energy (30 kg calf), time in weeks before",
            "        private double[] CowPregnancyParam = { 72.154, -0.143 }; // multiplier and exponential parameters for pregnancy energy (35 kg calf), time in weeks before",
            "        //private double[] CowPregnancyParam = {76.208, -0.142}; // multiplier and exponential parameters for pregnancy energy (40 kg calf), time in weeks before",
            "   ",
            "        private double CowMaintME = 54; //But will be overridden in StartSimulation  ",
            "        // MJME/day https://www.dairynz.co.nz/media/5789573/facts_and_figures_web_chapter4_cow_feed_requirements.pdf page 4 and Excel regression on table \"Maintenance MJ ME/day\"",
            "",
            "        ",
            "        private double myResidual;",
            "        private bool GrazeNow = false;",
            "        private int ZoneNumForUrine;",
            "        private bool PseudoPatches;",
            "        private double[] UrineDepthPenetrationArray;",
            "        private double[] UrineDepthPlacement;",
            "        [NonSerialized]    private Random pseudoRandom; // = new Random(666);  // sets a constant seed value",
            "        [NonSerialized]    private Random rndRandom = new Random();  // random-seed random number generator for the random return pattern",
            "        [NonSerialized]    private Random RandomNumGenerator = new Random(10);",
            "        private double[] ArrayArea;",
            "        private double[] ArrayDepth;",
            "        private double incrWaterContent = 0.05; // increase in volumetric water content - used ot calculate depth",
            "        ",
            "        // --------------- Parameters --------------------------------------",
            "",
            "        [Description(\"Verbose output?\")] public bool Verbose { get; set; } ",
            "",
            "        // - Paramters for this manager",
            "        [Separator(\"Array load parameters\")]",
            "        ",
            "        [Description(\"Specify array load arrays manually?\")] public bool ArrayLoadManual { get; set; }",
            "        ",
            "        [Display(VisibleCallback = \"IsArrayLoadManual\")] [Description(\"Array load (comma sep)\")]public double[] ArrayLoad  { get; set; }",
            "        [Display(VisibleCallback = \"IsArrayLoadManual\")] [Description(\"Array volume (comma sep)\")]public double[] ArrayVolume  { get; set; }",
            "        [Display(VisibleCallback = \"IsNotArrayLoadManual\")][Description(\"Number of realisaitons to be generated\")] public int NumRealisations { get; set; }",
            "        [Display(VisibleCallback = \"IsNotArrayLoadManual\")][Description(\"First mean load of the generated distribution (g N)\")] public double MeanLoadToGenerate { get; set; }",
            "        [Display(VisibleCallback = \"IsNotArrayLoadManual\")][Description(\"Amount to add to the first mean every day (g N)\")] public double AmountAddMeanLoad { get; set; }",
            "        [Display(VisibleCallback = \"IsNotArrayLoadManual\")][Description(\"Means of the original distributions, mu_i load (gN) first and then mu_j volume (L)\")] public double[] VectorOfMeans { get; set; }",
            "        [Display(VisibleCallback = \"IsNotArrayLoadManual\")][Description(\"Covariance matrix - in order of E_ii, E_ij, E_ij, E_jj\")] public double[] CovarianceMatrix { get; set; }",
            "        [Description(\"SlopeVolWithLoad\")] public double SlopeVolWithLoad { get; set; }",
            "",
            "        [Separator(\"Grazing characteristics\")]",
            "        ",
            "        [Description(\"Number of days over which a grazing event takes place when the cows are dry (days)\")]",
            "        [Units(\"dd-mmm\")]",
            "        public int DaysPerGrazeWhenDry{ get; set; }",
            "",
            "        [Separator(\"Cow characteristics\")]",
            "        ",
            "        [Description(\"Cow mature live weight (kg) - only use 450 until make some of the other parameters dynamic\")]",
            "        [Units(\"kg\")]",
            "        public double CowBodyWeight { get; set; } // = 450.0;",
            "       ",
            "        [Description(\"Calving date (dd-mmm)\")]",
            "        [Units(\"dd-mmm\")]",
            "        public string CowDateCalving{ get; set; }",
            "       ",
            "        [Description(\"If-calf date (dd-mmm)\")]",
            "        [Units(\"dd-mmm\")]",
            "        public string CowDateInCalf{ get; set; }",
            "       ",
            "        [Description(\"Dry-off date (dd-mmm)\")]",
            "        [Units(\"dd-mmm\")]",
            "        public string CowDateDryOff{ get; set; }",
            "",
            "        [Separator(\"Woods equation lactation curve - 20.0, 0.2, -0.04, 0.092 for 406 kg MS in the seasoon. Last param at 0.113 will give 500\")]",
            "",
            "        [Description(\"Lactation curve parameters - try 20.0, 0.2, -0.04, 0.092 for 406 kg MS in the seasoon \")]",
            "        [Units(\"various\")]",
            "        public double[] LactationCurveParam { get; set; }",
            "       ",
            "        [Description(\"Depth of urine penetration (mm)\")]",
            "        public double UrineDepthPenetration { get; set; }",
            "               ",
            "        [Description(\"Nature of nutrient return\")]",
            "        public UrineReturnTypes UrineReturnType { get; set; }",
            "",
            "        [Description(\"Pattern (spatial) of nutrient return\")]",
            "        public UrineReturnPatterns UrineReturnPattern { get; set; }",
            "",
            "        [Separator(\"Herd and ME demand information\")]",
            "",
            "        [Description(\"Stocking rate (cows/ha)\")]",
            "        [Units(\"cows/ha\")]",
            "        public double StockingRate { get; set; }",
            "",
            "        [Description(\"Number of paddocks on the farm\")]",
            "        [Units(\"days\")]",
            "        public int Num1HaPaddocks { get; set; }",
            "",
            "        [Description(\"N concentration of the silage fed out (% N in DM)\")]",
            "        [Units(\"kgN/kgDM\")]",
            "        public double SilageNConc { get; set; }",
            "",
            "        [Description(\"ME concentration of the silage fed out (MJ ME / kg DM)\")]",
            "        [Units(\"MJME/kgDM\")]",
            "        public double SilageMEConc { get; set; }",
            "",
            "        [Separator(\"Excreta return parameters\")]",
            "",
            "        [Description(\"Number of urinations per animal per day\")]",
            "        public double UrinationsPerHead { get; set; }",
            "",
            "        [Description(\"Size of the edge effect (m)\")]",
            "        [Units(\"m\")]",
            "        public double patchMargin { get; set; }",
            "        ",
            "        [Description(\"Adjust the urine volume and depth with N load scaling?\")]",
            "        public bool AdjustVolme { get; set; }",
            "",
            "        public bool IsArrayLoadManual =>  ArrayLoadManual;",
            "        public bool IsNotArrayLoadManual =>  !ArrayLoadManual;",
            "",
            "  ",
            "        // --------------------------- Outputs -------------------------------------------",
            "      ",
            "",
            "        [Units(\"m2\")]",
            "        public double AreaUrinePatchesToday { get; set; }",
            "",
            "        [Units(\"kgN/ha\")]",
            "        public double AmountUrineNReturned { get; set; }",
            "",
            "        [Units(\"kgN/ha\")]",
            "        public double AmountDungNReturned { get; set; }",
            "        ",
            "        [Units(\"kgN/ha\")]",
            "        public double AmountDungCReturned { get; set; }",
            "",
            "        [Units(\"head/ha\")]",
            "        public double StockingDensity { get; set; }",
            "",
            "        public double LoadAdjustmentPropOverall { get; set; }",
            "",
            "        public double LoadAdjustmentGrammesIndividual { get; set; }",
            "",
            "        [Units(\"mm\")]",
            "        public double AverageUrineDepth { get; set; }",
            "   ",
            "        [Units(\"kgN/ha\")]",
            "        public double UrineNReturned { get; set; }",
            "",
            "        public int NumPatches { get; set; }",
            "        public double SilageMade { get; set; }",
            "        public double SilageFed { get; set; }",
            "        public double SilageNFed { get; set; }",
            "        public double SilageMEFed { get; set; }",
            "        public double HerdMEDemand { get; set; }",
            "        public double CowMEDemand { get; set; }",
            "        public double CowDMIntake { get; set; }",
            "        public string CowState { get; set; }",
            "",
            "           [Units(\"kgDM/ha\")] public double GrazedDM { get; set; }  // DM grazed",
            "           [Units(\"kgN/ha\")] public double GrazedN { get; set; }   // N in the DM grazed",
            "        [Units(\"MJME/ha\")] public double GrazedME { get; set; }   // N in the DM grazed",
            "        [Units(\"-\")] public int NumPatchesForUrine { get; set; }  //number of patches used for urine return (depends on the amount of herbage grazed)",
            "",
            "        // --------------------------- Methods -------------------------------------------",
            "    ",
            "        /// <summary>Invoked when simulation starts.</summary>",
            "        /// <param name=\"sender\">The sender of the event.</param>",
            "        /// <param name=\"e\">The event arguments.</param>",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            //Debugger.Break();",
            "            ",
            "            rndRandom = new Random();              ",
            "            RandomNumGenerator = new Random(10);",
            "            ",
            "            PseudoPatches = zones.Count == 1; ",
            "            if (PseudoPatches)",
            "                NumPatches = patchManager.NumPatches;",
            "            else",
            "                NumPatches = zones.Count;",
            "            ",
            "            CowMaintME = CowBodyWeight * 0.0942 + 11.507;   ",
            "            // MJME/day https://www.dairynz.co.nz/media/5789573/facts_and_figures_web_chapter4_cow_feed_requirements.pdf page 4 and Excel regression on table \"Maintenance MJ ME/day\"",
            "            ",
            "            if (!ArrayLoadManual)",
            "                CalculateArrayLoad();",
            "        }",
            "",
            "        ",
            "        /// <summary>Invoked by clock to do management actions every day.</summary>",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            SilageMade = 0.0;",
            "            SilageFed = 0.0;",
            "            SilageNFed = 0.0;",
            "            SilageMEFed = 0.0;",
            "      ",
            "            UrineNReturned = 0.0;",
            "            ",
            "            if (CowState == \"Dry-Pregnant\") ",
            "                StockingDensity = DaysPerGrazeWhenDry * Num1HaPaddocks * StockingRate; // was \"DaysPerGrazeArray[Clock.month - 1]\"",
            "            else",
            "                StockingDensity = 1 * Num1HaPaddocks * StockingRate; // was \"DaysPerGrazeArray[Clock.month - 1]\"",
            "",
            "            GrazedDM = 0.0;",
            "            GrazedN = 0.0;",
            "            GrazedME = 0.0;",
            "            SilageMade = 0.0;",
            "            SilageFed = 0.0;",
            "            SilageNFed = 0.0;",
            "            SilageMEFed = 0.0;",
            "",
            "            UrineNReturned = 0.0;",
            "            AreaUrinePatchesToday = 0.0;",
            "            NumPatchesForUrine = 0;",
            "            //UrinePatchLoad = 0.0;",
            "            ",
            "            CowPhysiologicalState();",
            "        ",
            "        }",
            "        ",
            "        ",
            "        /// <summary>Invoked when a graze occurs.</summary>",
            "        /// <param name=\"sender\">The sender of the event.</param>",
            "        /// <param name=\"e\">The event arguments.</param>",
            "        [EventSubscribe(\"DoUrineDungReturn\")]",
            "        private void OnDoUrineDungReturn(object sender, SimpleGrazing.UrineDungReturnType urineDungReturn)",
            "        {",
            "        ",
            "            // compare the DM supplied by pasture to HerdMEDemand and add supplement if needed",
            "            summary.WriteMessage(this, \" GrazedME and HerdMEDemand \" + urineDungReturn.GrazedME + \" \" + HerdMEDemand, MessageType.Information);",
            "            if (urineDungReturn.GrazedME >= 1.05 * HerdMEDemand)",
            "            {",
            "                // assign some of the grazed to silage",
            "                ",
            "                double Prop2Silage = (urineDungReturn.GrazedME - HerdMEDemand) / urineDungReturn.GrazedME;",
            "                SilageMade = Prop2Silage * urineDungReturn.GrazedDM;",
            "                GrazedDM = (1.0 - Prop2Silage) * urineDungReturn.GrazedDM;",
            "                GrazedN = (1.0 - Prop2Silage) * urineDungReturn.GrazedN;",
            "                GrazedME = (1.0 - Prop2Silage) * urineDungReturn.GrazedME;",
            "            }",
            "            else if (urineDungReturn.GrazedME <= 0.95 * HerdMEDemand)",
            "            {",
            "                // add some silage",
            "                SilageFed = (HerdMEDemand - urineDungReturn.GrazedME) / SilageMEConc;",
            "                SilageNFed = SilageFed * SilageNConc / 100;",
            "                SilageMEFed = SilageFed * SilageMEConc;",
            "            }",
            "            CowDMIntake = (GrazedDM + SilageFed) / StockingDensity;",
            "            ",
            "            int NFateIndex;",
            "            if (CowState.StartsWith(\"Milk\"))",
            "               NFateIndex = 0;",
            "            else",
            "               NFateIndex = 1;",
            "             ",
            "            AmountUrineNReturned = (GrazedN + SilageNFed) * CowN2UrinePerc[NFateIndex] / 100.0;  ",
            "            AmountDungNReturned = (GrazedN + SilageNFed) * CowN2DungPerc[NFateIndex] / 100.0;  // ",
            "            AmountDungCReturned = AmountDungNReturned * 20;  // or could take this from digestibility",
            "",
            "            // calculate the number of patches based on the patch size and the /cow pasture amount of 15 kg DM /cow /day and 12 urine patchs per cow per day * 0.25 m2 /patch",
            "             ",
            "            int NumUrinations = Convert.ToInt32(UrinationsPerHead * StockingDensity);  // this gives the number of samples from the array",
            "            int[] MySamples = new int[NumUrinations];  // this will hold the indicies of the samples",
            "            double randomSampleSumLoad = 0.0;",
            "            for (int i = 0; i < NumUrinations; i++)",
            "            {",
            "               MySamples[i] = rndRandom.Next(0, ArrayLoad.Length-1);  // supplied 3334 samples from the distribution",
            "               randomSampleSumLoad += ArrayLoad[MySamples[i]] / 1000;  // to put this into kg",
            "            }",
            "            Array.Sort(MySamples);  // sort MySamples into increasing order - that will also cause a sort for increasing Load",
            "            LoadAdjustmentPropOverall = AmountUrineNReturned / randomSampleSumLoad;",
            "            AverageUrineDepth = 0.0;",
            "             ",
            "            bool testMoreUrineToApply = true;",
            "            int indexMySamples = -1;",
            "            ",
            "            while (testMoreUrineToApply)",
            "            {",
            "                bool testAggregation = true;  // jump out of the aggregation (i.e. go to the next grid",
            "                double tmpLoad = 0.0;",
            "                double tmpArea = 0.0;",
            "                double tmpDepth = 0.0;",
            "                int tempNum2Agg = 0;",
            "",
            "                int[] PatchToAddTo = new int[1];  //need an array variable for this",
            "                double[] UreaToAdd = new double[physical.Thickness.Length];  ",
            "",
            "                while (testAggregation)",
            "                {",
            "                    indexMySamples += 1;  // index of the individual samples",
            "                    tempNum2Agg += 1;",
            "",
            "                    double thisPatchLoad = (ArrayLoad[MySamples[indexMySamples]]);  // result is in g N",
            "                    double LoadAdjustmentGrammesIndividual = (thisPatchLoad * LoadAdjustmentPropOverall - thisPatchLoad) * SlopeVolWithLoad; // result is in L and is the additional L in volume",
            "",
            "                    double thisPatchVolumeAdjusted = Math.Max(1.0,(ArrayVolume[MySamples[indexMySamples]] + LoadAdjustmentGrammesIndividual));",
            "                    double WettedAreaCm2 = 1349.8 * Math.Log(thisPatchVolumeAdjusted) + 1034.8;",
            "",
            "                    double WettedRadiusM = Math.Sqrt(WettedAreaCm2 / Math.PI) / 100;",
            "                    double AffectedAreaM2 = (WettedRadiusM + patchMargin) * (WettedRadiusM + patchMargin) * Math.PI;",
            "               ",
            "                    UrineDepth = (thisPatchVolumeAdjusted / 1000 / incrWaterContent) / (WettedRadiusM * WettedRadiusM * Math.PI) * 1000; // now in mm",
            "                    AverageUrineDepth += UrineDepth / NumUrinations;",
            "",
            "                    CalcUrinePlacementDepth();",
            "                   ",
            "                    for (int ii = 0; ii <= (physical.Thickness.Length - 1); ii++)",
            "                       UreaToAdd[ii] += UrineDepthPlacement[ii] * ((ArrayLoad[MySamples[indexMySamples]] / 1000 * (AmountUrineNReturned / randomSampleSumLoad)) / (10000.0 / patchManager.NumPatches) * 10000);   // the first /1000 is to convert g load to kg// need ot make depth dynamic",
            "                    UrineNReturned += (ArrayLoad[MySamples[indexMySamples]] / 1000) * LoadAdjustmentPropOverall;",
            "",
            "                    if (Verbose) ",
            "                        summary.WriteMessage(this, \"For sample \" + indexMySamples + \" returned \" + (ArrayLoad[MySamples[indexMySamples]] / 1000) + \" kg urine N to patch \" + ZoneNumForUrine, MessageType.Information);",
            "                   ",
            "                     tmpArea += AffectedAreaM2;",
            "                    double testArea = 0.0;",
            "                    ",
            "",
            "                    if (indexMySamples >= (NumUrinations - 1)) ",
            "                        testArea = 20000.0; // a large area to force a final deposition",
            "                    else",
            "                    {",
            "                        testArea = (tmpArea + (tmpArea + AffectedAreaM2)) / 2.0; ",
            "                       }",
            "",
            "                    if (testArea > (10000.0 / patchManager.NumPatches))  // i.e. stop this aggregation and move to a new grid",
            "                    {",
            "                        NumPatchesForUrine += 1;",
            "                        testAggregation = false; // so jump out of this loop",
            "                    }                ",
            "                } // end of the while (testAggregation)",
            "                ",
            "                double tempNReturned = 0.0;",
            "                for (int ii = 0; ii <= (physical.Thickness.Length - 1); ii++)",
            "                     tempNReturned += UreaToAdd[ii];",
            "",
            "                DoUrineReturn();",
            "",
            "                if (indexMySamples >= (NumUrinations - 1))",
            "                {",
            "                     testMoreUrineToApply = false;",
            "                }",
            "            } // end of the while (testMoreUrineToApply)",
            "             ",
            "            //AreaUrinePatchesToday = UrinationsPerHead * SingleUrinePatchArea * StockingDensity;",
            "            //double AreaSingleGPPatch = 10000.0 / NumPatches; // units are m2",
            "            //NumPatchesForUrine = Math.Max(1, Convert.ToInt32(AreaUrinePatchesToday / AreaSingleGPPatch));",
            "            //double UrineNPerPatch = AmountUrineNReturned / NumPatchesForUrine; // units are kg N /patch",
            "            //UrinePatchLoad = (UrineNReturned / AreaSingleGPPatch * 10000);",
            "",
            "            if (Verbose)  // this needs updating",
            "            {",
            "                summary.WriteMessage(this, \"Grazing urine return summary:\", MessageType.Information);",
            "                summary.WriteMessage(this, \"    Pasture Grazed          :   \" + GrazedDM, MessageType.Information);",
            "                summary.WriteMessage(this, \"    Number of cows          :   \" + (GrazedDM / 15.0), MessageType.Information);",
            "                summary.WriteMessage(this, \"The amount of urine N to be returned to the whole paddock is \" + AmountUrineNReturned, MessageType.Information);",
            "             }            ",
            "            ",
            "            DoTramplingAndDungReturn();",
            "        }",
            "      ",
            "            ",
            "        private void CowPhysiologicalState()",
            "        {",
            "            if (DateUtilities.CompareDates(CowDateCalving, clock.Today) > 0)",
            "                WeeksBeforeCalving = (DateUtilities.GetDate(CowDateCalving, (clock.Today.Year + 1)) - clock.Today).TotalDays / 7.0;",
            "            else",
            "                WeeksBeforeCalving = (DateUtilities.GetDate(CowDateCalving, clock.Today.Year) - clock.Today).TotalDays / 7.0;",
            "",
            "            if (DateUtilities.CompareDates(CowDateCalving, clock.Today) <= 0)",
            "                LactationWeek = (clock.Today - DateUtilities.GetDate(CowDateCalving, (clock.Today.Year - 1))).TotalDays / 7.0;",
            "            else",
            "                LactationWeek = (clock.Today - DateUtilities.GetDate(CowDateCalving, (clock.Today.Year))).TotalDays / 7.0;",
            "",
            "",
            "            // find state",
            "            if (DateUtilities.WithinDates(CowDateCalving, clock.Today, CowDateInCalf))",
            "            {",
            "                CowState = \"Milking-Notpreg\";",
            "                CowMSPerDay = LactationCurveParam[0] * Math.Pow(LactationWeek, LactationCurveParam[1]) * Math.Exp(LactationCurveParam[2] * LactationWeek) * LactationCurveParam[3];",
            "                //CowMEDemand = 0.0 + 0.0 + CowWalkingDist * CowWalkingEnergyPerKm + CowMSPerDay * CowMSEnergyPerKg;",
            "                CowMEDemand = CowMaintME + 0.0 + CowWalkingDist * CowWalkingEnergyPerKm + CowMSPerDay * CowMSEnergyPerKg;",
            "            }",
            "            else if (DateUtilities.WithinDates(CowDateInCalf, clock.Today, CowDateDryOff))",
            "            {",
            "                CowState = \"Milking-Pregnant\";",
            "                CowMSPerDay = LactationCurveParam[0] * Math.Pow(LactationWeek, LactationCurveParam[1]) * Math.Exp(LactationCurveParam[2] * LactationWeek) * LactationCurveParam[3];",
            "                //CowMEDemand = 0.0 + (CowPregnancyParam[0] * Math.Exp(CowPregnancyParam[1] * WeeksBeforeCalving)) + CowWalkingDist * CowWalkingEnergyPerKm + CowMSPerDay * CowMSEnergyPerKg;  //=72.154*EXP(-0.143*L3)",
            "                CowMEDemand = CowMaintME + (CowPregnancyParam[0] * Math.Exp(CowPregnancyParam[1] * WeeksBeforeCalving)) + CowWalkingDist * CowWalkingEnergyPerKm + CowMSPerDay * CowMSEnergyPerKg;  //=72.154*EXP(-0.143*L3)",
            "            }",
            "            else if (DateUtilities.WithinDates(CowDateDryOff, clock.Today, CowDateCalving))",
            "            {",
            "                CowState = \"Dry-Pregnant\";",
            "                CowMSPerDay = 0.0;",
            "                CowMEDemand = CowMaintME + (CowPregnancyParam[0] * Math.Exp(CowPregnancyParam[1] * WeeksBeforeCalving)) + CowWalkingDist * CowWalkingEnergyPerKm + 0.0;  //=72.154*EXP(-0.143*L3)",
            "            }",
            "            else",
            "                throw new Exception(\"Error in calculating CowState\");  ",
            "",
            "            HerdMEDemand = CowMEDemand * StockingDensity;",
            "        }",
            "        ",
            "        public void DoUrineReturn()",
            "        {",
            "            GetZoneForUrineReturn();  ",
            "",
            "              if (Verbose)",
            "                  summary.WriteMessage(this, \"The Zone for urine return is \" + ZoneNumForUrine, MessageType.Diagnostic);",
            "",
            "            if (!PseudoPatches)",
            "            {",
            "                int i = -1; //to count the zones",
            "                foreach (Zone zone in this.Parent.FindAllInScope<Zone>())",
            "                {",
            "                    i += 1;",
            "                    if (i == ZoneNumForUrine)",
            "                    {",
            "                        Fertiliser thisFert = zone.FindInScope<Fertiliser>() as Fertiliser;",
            "",
            "                          thisFert.Apply(amount: AmountUrineNReturned / zone.Area, ",
            "                                  type: Fertiliser.Types.UreaN, ",
            "                                  depthTop: 0.0, ",
            "                                  depthBottom: UrineDepthPenetration, ",
            "                                  doOutput: Verbose);",
            "                                        ",
            "                         if (Verbose)",
            "                             summary.WriteMessage(this, AmountUrineNReturned + \" urine N added to Zone \" + i + \", the local load was \" + AmountUrineNReturned / zone.Area + \" kg N /ha\", MessageType.Diagnostic);",
            "                     }",
            "                 }",
            "            }",
            "            else // PseudoPatches",
            "            {",
            "                int[] PatchToAddTo = new int[1];  //because need an array variable for this",
            "                string[] PatchNmToAddTo = new string[0];  //need an array variable for this",
            "                //List<IModel> zones = this.FindAllInScope<Zone>().OfType<IModel>().ToList();   //TODO ask Dean - is all this needed?",
            "                double[] UreaToAdd = new double[soilPhysical.Thickness.Length];  ",
            "",
            "                for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)",
            "                    UreaToAdd[ii] = UrineDepthPenetrationArray[ii]  * AmountUrineNReturned * NumPatches;",
            "",
            "                // needed??   UreaReturned += AmountFertNReturned;",
            "",
            "                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();",
            "                CurrentPatch.Sender = \"manager\";",
            "                CurrentPatch.DepositionType = DepositionTypeEnum.ToSpecificPatch;",
            "                PatchToAddTo[0] = ZoneNumForUrine;",
            "                CurrentPatch.AffectedPatches_id = PatchToAddTo;",
            "                CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;",
            "                CurrentPatch.Urea = UreaToAdd;",
            "",
            "                var patchManager = soil.FindChild<NutrientPatchManager>(); ",
            "",
            "                 if (Verbose)",
            "                    summary.WriteMessage(this, \"Patch MinN prior to urine return: \" + patchManager.MineralNEachPatch[ZoneNumForUrine], MessageType.Diagnostic);",
            "                patchManager.Add(CurrentPatch); ",
            "                 if (Verbose)",
            "                    summary.WriteMessage(this, \"Patch MinN after urine return: \" + patchManager.MineralNEachPatch[ZoneNumForUrine], MessageType.Diagnostic);",
            "            } ",
            "        }",
            "        public void GetZoneForUrineReturn()",
            "        {",
            "            if (UrineReturnPattern == UrineReturnPatterns.RotatingInOrder) ",
            "            {",
            "                ZoneNumForUrine += 1;  //increment the zone number - it was initialised at -1. NOTE, ZoneNumForUrine is used for both zones and patches",
            "                if (ZoneNumForUrine >= NumPatches)",
            "                    ZoneNumForUrine = 0;  // but reset back to the first patch if needed",
            "            }",
            "            else if (UrineReturnPattern == UrineReturnPatterns.Random)",
            "            {",
            "                Random rnd = new Random();",
            "                ZoneNumForUrine = rnd.Next(0, NumPatches); // in C# the maximum value (NumPatches) will not be selected",
            "            }",
            "            else if (UrineReturnPattern == UrineReturnPatterns.PseudoRandom)",
            "            {",
            "                ZoneNumForUrine = pseudoRandom.Next(0, NumPatches); // in C# the maximum value (ZoneCount) will not be selected",
            "            }",
            "            else",
            "                throw new Exception(\"UrineResturnPattern not recognised\");",
            "",
            "            if (Verbose)",
            "                summary.WriteMessage(this, \"The next zone/patch for urine return is \" + ZoneNumForUrine, MessageType.Diagnostic);",
            "        }",
            "    ",
            "        public void UrinePenetration()",
            "        {",
            "            // note that this only looks at the first paddock and assumes that all the paddocks are the same",
            "            int iii = -1;  // to use as a patch counter",
            "            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())",
            "            {",
            "                iii += 1;",
            "                if (iii == 0)",
            "                {",
            "                    Soil soil = zone.FindInScope<Soil>() as Soil;",
            "                    double tempDepth = 0.0;",
            "                    UrineDepthPenetrationArray = new double[soilPhysical.Thickness.Length];",
            "                    for (int i = 0; i <= (soilPhysical.Thickness.Length - 1); i++)",
            "                    {",
            "                        tempDepth += soilPhysical.Thickness[i];",
            "                        if (tempDepth <= UrineDepthPenetration)",
            "                        {",
            "                            UrineDepthPenetrationArray[i] = soilPhysical.Thickness[i] / UrineDepthPenetration;",
            "                        }",
            "                        else",
            "                        {",
            "                            UrineDepthPenetrationArray[i] = (UrineDepthPenetration - (tempDepth - soilPhysical.Thickness[i])) / (tempDepth - (tempDepth - soilPhysical.Thickness[i])) * soilPhysical.Thickness[i] / UrineDepthPenetration;",
            "                            UrineDepthPenetrationArray[i] = Math.Max(0.0, Math.Min(1.0, UrineDepthPenetrationArray[i]));",
            "                        }",
            "                        if (Verbose)",
            "                            summary.WriteMessage(this, \"The proportion of urine applied to the \" + i + \"th layer will be \" + UrineDepthPenetrationArray[i], MessageType.Diagnostic);",
            "                    }",
            "                }",
            "            }",
            "",
            "        }",
            "        ",
            "        public void CalcUrinePlacementDepth()",
            "        {",
            "            // calculates what proportion of the urinary N to put in each layer of the soil",
            "          ",
            "            double tempDepth = 0.0;",
            "            UrineDepthPlacement = new double[physical.Thickness.Length];",
            "            for (int i = 0; i <= (physical.Thickness.Length - 1); i++)",
            "            {",
            "                tempDepth += physical.Thickness[i];",
            "                if (tempDepth <= UrineDepth)",
            "                {",
            "                   UrineDepthPlacement[i] = physical.Thickness[i] / UrineDepth;",
            "                }",
            "                else",
            "                {",
            "                   UrineDepthPlacement[i] = (UrineDepth - (tempDepth - physical.Thickness[i])) / (tempDepth - (tempDepth - physical.Thickness[i])) * physical.Thickness[i] / UrineDepth;",
            "                   UrineDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, UrineDepthPlacement[i]));",
            "                }",
            "                if (Verbose)",
            "                   summary.WriteMessage(this, \"The proportion of urinary-N deposited into the \" + i + \"th layer will be \" + UrineDepthPlacement[i], MessageType.Information);",
            "            }",
            "        } // this is the end of CalcUrinePlacementDepth",
            "        ",
            "        private void DoTramplingAndDungReturn()",
            "        {",
            "          foreach (var zone in zones)",
            "          {",
            "             var SurfaceOM = zone.FindDescendant<SurfaceOrganicMatter>();",
            "",
            "             // accelerate the movement of surface litter into the soil - do this before the dung is added",
            "             double temp = SurfaceOM.Wt * 0.1;",
            "",
            "             SurfaceOM.Incorporate(fraction:0.1, depth: 100.0);",
            "             if (Verbose)",
            "                summary.WriteMessage(this, \"The amount of litter trampled was \" + temp + \" and the remaining litter is \" + (SurfaceOM.Wt), MessageType.Information);",
            "",
            "             // move the dung to litter - assume dung is 40% of that grazed and a C:N ratio of ",
            "             BiomassRemovedType dung = new BiomassRemovedType();",
            "             dung.crop_type = \"RuminantDung_PastureFed\";",
            "             dung.dm_type = new string[] { \"RuminantDung_PastureFed\" };",
            "             dung.dlt_crop_dm = new float[] { Convert.ToSingle(AmountDungCReturned / 0.4) };  // ",
            "             dung.dlt_dm_n = new float[] { Convert.ToSingle(AmountDungNReturned) };    // ",
            "             dung.dlt_dm_p = new float[] { 0.0F };",
            "             dung.fraction_to_residue = new float[] { 1.0F };",
            "             SurfaceOM.OnBiomassRemoved(dung);",
            "             if (Verbose)",
            "                summary.WriteMessage(this, \"The amount of dung DM added to the litter was \" + (AmountDungCReturned / 0.4) + \" and the amount of N added in the dung was \" + (AmountDungNReturned), MessageType.Information);",
            "",
            "          } ",
            "        } // this is the end of the trampling and dung patch/paddock section",
            "        ",
            "        private void CalculateArrayLoad()",
            "        {",
            "            // Defines parameters of transformed distribution.",
            "            MeanLoadToGenerate += AmountAddMeanLoad;",
            "            double NormalMeanLoadToGenerate = Math.Log10(MeanLoadToGenerate) - 0.5 * CovarianceMatrix[0];",
            "",
            "            double[,] TransformedMu = { { NormalMeanLoadToGenerate },",
            "                                        { VectorOfMeans[1] }};",
            "",
            "            double[,] SigmaRows = { { CovarianceMatrix[0], CovarianceMatrix[1] },",
            "                                    { CovarianceMatrix[2], CovarianceMatrix[3] } };",
            "",
            "            double[,] SigmaColumns = { { 1} };",
            "",
            "            // Converts parameters to MathNet matrices.",
            "            Matrix<double> TransformedMuMatrix = Matrix<double>.Build.DenseOfArray(TransformedMu);",
            "            Matrix<double> SigmaRowsMatrix = Matrix<double>.Build.DenseOfArray(SigmaRows);",
            "            Matrix<double> SigmaColumnsMatrix = Matrix<double>.Build.DenseOfArray(SigmaColumns);",
            "",
            "            // Initializes transformed distribution.",
            "            var TransformedMVN = new MatrixNormal(TransformedMuMatrix,",
            "                                                  SigmaRowsMatrix,",
            "                                                  SigmaColumnsMatrix,",
            "                                                  RandomNumGenerator);",
            "",
            "            // Generates samples and transforms them back to lognormal space.",
            "            double[] LogNormalLoadSamples = new double[NumRealisations];",
            "            double[] LogNormalVolumeSamples = new double[NumRealisations];",
            "",
            "            for (int i = 0; i < NumRealisations; i++)",
            "            {",
            "                Matrix<double> LoadVolumeSample = TransformedMVN.Sample();",
            "                LogNormalLoadSamples[i] = Math.Pow(10.0, LoadVolumeSample[0,0]);",
            "                LogNormalVolumeSamples[i] = Math.Pow(10.0, LoadVolumeSample[1,0]);",
            "            }",
            "",
            "            // Updates some script parameters.",
            "            ArrayLoad = LogNormalLoadSamples;",
            "            ArrayVolume = LogNormalVolumeSamples;",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Verbose",
              "Value": "False"
            },
            {
              "Key": "ArrayLoadManual",
              "Value": "False"
            },
            {
              "Key": "ArrayLoad",
              "Value": "5.4, 5.413, 5.53, 5.593, 5.598, 5.608, 5.644, 5.649, 5.654, 5.664, 5.676, 5.685, 5.692, 5.702, 5.706, 5.717, 5.731, 5.732, 5.744, 5.754, 5.763, 5.783, 5.818, 5.82, 5.827, 5.843, 5.851, 5.852, 5.875, 5.89, 5.894, 5.912, 5.936, 5.938, 5.943, 5.947, 5.953, 5.956, 5.962, 5.972, 5.984, 5.985, 5.985, 5.987, 5.996, 6.002, 6.018, 6.018, 6.038, 6.041, 6.052, 6.063, 6.064, 6.094, 6.099, 6.128, 6.141, 6.143, 6.152, 6.154, 6.176, 6.179, 6.182, 6.211, 6.218, 6.234, 6.238, 6.25, 6.271, 6.272, 6.29, 6.3, 6.312, 6.32, 6.357, 6.375, 6.402, 6.41, 6.411, 6.439, 6.454, 6.48, 6.482, 6.483, 6.503, 6.518, 6.523, 6.544, 6.592, 6.599, 6.638, 6.65, 6.651, 6.653, 6.655, 6.675, 6.696, 6.699, 6.705, 6.716, 6.72, 6.729, 6.735, 6.736, 6.744, 6.764, 6.765, 6.775, 6.778, 6.794, 6.813, 6.816, 6.817, 6.819, 6.86, 6.872, 6.879, 6.891, 6.919, 6.939, 6.958, 6.959, 6.963, 6.992, 6.994, 6.999, 7.002, 7.01, 7.011, 7.017, 7.027, 7.029, 7.031, 7.037, 7.044, 7.045, 7.049, 7.054, 7.061, 7.061, 7.067, 7.091, 7.099, 7.099, 7.138, 7.138, 7.144, 7.168, 7.173, 7.174, 7.176, 7.18, 7.18, 7.198, 7.201, 7.203, 7.204, 7.206, 7.217, 7.218, 7.226, 7.229, 7.234, 7.235, 7.241, 7.249, 7.253, 7.271, 7.272, 7.273, 7.277, 7.278, 7.279, 7.295, 7.303, 7.305, 7.306, 7.312, 7.313, 7.315, 7.332, 7.333, 7.335, 7.339, 7.344, 7.347, 7.347, 7.352, 7.361, 7.364, 7.372, 7.386, 7.398, 7.398, 7.409, 7.409, 7.412, 7.414, 7.418, 7.422, 7.423, 7.44, 7.444, 7.446, 7.451, 7.455, 7.457, 7.466, 7.474, 7.475, 7.485, 7.492, 7.495, 7.496, 7.509, 7.514, 7.518, 7.52, 7.529, 7.532, 7.544, 7.547, 7.557, 7.558, 7.558, 7.562, 7.562, 7.563, 7.571, 7.586, 7.593, 7.595, 7.613, 7.645, 7.655, 7.66, 7.667, 7.667, 7.667, 7.68, 7.682, 7.69, 7.692, 7.693, 7.695, 7.698, 7.71, 7.714, 7.717, 7.718, 7.726, 7.727, 7.745, 7.749, 7.749, 7.75, 7.754, 7.766, 7.794, 7.796, 7.801, 7.81, 7.817, 7.822, 7.848, 7.855, 7.86, 7.863, 7.863, 7.865, 7.873, 7.877, 7.882, 7.895, 7.904, 7.909, 7.933, 7.933, 7.946, 7.947, 7.952, 7.961, 7.974, 7.981, 7.982, 7.984, 7.991, 7.994, 8.005, 8.009, 8.04, 8.042, 8.044, 8.046, 8.055, 8.057, 8.061, 8.064, 8.075, 8.076, 8.076, 8.098, 8.109, 8.115, 8.122, 8.126, 8.126, 8.132, 8.132, 8.134, 8.136, 8.138, 8.139, 8.145, 8.17, 8.174, 8.175, 8.179, 8.182, 8.183, 8.195, 8.205, 8.21, 8.215, 8.217, 8.232, 8.237, 8.238, 8.24, 8.241, 8.243, 8.243, 8.249, 8.26, 8.265, 8.284, 8.289, 8.292, 8.294, 8.304, 8.305, 8.321, 8.328, 8.332, 8.34, 8.345, 8.346, 8.348, 8.348, 8.368, 8.37, 8.371, 8.379, 8.381, 8.382, 8.382, 8.385, 8.386, 8.387, 8.388, 8.395, 8.418, 8.419, 8.419, 8.42, 8.42, 8.421, 8.425, 8.437, 8.439, 8.44, 8.442, 8.474, 8.492, 8.492, 8.499, 8.499, 8.501, 8.511, 8.511, 8.512, 8.513, 8.514, 8.514, 8.516, 8.517, 8.53, 8.532, 8.546, 8.55, 8.557, 8.558, 8.561, 8.566, 8.575, 8.575, 8.577, 8.593, 8.605, 8.611, 8.615, 8.616, 8.617, 8.622, 8.624, 8.628, 8.634, 8.636, 8.644, 8.653, 8.659, 8.663, 8.682, 8.686, 8.691, 8.692, 8.698, 8.7, 8.708, 8.728, 8.748, 8.757, 8.761, 8.764, 8.783, 8.785, 8.791, 8.795, 8.801, 8.803, 8.805, 8.812, 8.815, 8.827, 8.828, 8.828, 8.828, 8.829, 8.83, 8.833, 8.835, 8.837, 8.847, 8.852, 8.859, 8.859, 8.863, 8.872, 8.872, 8.874, 8.877, 8.878, 8.888, 8.89, 8.892, 8.899, 8.901, 8.901, 8.907, 8.933, 8.941, 8.95, 8.96, 8.961, 8.968, 8.968, 8.974, 8.975, 8.977, 8.979, 8.987, 8.993, 8.999, 9.002, 9.006, 9.013, 9.028, 9.032, 9.034, 9.035, 9.035, 9.041, 9.044, 9.045, 9.047, 9.048, 9.05, 9.053, 9.053, 9.066, 9.066, 9.077, 9.08, 9.082, 9.083, 9.084, 9.089, 9.09, 9.122, 9.127, 9.129, 9.129, 9.134, 9.142, 9.143, 9.144, 9.145, 9.151, 9.153, 9.164, 9.174, 9.18, 9.181, 9.186, 9.187, 9.187, 9.192, 9.195, 9.199, 9.209, 9.214, 9.216, 9.216, 9.221, 9.231, 9.232, 9.237, 9.246, 9.25, 9.253, 9.26, 9.269, 9.272, 9.277, 9.281, 9.285, 9.295, 9.31, 9.322, 9.323, 9.324, 9.324, 9.324, 9.326, 9.328, 9.339, 9.343, 9.348, 9.35, 9.351, 9.361, 9.378, 9.391, 9.394, 9.397, 9.399, 9.402, 9.405, 9.408, 9.419, 9.422, 9.429, 9.434, 9.438, 9.439, 9.444, 9.444, 9.454, 9.455, 9.467, 9.471, 9.471, 9.482, 9.485, 9.487, 9.489, 9.501, 9.504, 9.506, 9.526, 9.531, 9.533, 9.536, 9.54, 9.542, 9.545, 9.547, 9.548, 9.559, 9.566, 9.566, 9.572, 9.575, 9.575, 9.586, 9.59, 9.595, 9.6, 9.601, 9.607, 9.615, 9.619, 9.632, 9.637, 9.638, 9.649, 9.651, 9.652, 9.653, 9.658, 9.66, 9.661, 9.664, 9.667, 9.671, 9.671, 9.673, 9.673, 9.675, 9.696, 9.701, 9.708, 9.716, 9.717, 9.717, 9.723, 9.723, 9.748, 9.752, 9.753, 9.76, 9.783, 9.786, 9.789, 9.8, 9.809, 9.82, 9.822, 9.829, 9.836, 9.84, 9.847, 9.85, 9.854, 9.86, 9.861, 9.861, 9.867, 9.871, 9.872, 9.881, 9.881, 9.884, 9.884, 9.904, 9.906, 9.909, 9.917, 9.924, 9.931, 9.938, 9.951, 9.952, 9.953, 9.957, 9.963, 9.968, 9.969, 9.974, 9.985, 9.987, 9.987, 9.988, 9.993, 9.994, 9.999, 10, 10.004, 10.004, 10.004, 10.017, 10.023, 10.026, 10.028, 10.031, 10.037, 10.046, 10.066, 10.072, 10.082, 10.088, 10.088, 10.098, 10.106, 10.108, 10.11, 10.11, 10.113, 10.118, 10.119, 10.119, 10.119, 10.119, 10.129, 10.135, 10.137, 10.137, 10.142, 10.147, 10.15, 10.154, 10.158, 10.164, 10.166, 10.169, 10.176, 10.18, 10.189, 10.19, 10.191, 10.193, 10.193, 10.196, 10.201, 10.208, 10.209, 10.218, 10.226, 10.236, 10.237, 10.242, 10.249, 10.25, 10.254, 10.257, 10.258, 10.262, 10.265, 10.265, 10.269, 10.274, 10.277, 10.291, 10.294, 10.299, 10.303, 10.308, 10.313, 10.315, 10.325, 10.326, 10.337, 10.344, 10.345, 10.349, 10.352, 10.352, 10.354, 10.363, 10.382, 10.382, 10.386, 10.39, 10.395, 10.398, 10.403, 10.406, 10.41, 10.412, 10.415, 10.418, 10.418, 10.421, 10.425, 10.436, 10.44, 10.454, 10.455, 10.459, 10.46, 10.475, 10.477, 10.483, 10.49, 10.495, 10.497, 10.5, 10.501, 10.512, 10.517, 10.517, 10.522, 10.524, 10.535, 10.539, 10.549, 10.555, 10.557, 10.558, 10.56, 10.56, 10.57, 10.572, 10.58, 10.598, 10.599, 10.604, 10.605, 10.616, 10.618, 10.623, 10.624, 10.628, 10.63, 10.636, 10.636, 10.642, 10.647, 10.65, 10.651, 10.673, 10.676, 10.68, 10.687, 10.691, 10.696, 10.699, 10.699, 10.699, 10.703, 10.704, 10.705, 10.705, 10.709, 10.717, 10.717, 10.719, 10.722, 10.723, 10.723, 10.735, 10.741, 10.743, 10.755, 10.756, 10.758, 10.759, 10.762, 10.766, 10.772, 10.777, 10.779, 10.78, 10.78, 10.781, 10.784, 10.792, 10.793, 10.793, 10.795, 10.796, 10.797, 10.797, 10.8, 10.803, 10.804, 10.81, 10.812, 10.814, 10.815, 10.815, 10.817, 10.82, 10.832, 10.842, 10.844, 10.846, 10.852, 10.858, 10.863, 10.869, 10.87, 10.871, 10.874, 10.881, 10.883, 10.888, 10.889, 10.889, 10.892, 10.894, 10.897, 10.897, 10.897, 10.903, 10.903, 10.908, 10.91, 10.911, 10.915, 10.921, 10.922, 10.922, 10.935, 10.945, 10.947, 10.949, 10.949, 10.969, 10.971, 10.983, 10.986, 10.989, 10.991, 10.999, 11.001, 11.005, 11.008, 11.025, 11.027, 11.03, 11.03, 11.033, 11.036, 11.041, 11.043, 11.046, 11.049, 11.055, 11.058, 11.061, 11.064, 11.07, 11.08, 11.08, 11.084, 11.096, 11.098, 11.1, 11.106, 11.111, 11.114, 11.114, 11.115, 11.118, 11.122, 11.124, 11.125, 11.126, 11.128, 11.128, 11.13, 11.131, 11.134, 11.135, 11.136, 11.144, 11.145, 11.147, 11.15, 11.154, 11.158, 11.161, 11.162, 11.169, 11.17, 11.17, 11.171, 11.172, 11.179, 11.184, 11.197, 11.201, 11.202, 11.204, 11.216, 11.222, 11.223, 11.23, 11.243, 11.243, 11.247, 11.255, 11.26, 11.261, 11.261, 11.273, 11.286, 11.289, 11.293, 11.294, 11.303, 11.304, 11.308, 11.308, 11.31, 11.311, 11.314, 11.315, 11.32, 11.323, 11.328, 11.336, 11.342, 11.347, 11.36, 11.361, 11.363, 11.365, 11.368, 11.369, 11.37, 11.387, 11.387, 11.388, 11.388, 11.389, 11.398, 11.413, 11.42, 11.424, 11.424, 11.424, 11.429, 11.442, 11.46, 11.465, 11.466, 11.471, 11.472, 11.476, 11.478, 11.481, 11.485, 11.485, 11.486, 11.487, 11.487, 11.495, 11.499, 11.5, 11.505, 11.509, 11.51, 11.521, 11.527, 11.532, 11.552, 11.552, 11.553, 11.557, 11.558, 11.564, 11.57, 11.571, 11.575, 11.583, 11.586, 11.598, 11.607, 11.608, 11.609, 11.611, 11.62, 11.625, 11.634, 11.636, 11.64, 11.646, 11.649, 11.652, 11.656, 11.657, 11.659, 11.659, 11.667, 11.67, 11.672, 11.678, 11.679, 11.681, 11.702, 11.703, 11.703, 11.714, 11.721, 11.738, 11.74, 11.741, 11.762, 11.763, 11.766, 11.769, 11.769, 11.771, 11.775, 11.775, 11.786, 11.791, 11.794, 11.798, 11.8, 11.805, 11.816, 11.824, 11.829, 11.829, 11.839, 11.845, 11.847, 11.848, 11.856, 11.857, 11.859, 11.868, 11.884, 11.888, 11.89, 11.898, 11.899, 11.908, 11.909, 11.909, 11.93, 11.935, 11.939, 11.943, 11.952, 11.952, 11.96, 11.961, 11.962, 11.965, 11.965, 11.966, 11.971, 11.974, 11.976, 11.976, 11.981, 11.983, 11.989, 11.998, 12.002, 12.005, 12.014, 12.014, 12.016, 12.017, 12.027, 12.037, 12.039, 12.04, 12.041, 12.051, 12.056, 12.06, 12.063, 12.067, 12.069, 12.076, 12.08, 12.084, 12.091, 12.107, 12.111, 12.111, 12.112, 12.115, 12.115, 12.12, 12.123, 12.135, 12.136, 12.138, 12.147, 12.157, 12.157, 12.158, 12.166, 12.168, 12.173, 12.182, 12.185, 12.192, 12.195, 12.205, 12.205, 12.206, 12.209, 12.218, 12.221, 12.234, 12.235, 12.243, 12.268, 12.274, 12.279, 12.287, 12.289, 12.301, 12.301, 12.313, 12.313, 12.317, 12.337, 12.34, 12.34, 12.344, 12.345, 12.349, 12.349, 12.356, 12.356, 12.367, 12.37, 12.384, 12.39, 12.392, 12.393, 12.399, 12.417, 12.423, 12.426, 12.431, 12.439, 12.44, 12.449, 12.465, 12.465, 12.468, 12.468, 12.478, 12.49, 12.493, 12.501, 12.506, 12.515, 12.521, 12.529, 12.531, 12.534, 12.534, 12.539, 12.543, 12.552, 12.555, 12.563, 12.565, 12.568, 12.569, 12.577, 12.584, 12.585, 12.588, 12.589, 12.595, 12.598, 12.6, 12.602, 12.608, 12.608, 12.618, 12.621, 12.624, 12.624, 12.626, 12.626, 12.626, 12.636, 12.638, 12.643, 12.644, 12.646, 12.647, 12.649, 12.651, 12.656, 12.66, 12.671, 12.672, 12.675, 12.678, 12.679, 12.688, 12.69, 12.691, 12.701, 12.708, 12.717, 12.726, 12.729, 12.729, 12.732, 12.741, 12.743, 12.78, 12.787, 12.796, 12.798, 12.802, 12.803, 12.805, 12.81, 12.82, 12.824, 12.832, 12.839, 12.84, 12.844, 12.85, 12.863, 12.866, 12.868, 12.868, 12.876, 12.892, 12.895, 12.909, 12.913, 12.916, 12.924, 12.926, 12.938, 12.941, 12.941, 12.949, 12.95, 12.965, 12.966, 12.97, 12.975, 12.986, 12.992, 12.995, 12.998, 13.001, 13.003, 13.007, 13.01, 13.011, 13.022, 13.034, 13.045, 13.053, 13.054, 13.056, 13.059, 13.061, 13.062, 13.063, 13.065, 13.066, 13.07, 13.076, 13.079, 13.09, 13.104, 13.11, 13.111, 13.114, 13.118, 13.118, 13.118, 13.131, 13.133, 13.137, 13.147, 13.147, 13.15, 13.151, 13.154, 13.16, 13.175, 13.175, 13.176, 13.195, 13.202, 13.205, 13.206, 13.208, 13.212, 13.218, 13.218, 13.22, 13.223, 13.227, 13.233, 13.235, 13.239, 13.239, 13.246, 13.248, 13.256, 13.258, 13.259, 13.261, 13.27, 13.27, 13.289, 13.293, 13.309, 13.31, 13.313, 13.314, 13.314, 13.314, 13.326, 13.33, 13.333, 13.334, 13.341, 13.342, 13.344, 13.346, 13.349, 13.353, 13.353, 13.362, 13.366, 13.37, 13.372, 13.375, 13.39, 13.404, 13.408, 13.41, 13.415, 13.416, 13.419, 13.434, 13.449, 13.455, 13.461, 13.468, 13.48, 13.48, 13.492, 13.497, 13.499, 13.51, 13.512, 13.514, 13.515, 13.515, 13.517, 13.518, 13.519, 13.527, 13.528, 13.534, 13.541, 13.541, 13.543, 13.548, 13.551, 13.552, 13.556, 13.557, 13.559, 13.571, 13.58, 13.582, 13.587, 13.588, 13.588, 13.595, 13.604, 13.614, 13.624, 13.628, 13.631, 13.637, 13.642, 13.645, 13.65, 13.655, 13.657, 13.666, 13.675, 13.679, 13.686, 13.692, 13.693, 13.698, 13.699, 13.707, 13.713, 13.713, 13.737, 13.743, 13.744, 13.747, 13.748, 13.765, 13.766, 13.77, 13.776, 13.776, 13.791, 13.797, 13.801, 13.802, 13.807, 13.827, 13.828, 13.829, 13.831, 13.837, 13.838, 13.842, 13.851, 13.852, 13.871, 13.872, 13.894, 13.898, 13.899, 13.901, 13.904, 13.907, 13.93, 13.935, 13.938, 13.951, 13.955, 13.956, 13.962, 13.963, 13.965, 13.969, 13.975, 13.979, 13.981, 13.985, 13.987, 13.987, 13.991, 13.995, 13.996, 14.011, 14.019, 14.025, 14.026, 14.029, 14.033, 14.036, 14.038, 14.039, 14.043, 14.047, 14.047, 14.048, 14.05, 14.051, 14.062, 14.067, 14.072, 14.081, 14.09, 14.097, 14.097, 14.1, 14.108, 14.108, 14.112, 14.115, 14.124, 14.127, 14.13, 14.135, 14.137, 14.137, 14.145, 14.147, 14.155, 14.159, 14.174, 14.175, 14.175, 14.177, 14.181, 14.183, 14.19, 14.192, 14.193, 14.194, 14.199, 14.205, 14.207, 14.208, 14.211, 14.213, 14.218, 14.226, 14.234, 14.239, 14.249, 14.253, 14.265, 14.268, 14.271, 14.278, 14.283, 14.284, 14.284, 14.286, 14.293, 14.293, 14.294, 14.297, 14.31, 14.313, 14.319, 14.323, 14.332, 14.337, 14.346, 14.348, 14.361, 14.364, 14.369, 14.38, 14.38, 14.396, 14.402, 14.402, 14.404, 14.41, 14.413, 14.419, 14.423, 14.43, 14.432, 14.432, 14.442, 14.445, 14.446, 14.447, 14.45, 14.452, 14.456, 14.46, 14.461, 14.474, 14.477, 14.487, 14.489, 14.494, 14.501, 14.503, 14.504, 14.51, 14.511, 14.511, 14.516, 14.523, 14.524, 14.529, 14.532, 14.539, 14.54, 14.543, 14.55, 14.55, 14.553, 14.553, 14.555, 14.576, 14.591, 14.608, 14.61, 14.618, 14.623, 14.624, 14.631, 14.631, 14.631, 14.635, 14.642, 14.654, 14.661, 14.67, 14.677, 14.681, 14.683, 14.684, 14.687, 14.688, 14.694, 14.694, 14.702, 14.711, 14.715, 14.73, 14.739, 14.742, 14.743, 14.748, 14.748, 14.753, 14.758, 14.762, 14.762, 14.768, 14.773, 14.774, 14.78, 14.78, 14.786, 14.787, 14.788, 14.796, 14.797, 14.798, 14.803, 14.811, 14.813, 14.815, 14.816, 14.816, 14.82, 14.821, 14.829, 14.831, 14.851, 14.856, 14.861, 14.861, 14.868, 14.869, 14.87, 14.872, 14.881, 14.893, 14.893, 14.895, 14.898, 14.904, 14.905, 14.906, 14.906, 14.915, 14.922, 14.926, 14.928, 14.931, 14.933, 14.934, 14.936, 14.937, 14.944, 14.947, 14.951, 14.959, 14.971, 14.971, 14.981, 14.982, 14.985, 14.993, 14.999, 15.011, 15.014, 15.024, 15.024, 15.025, 15.028, 15.032, 15.032, 15.033, 15.045, 15.046, 15.053, 15.053, 15.06, 15.06, 15.071, 15.072, 15.077, 15.078, 15.081, 15.081, 15.087, 15.088, 15.09, 15.09, 15.092, 15.103, 15.107, 15.11, 15.116, 15.118, 15.135, 15.142, 15.151, 15.161, 15.165, 15.169, 15.191, 15.199, 15.203, 15.21, 15.229, 15.238, 15.241, 15.246, 15.25, 15.251, 15.251, 15.262, 15.264, 15.266, 15.27, 15.278, 15.292, 15.296, 15.298, 15.304, 15.31, 15.312, 15.313, 15.331, 15.336, 15.337, 15.338, 15.341, 15.356, 15.366, 15.369, 15.384, 15.384, 15.396, 15.399, 15.403, 15.405, 15.408, 15.418, 15.418, 15.431, 15.446, 15.453, 15.463, 15.481, 15.482, 15.486, 15.489, 15.491, 15.516, 15.517, 15.523, 15.531, 15.541, 15.544, 15.548, 15.551, 15.554, 15.554, 15.557, 15.561, 15.562, 15.572, 15.573, 15.575, 15.576, 15.585, 15.587, 15.598, 15.598, 15.603, 15.606, 15.608, 15.609, 15.61, 15.611, 15.612, 15.62, 15.621, 15.622, 15.624, 15.628, 15.63, 15.63, 15.631, 15.646, 15.651, 15.652, 15.655, 15.655, 15.662, 15.674, 15.678, 15.679, 15.696, 15.717, 15.722, 15.722, 15.722, 15.728, 15.738, 15.741, 15.742, 15.75, 15.751, 15.751, 15.752, 15.755, 15.755, 15.767, 15.77, 15.794, 15.797, 15.805, 15.825, 15.825, 15.838, 15.839, 15.845, 15.863, 15.867, 15.869, 15.878, 15.878, 15.885, 15.891, 15.9, 15.9, 15.902, 15.907, 15.907, 15.918, 15.925, 15.926, 15.933, 15.936, 15.936, 15.94, 15.94, 15.943, 15.949, 15.949, 15.954, 15.968, 15.974, 15.981, 16.002, 16.004, 16.011, 16.014, 16.024, 16.026, 16.027, 16.035, 16.045, 16.052, 16.055, 16.057, 16.058, 16.071, 16.072, 16.073, 16.076, 16.079, 16.079, 16.083, 16.089, 16.092, 16.096, 16.097, 16.101, 16.104, 16.118, 16.133, 16.137, 16.137, 16.141, 16.146, 16.163, 16.168, 16.171, 16.173, 16.183, 16.191, 16.194, 16.195, 16.2, 16.203, 16.206, 16.212, 16.214, 16.22, 16.225, 16.228, 16.241, 16.247, 16.253, 16.261, 16.266, 16.27, 16.272, 16.295, 16.299, 16.313, 16.324, 16.335, 16.335, 16.339, 16.354, 16.358, 16.359, 16.36, 16.365, 16.373, 16.373, 16.375, 16.385, 16.387, 16.398, 16.406, 16.409, 16.424, 16.427, 16.437, 16.44, 16.442, 16.447, 16.447, 16.453, 16.456, 16.457, 16.462, 16.468, 16.471, 16.485, 16.486, 16.488, 16.495, 16.504, 16.509, 16.511, 16.515, 16.515, 16.525, 16.531, 16.535, 16.538, 16.543, 16.543, 16.545, 16.545, 16.552, 16.554, 16.56, 16.562, 16.574, 16.575, 16.577, 16.582, 16.589, 16.591, 16.601, 16.609, 16.622, 16.643, 16.645, 16.648, 16.661, 16.665, 16.668, 16.676, 16.681, 16.683, 16.696, 16.696, 16.697, 16.698, 16.698, 16.698, 16.698, 16.7, 16.705, 16.71, 16.715, 16.717, 16.722, 16.725, 16.729, 16.735, 16.743, 16.744, 16.763, 16.771, 16.771, 16.782, 16.784, 16.789, 16.79, 16.791, 16.792, 16.796, 16.801, 16.81, 16.811, 16.815, 16.827, 16.83, 16.847, 16.847, 16.855, 16.858, 16.861, 16.863, 16.866, 16.871, 16.884, 16.886, 16.893, 16.898, 16.898, 16.91, 16.91, 16.927, 16.933, 16.946, 16.953, 16.957, 16.959, 16.971, 16.974, 16.985, 16.985, 16.987, 16.988, 16.994, 16.995, 16.998, 17.002, 17.007, 17.03, 17.047, 17.048, 17.055, 17.059, 17.073, 17.083, 17.085, 17.092, 17.098, 17.103, 17.125, 17.148, 17.157, 17.16, 17.171, 17.171, 17.191, 17.191, 17.203, 17.208, 17.214, 17.217, 17.219, 17.238, 17.244, 17.251, 17.264, 17.274, 17.282, 17.287, 17.289, 17.289, 17.304, 17.306, 17.31, 17.311, 17.32, 17.323, 17.329, 17.33, 17.33, 17.338, 17.343, 17.348, 17.357, 17.368, 17.371, 17.372, 17.407, 17.416, 17.417, 17.419, 17.428, 17.43, 17.432, 17.437, 17.441, 17.453, 17.455, 17.465, 17.475, 17.482, 17.483, 17.486, 17.493, 17.495, 17.504, 17.504, 17.504, 17.507, 17.51, 17.52, 17.523, 17.526, 17.528, 17.538, 17.547, 17.547, 17.555, 17.557, 17.559, 17.562, 17.567, 17.572, 17.576, 17.579, 17.585, 17.595, 17.603, 17.605, 17.607, 17.626, 17.631, 17.632, 17.633, 17.634, 17.643, 17.656, 17.657, 17.665, 17.685, 17.701, 17.705, 17.706, 17.71, 17.71, 17.713, 17.734, 17.738, 17.738, 17.744, 17.752, 17.762, 17.766, 17.784, 17.786, 17.798, 17.798, 17.802, 17.807, 17.821, 17.822, 17.824, 17.83, 17.861, 17.869, 17.878, 17.893, 17.896, 17.902, 17.903, 17.907, 17.911, 17.914, 17.916, 17.924, 17.927, 17.93, 17.94, 17.957, 17.966, 17.971, 17.977, 17.992, 17.992, 17.992, 17.993, 17.994, 18.009, 18.017, 18.023, 18.025, 18.026, 18.026, 18.027, 18.032, 18.033, 18.035, 18.038, 18.043, 18.047, 18.055, 18.072, 18.074, 18.08, 18.084, 18.093, 18.094, 18.094, 18.1, 18.109, 18.122, 18.128, 18.142, 18.148, 18.149, 18.156, 18.157, 18.158, 18.166, 18.182, 18.192, 18.201, 18.209, 18.212, 18.213, 18.218, 18.224, 18.227, 18.237, 18.248, 18.258, 18.261, 18.262, 18.265, 18.266, 18.282, 18.284, 18.293, 18.294, 18.305, 18.307, 18.323, 18.338, 18.345, 18.348, 18.349, 18.363, 18.364, 18.37, 18.371, 18.371, 18.373, 18.373, 18.373, 18.373, 18.388, 18.398, 18.402, 18.419, 18.426, 18.43, 18.45, 18.463, 18.465, 18.466, 18.479, 18.484, 18.486, 18.494, 18.496, 18.499, 18.5, 18.507, 18.509, 18.514, 18.514, 18.514, 18.515, 18.515, 18.543, 18.543, 18.545, 18.559, 18.562, 18.581, 18.605, 18.606, 18.63, 18.631, 18.632, 18.645, 18.659, 18.668, 18.67, 18.671, 18.673, 18.673, 18.678, 18.695, 18.702, 18.707, 18.71, 18.716, 18.716, 18.72, 18.722, 18.723, 18.741, 18.742, 18.742, 18.752, 18.761, 18.763, 18.769, 18.787, 18.792, 18.797, 18.802, 18.813, 18.816, 18.817, 18.821, 18.823, 18.836, 18.861, 18.864, 18.868, 18.878, 18.883, 18.902, 18.911, 18.914, 18.918, 18.926, 18.929, 18.943, 18.963, 18.964, 18.971, 18.978, 18.994, 18.998, 19.006, 19.007, 19.027, 19.035, 19.041, 19.041, 19.043, 19.048, 19.061, 19.068, 19.069, 19.077, 19.077, 19.084, 19.104, 19.106, 19.107, 19.132, 19.135, 19.145, 19.146, 19.149, 19.157, 19.166, 19.168, 19.173, 19.175, 19.176, 19.179, 19.188, 19.194, 19.203, 19.207, 19.208, 19.21, 19.223, 19.232, 19.234, 19.261, 19.264, 19.281, 19.303, 19.305, 19.31, 19.324, 19.337, 19.339, 19.339, 19.341, 19.358, 19.359, 19.375, 19.388, 19.4, 19.409, 19.413, 19.417, 19.427, 19.428, 19.439, 19.464, 19.478, 19.483, 19.488, 19.489, 19.498, 19.513, 19.518, 19.519, 19.519, 19.532, 19.536, 19.545, 19.546, 19.548, 19.558, 19.563, 19.574, 19.597, 19.597, 19.602, 19.611, 19.618, 19.631, 19.635, 19.638, 19.641, 19.662, 19.669, 19.68, 19.686, 19.693, 19.703, 19.726, 19.731, 19.732, 19.735, 19.737, 19.748, 19.803, 19.805, 19.808, 19.817, 19.817, 19.826, 19.828, 19.839, 19.846, 19.855, 19.856, 19.859, 19.872, 19.874, 19.88, 19.894, 19.901, 19.902, 19.902, 19.905, 19.91, 19.911, 19.934, 19.942, 19.953, 19.953, 19.954, 19.974, 19.978, 20.001, 20.001, 20.014, 20.019, 20.02, 20.036, 20.039, 20.039, 20.046, 20.054, 20.073, 20.088, 20.088, 20.093, 20.107, 20.128, 20.128, 20.137, 20.144, 20.146, 20.147, 20.161, 20.162, 20.202, 20.204, 20.206, 20.223, 20.239, 20.245, 20.247, 20.251, 20.26, 20.267, 20.27, 20.28, 20.292, 20.296, 20.298, 20.3, 20.311, 20.339, 20.353, 20.358, 20.363, 20.368, 20.412, 20.421, 20.431, 20.439, 20.457, 20.459, 20.465, 20.469, 20.48, 20.504, 20.511, 20.541, 20.549, 20.569, 20.57, 20.574, 20.578, 20.58, 20.584, 20.598, 20.604, 20.604, 20.623, 20.626, 20.639, 20.645, 20.645, 20.654, 20.655, 20.659, 20.666, 20.667, 20.669, 20.669, 20.674, 20.68, 20.682, 20.698, 20.701, 20.71, 20.712, 20.734, 20.74, 20.761, 20.762, 20.769, 20.775, 20.815, 20.825, 20.83, 20.838, 20.847, 20.848, 20.854, 20.876, 20.88, 20.885, 20.892, 20.893, 20.895, 20.91, 20.925, 20.956, 20.982, 20.984, 20.999, 21.002, 21.005, 21.015, 21.033, 21.037, 21.055, 21.055, 21.067, 21.07, 21.09, 21.09, 21.122, 21.131, 21.134, 21.137, 21.147, 21.154, 21.162, 21.163, 21.166, 21.174, 21.191, 21.199, 21.215, 21.216, 21.225, 21.24, 21.242, 21.245, 21.254, 21.267, 21.275, 21.279, 21.286, 21.286, 21.288, 21.321, 21.322, 21.326, 21.367, 21.369, 21.371, 21.373, 21.377, 21.377, 21.387, 21.393, 21.414, 21.414, 21.429, 21.467, 21.47, 21.486, 21.49, 21.499, 21.5, 21.502, 21.513, 21.532, 21.537, 21.539, 21.553, 21.566, 21.6, 21.611, 21.612, 21.627, 21.643, 21.652, 21.664, 21.676, 21.686, 21.701, 21.742, 21.745, 21.757, 21.768, 21.776, 21.78, 21.78, 21.786, 21.792, 21.8, 21.813, 21.817, 21.829, 21.835, 21.845, 21.846, 21.939, 21.952, 21.958, 21.963, 21.971, 21.989, 21.995, 22, 22.004, 22.014, 22.028, 22.033, 22.042, 22.043, 22.05, 22.051, 22.052, 22.063, 22.064, 22.065, 22.076, 22.1, 22.1, 22.122, 22.141, 22.147, 22.156, 22.162, 22.171, 22.209, 22.22, 22.222, 22.224, 22.227, 22.234, 22.245, 22.248, 22.25, 22.251, 22.263, 22.266, 22.274, 22.305, 22.309, 22.353, 22.373, 22.38, 22.39, 22.402, 22.41, 22.434, 22.46, 22.465, 22.466, 22.467, 22.468, 22.48, 22.484, 22.509, 22.515, 22.546, 22.568, 22.573, 22.594, 22.601, 22.604, 22.619, 22.625, 22.637, 22.661, 22.675, 22.676, 22.685, 22.692, 22.692, 22.692, 22.699, 22.706, 22.746, 22.766, 22.793, 22.806, 22.812, 22.84, 22.843, 22.852, 22.862, 22.862, 22.865, 22.888, 22.919, 22.927, 22.929, 22.96, 22.965, 22.966, 22.992, 23.006, 23.02, 23.021, 23.023, 23.03, 23.032, 23.055, 23.073, 23.098, 23.186, 23.209, 23.222, 23.25, 23.266, 23.267, 23.27, 23.295, 23.296, 23.301, 23.306, 23.313, 23.329, 23.335, 23.347, 23.351, 23.364, 23.383, 23.384, 23.385, 23.392, 23.393, 23.421, 23.421, 23.423, 23.433, 23.459, 23.464, 23.466, 23.502, 23.511, 23.531, 23.547, 23.549, 23.558, 23.558, 23.607, 23.619, 23.621, 23.624, 23.626, 23.629, 23.629, 23.638, 23.677, 23.679, 23.7, 23.71, 23.73, 23.743, 23.752, 23.76, 23.761, 23.771, 23.774, 23.813, 23.834, 23.836, 23.845, 23.85, 23.87, 23.871, 23.876, 23.891, 23.909, 23.92, 23.924, 23.926, 23.962, 23.962, 23.969, 23.994, 24.001, 24.002, 24.023, 24.05, 24.051, 24.063, 24.064, 24.067, 24.116, 24.133, 24.141, 24.195, 24.196, 24.212, 24.237, 24.257, 24.324, 24.325, 24.328, 24.34, 24.345, 24.348, 24.365, 24.398, 24.413, 24.418, 24.427, 24.432, 24.482, 24.486, 24.496, 24.502, 24.525, 24.569, 24.648, 24.651, 24.653, 24.713, 24.717, 24.73, 24.736, 24.738, 24.741, 24.772, 24.807, 24.814, 24.82, 24.849, 24.871, 24.872, 24.894, 24.894, 24.909, 24.924, 24.944, 24.952, 24.98, 24.99, 24.994, 25.012, 25.018, 25.018, 25.019, 25.025, 25.058, 25.073, 25.082, 25.112, 25.118, 25.139, 25.157, 25.199, 25.223, 25.233, 25.239, 25.308, 25.314, 25.335, 25.341, 25.343, 25.349, 25.352, 25.363, 25.386, 25.387, 25.427, 25.428, 25.435, 25.449, 25.481, 25.496, 25.532, 25.633, 25.642, 25.663, 25.691, 25.741, 25.741, 25.763, 25.773, 25.794, 25.866, 25.934, 25.947, 25.951, 25.975, 25.975, 26.028, 26.034, 26.041, 26.103, 26.105, 26.137, 26.142, 26.147, 26.165, 26.189, 26.214, 26.248, 26.28, 26.295, 26.339, 26.362, 26.397, 26.401, 26.409, 26.428, 26.434, 26.439, 26.443, 26.447, 26.457, 26.472, 26.491, 26.508, 26.517, 26.523, 26.527, 26.543, 26.545, 26.564, 26.625, 26.635, 26.663, 26.686, 26.688, 26.699, 26.733, 26.781, 26.782, 26.783, 26.805, 26.815, 26.822, 26.83, 26.854, 26.865, 26.878, 26.88, 26.905, 26.933, 26.96, 26.963, 26.965, 26.973, 26.983, 27.025, 27.036, 27.046, 27.073, 27.082, 27.088, 27.09, 27.147, 27.156, 27.175, 27.189, 27.211, 27.22, 27.242, 27.249, 27.258, 27.283, 27.325, 27.348, 27.356, 27.406, 27.434, 27.6, 27.619, 27.622, 27.642, 27.681, 27.712, 27.715, 27.73, 27.768, 27.775, 27.779, 27.809, 27.842, 27.848, 27.859, 27.861, 27.87, 27.879, 27.925, 27.955, 27.955, 27.959, 27.985, 28.028, 28.042, 28.043, 28.051, 28.073, 28.084, 28.143, 28.169, 28.228, 28.234, 28.25, 28.356, 28.387, 28.437, 28.444, 28.524, 28.555, 28.582, 28.607, 28.608, 28.659, 28.681, 28.721, 28.729, 28.747, 28.766, 28.794, 28.815, 28.858, 28.86, 28.879, 28.881, 28.907, 28.914, 28.958, 28.959, 28.986, 29.013, 29.028, 29.03, 29.069, 29.073, 29.121, 29.165, 29.214, 29.261, 29.294, 29.304, 29.318, 29.371, 29.375, 29.417, 29.426, 29.45, 29.528, 29.532, 29.551, 29.576, 29.593, 29.64, 29.661, 29.705, 29.712, 29.724, 29.789, 29.857, 29.903, 29.912, 29.935, 29.937, 29.957, 29.962, 29.999, 30.018, 30.072, 30.075, 30.114, 30.21, 30.21, 30.272, 30.279, 30.304, 30.326, 30.326, 30.347, 30.359, 30.399, 30.469, 30.502, 30.512, 30.531, 30.534, 30.562, 30.606, 30.65, 30.669, 30.73, 30.745, 30.778, 30.811, 30.848, 30.974, 31.033, 31.034, 31.116, 31.222, 31.259, 31.343, 31.585, 31.601, 31.686, 31.727, 31.748, 31.769, 31.799, 31.897, 31.901, 31.939, 31.981, 31.994, 32.018, 32.041, 32.109, 32.115, 32.118, 32.18, 32.221, 32.275, 32.333, 32.362, 32.59, 32.826, 32.838, 32.879, 32.896, 33.001, 33.229, 33.343, 33.36, 33.437, 33.438, 33.45, 33.461, 33.58, 33.636, 33.638, 33.674, 33.698, 33.869, 34.009, 34.043, 34.072, 34.077, 34.094, 34.232, 34.386, 34.554, 34.566, 34.594, 34.633, 34.663, 34.817, 34.824, 34.915, 35.035, 35.175, 35.361, 35.545, 35.614, 35.639, 35.862, 36.29, 36.502, 37.924, 37.976"
            },
            {
              "Key": "ArrayVolume",
              "Value": "1.258, 1.216, 1.165, 1.293, 1.371, 1.127, 1.204, 1.168, 1.154, 1.128, 1.172, 1.247, 1.227, 1.114, 1.402, 1.464, 1.159, 1.165, 1.213, 1.215, 1.152, 1.337, 1.463, 1.211, 1.226, 1.335, 1.364, 1.23, 1.543, 1.124, 1.591, 1.519, 1.127, 1.522, 1.233, 1.381, 1.262, 1.575, 1.378, 1.532, 1.166, 1.424, 1.311, 1.268, 1.168, 1.364, 1.466, 1.543, 1.595, 1.294, 1.249, 1.49, 1.476, 1.357, 1.24, 1.48, 1.625, 1.657, 1.519, 1.146, 1.259, 1.248, 1.502, 1.544, 1.606, 1.61, 1.402, 1.375, 1.22, 1.683, 1.392, 1.56, 1.707, 1.258, 1.554, 1.278, 1.345, 1.342, 1.111, 1.51, 1.627, 1.671, 1.47, 1.546, 1.096, 1.669, 1.188, 1.502, 1.451, 1.644, 1.186, 1.182, 1.182, 1.609, 1.257, 1.523, 1.733, 1.479, 1.262, 1.535, 1.624, 1.279, 1.532, 1.452, 1.571, 1.365, 1.768, 1.496, 1.246, 1.318, 1.924, 1.215, 1.364, 1.364, 1.587, 1.771, 1.637, 1.631, 1.922, 1.689, 1.395, 1.667, 1.143, 1.412, 1.618, 1.166, 1.611, 1.589, 1.663, 1.142, 1.363, 1.515, 1.495, 1.346, 1.449, 1.288, 1.433, 1.282, 1.634, 1.439, 1.261, 1.41, 1.412, 1.109, 1.356, 1.593, 1.522, 1.338, 1.588, 1.376, 1.694, 1.362, 1.454, 1.507, 1.437, 1.534, 2.063, 1.553, 1.716, 1.307, 1.391, 1.757, 1.761, 1.669, 1.541, 1.731, 1.204, 1.938, 1.231, 1.406, 1.618, 1.856, 1.288, 1.253, 1.779, 2.086, 1.385, 1.495, 1.202, 1.843, 1.241, 1.564, 1.152, 1.319, 1.489, 1.719, 1.335, 1.462, 1.657, 1.297, 1.494, 1.209, 1.562, 1.767, 1.351, 2.122, 1.849, 2.083, 1.322, 1.898, 1.485, 1.371, 1.344, 1.312, 1.352, 1.37, 1.386, 1.571, 2.167, 1.716, 1.658, 1.78, 1.495, 1.308, 1.609, 1.419, 1.443, 1.681, 1.675, 1.133, 1.537, 1.578, 1.391, 1.472, 1.427, 1.594, 1.617, 1.602, 1.235, 2.013, 2.079, 1.488, 1.844, 1.745, 1.585, 1.939, 1.432, 1.648, 1.492, 1.815, 2.151, 1.649, 1.342, 1.572, 2.005, 2.019, 1.25, 1.728, 1.318, 1.798, 1.411, 1.665, 1.786, 1.362, 1.383, 1.455, 1.687, 1.617, 1.468, 2.036, 1.812, 1.383, 1.32, 1.895, 1.715, 1.632, 1.314, 2.025, 1.392, 2.088, 2.209, 1.863, 1.732, 1.843, 1.816, 1.862, 1.637, 1.94, 1.681, 1.589, 1.454, 1.479, 1.64, 1.572, 2.092, 1.213, 1.706, 1.385, 2.029, 1.574, 1.701, 1.999, 2.13, 1.987, 1.735, 1.884, 1.63, 1.56, 2.07, 1.459, 1.667, 2.029, 1.546, 1.223, 1.783, 2.047, 1.697, 2.362, 1.518, 1.735, 1.379, 2.016, 1.982, 1.863, 2.152, 1.614, 1.259, 1.423, 2.37, 1.453, 1.289, 2.107, 1.883, 2.073, 1.325, 1.963, 1.459, 1.373, 1.457, 1.744, 1.604, 2.372, 1.453, 2.002, 1.745, 1.614, 1.584, 2.243, 1.462, 1.407, 2.116, 1.912, 1.614, 2.072, 2.445, 2.291, 1.874, 1.576, 1.496, 1.412, 1.905, 1.835, 1.496, 2.127, 1.391, 1.415, 1.699, 1.396, 1.399, 1.594, 2.012, 2.409, 1.214, 1.769, 2.118, 1.794, 1.772, 1.947, 1.45, 2.385, 2.278, 2.164, 2.257, 1.758, 2.101, 1.853, 1.368, 1.632, 2.274, 1.864, 1.666, 1.995, 1.97, 1.342, 1.699, 1.921, 1.297, 1.785, 1.177, 1.644, 1.326, 1.689, 1.776, 1.281, 1.656, 2.305, 2.091, 2.2, 2.342, 2.057, 2.034, 1.764, 1.943, 1.628, 1.326, 1.62, 2.534, 1.721, 1.698, 1.487, 1.525, 1.562, 1.41, 2.194, 1.672, 2.111, 2.259, 2.093, 2.186, 1.737, 1.421, 2.288, 1.215, 1.629, 1.546, 1.471, 2.03, 2.189, 1.581, 1.715, 2.386, 1.707, 1.608, 1.887, 1.662, 2.528, 1.395, 1.775, 2.301, 1.516, 2.317, 1.641, 1.341, 1.272, 2.048, 1.607, 1.924, 1.739, 1.916, 1.486, 1.526, 1.549, 1.987, 1.495, 1.755, 1.241, 2.114, 2.289, 2.114, 1.235, 1.894, 1.829, 2.094, 1.678, 1.816, 1.627, 1.223, 1.779, 1.948, 1.53, 1.998, 1.401, 1.554, 1.291, 1.346, 2.494, 1.304, 1.706, 1.935, 1.489, 1.413, 1.659, 2.465, 1.788, 2.018, 2.072, 1.946, 2.136, 2.013, 1.825, 1.298, 2.593, 1.513, 2.605, 2.278, 2.308, 1.891, 1.959, 1.458, 2.022, 2.048, 1.93, 1.426, 1.585, 1.878, 1.968, 1.901, 1.692, 1.717, 2.1, 1.685, 1.923, 1.757, 1.52, 2.411, 1.934, 2.057, 1.568, 2.153, 1.783, 2.061, 1.803, 2.234, 1.818, 1.7, 1.583, 1.712, 2.016, 2.18, 2.014, 2.523, 1.765, 1.421, 1.403, 1.968, 1.337, 1.548, 1.631, 1.743, 1.306, 2.164, 1.551, 1.944, 2.209, 1.786, 2.352, 2.181, 2.069, 1.908, 1.364, 1.876, 2.442, 1.535, 2.038, 2.118, 2.348, 1.832, 2.13, 1.907, 1.638, 1.584, 1.523, 1.633, 1.685, 1.829, 2.679, 1.511, 1.568, 1.588, 1.844, 1.504, 1.903, 1.4, 2.269, 1.89, 2.543, 1.531, 1.566, 1.656, 1.861, 1.371, 1.73, 2.693, 1.512, 1.514, 1.989, 2.656, 1.414, 1.77, 1.548, 1.688, 1.436, 2.29, 2.337, 1.906, 2.079, 1.588, 1.567, 2.308, 2.559, 1.735, 1.695, 1.934, 1.711, 2.29, 2.431, 2.008, 2.824, 1.969, 1.579, 2.327, 1.399, 2.469, 1.723, 1.676, 1.804, 2.267, 2.183, 1.512, 1.303, 1.828, 2.347, 1.491, 1.381, 1.732, 2.405, 2.208, 2.088, 1.67, 1.675, 1.932, 2.68, 2.115, 1.934, 1.447, 1.98, 1.366, 1.505, 2.013, 1.62, 2.036, 2.056, 1.907, 2.124, 1.49, 1.45, 2.112, 1.755, 1.736, 2.596, 1.403, 1.891, 1.621, 2.421, 1.63, 2.233, 1.897, 2.883, 1.969, 2.22, 1.463, 2.885, 1.649, 1.872, 2.399, 1.989, 1.567, 1.91, 1.373, 1.694, 1.943, 2.895, 1.3, 2.194, 1.932, 2.167, 2.369, 1.546, 2.119, 2.6, 2.132, 2.439, 2.249, 1.641, 2.843, 1.607, 2.039, 2.283, 1.819, 1.946, 1.52, 2.901, 2.09, 1.718, 1.885, 2.252, 1.64, 1.451, 2.637, 2.39, 1.965, 2.049, 1.852, 2.225, 2.2, 2.828, 2.783, 1.584, 2.2, 1.347, 1.576, 2.77, 1.687, 2.34, 2.338, 1.958, 2.021, 2.189, 1.683, 1.704, 2.063, 2.28, 1.671, 2.58, 2.036, 2.344, 2.546, 1.792, 1.849, 1.626, 2.403, 1.563, 2.297, 1.623, 1.626, 1.43, 1.385, 2.08, 1.953, 1.389, 1.442, 2.084, 2.63, 1.304, 2.156, 2.064, 1.741, 2.044, 2.273, 1.659, 2.242, 2.598, 1.977, 2.036, 1.948, 1.979, 2.331, 1.452, 2.124, 2.192, 2.089, 1.63, 2.254, 2.184, 1.521, 2.43, 2.166, 2.489, 2.572, 1.971, 1.872, 1.99, 2.215, 1.878, 1.665, 2.92, 2.767, 2.748, 2.008, 2.051, 1.531, 1.62, 2.485, 2.036, 1.539, 2.016, 1.843, 1.555, 2.819, 1.548, 2.691, 1.404, 2.85, 1.613, 2.931, 1.805, 2.4, 1.394, 2.496, 1.869, 1.963, 1.889, 2.162, 1.942, 2.476, 2.182, 1.96, 1.777, 2.067, 1.97, 1.518, 1.777, 1.799, 2.371, 2.322, 1.691, 2.191, 2.495, 1.458, 1.63, 1.757, 1.915, 1.522, 2.357, 2.126, 1.588, 1.67, 1.558, 1.59, 2.803, 1.749, 2.364, 1.753, 2.256, 1.797, 2.671, 1.853, 2.832, 1.889, 1.899, 1.99, 1.907, 1.983, 1.708, 2.144, 2.537, 2.138, 2.026, 2.034, 1.876, 1.913, 2.687, 2.382, 2.095, 3.028, 1.882, 1.732, 1.367, 2.467, 1.4, 2.432, 1.702, 2.811, 2.078, 1.564, 1.841, 2.147, 1.915, 1.766, 2.247, 2.324, 1.617, 1.769, 2.016, 2.041, 2.249, 1.715, 2.307, 2.849, 1.592, 2.2, 1.801, 2.154, 2.066, 2.182, 2.854, 1.939, 2.333, 2.343, 2.742, 2.181, 2.632, 2.761, 1.773, 2.994, 1.73, 2.05, 2.023, 2.496, 2.749, 1.48, 2.084, 1.698, 1.871, 1.65, 2.426, 1.592, 2.195, 1.978, 1.582, 1.576, 2.499, 1.671, 1.979, 2.062, 2.75, 2.231, 2.993, 2.17, 1.912, 3.062, 2.34, 2.128, 1.711, 1.511, 1.779, 1.887, 1.74, 1.556, 1.37, 1.875, 1.933, 1.858, 1.649, 2.347, 1.635, 2.23, 2.499, 1.645, 1.421, 2.63, 1.973, 1.484, 3.028, 2.24, 2.265, 2.122, 2.258, 2.143, 2.285, 1.869, 2.493, 2.41, 2.142, 1.913, 2.563, 1.824, 1.938, 2.994, 1.666, 1.563, 2.464, 2.156, 2.378, 2.389, 2.155, 2.092, 1.804, 1.941, 1.415, 2.93, 1.724, 1.638, 1.724, 2.253, 2.475, 2.634, 2.313, 1.992, 1.735, 1.541, 1.476, 1.963, 2.454, 2.253, 1.605, 2.456, 1.945, 1.814, 1.61, 2.077, 2.413, 2.049, 2.067, 2.358, 2.538, 1.831, 2.183, 2.324, 3.018, 2.165, 1.645, 2.603, 1.939, 1.769, 2.66, 2.511, 1.846, 2.163, 2.425, 2.581, 2.092, 2.443, 2.447, 1.843, 2.081, 2.534, 2.169, 1.472, 2.273, 2.71, 2.374, 1.931, 3.057, 2.791, 1.563, 1.546, 1.956, 2.692, 2.384, 1.701, 2.361, 1.807, 2.447, 2.521, 2.635, 1.48, 2.78, 2.287, 2.458, 1.537, 1.568, 2.551, 1.783, 1.93, 2.554, 1.606, 2.497, 1.661, 2.378, 1.621, 1.882, 1.756, 2.405, 1.447, 2.475, 2.234, 2.551, 2.189, 2.533, 2.126, 1.471, 1.77, 1.684, 2.274, 2.461, 1.615, 1.565, 2.476, 2.284, 2.408, 2.129, 2.28, 2.318, 2.144, 2.201, 2.023, 1.867, 2.862, 2.593, 2.065, 2.776, 2.412, 2.007, 2.528, 1.831, 2.312, 2.259, 1.707, 2.332, 1.648, 1.976, 2.211, 1.563, 2.076, 1.766, 1.931, 2.119, 2.453, 2.504, 1.415, 2.317, 1.646, 2.042, 2.791, 1.672, 2.909, 1.624, 1.837, 2.606, 2.194, 1.551, 2.116, 1.803, 2.079, 1.734, 3.076, 2.579, 2.92, 2.73, 2.393, 2.703, 1.99, 1.958, 1.871, 2.14, 2.159, 2.633, 2.791, 2.13, 2.562, 2.477, 2.51, 1.557, 2.187, 2.438, 2.789, 2.56, 2.489, 2.089, 1.691, 2.995, 2.03, 2.392, 2.411, 2.153, 2.152, 1.565, 3.255, 2.194, 1.657, 2.22, 2.532, 3.048, 2.159, 2.92, 2.359, 2.444, 2.203, 1.95, 2.223, 1.651, 1.757, 2.363, 2.23, 2.158, 1.61, 2.469, 2.184, 3.107, 2.305, 3.246, 2.305, 1.833, 1.774, 2.469, 2.632, 1.75, 2.39, 2.553, 2.15, 2.115, 1.46, 2.085, 2.18, 2.221, 2.243, 3.356, 2.129, 2.032, 1.753, 2.532, 2.419, 2.748, 2.47, 1.94, 1.695, 2.287, 2.84, 1.771, 2.03, 1.912, 1.888, 3.218, 2.009, 2.662, 1.993, 2.651, 3.02, 3.247, 2.292, 1.995, 2.607, 3.19, 1.964, 2.052, 2.643, 1.479, 2.695, 2.54, 1.537, 2.21, 2.007, 2.616, 1.822, 1.861, 2.012, 2.73, 2.913, 1.886, 2.629, 2.571, 2.063, 1.921, 2.497, 2.085, 1.632, 2.503, 2.456, 2.29, 2.311, 3.039, 2.055, 1.943, 2.256, 2.029, 2.339, 1.793, 2.158, 1.628, 2.2, 2.136, 1.644, 1.737, 2.38, 2.907, 2.169, 2.443, 2.706, 1.999, 1.551, 1.672, 2.161, 2.318, 2.005, 2.407, 2.182, 2.136, 2.913, 1.887, 1.644, 2.329, 2.545, 2.01, 2.794, 1.877, 2.435, 2.056, 2.015, 1.541, 2.197, 2.257, 2.102, 2.047, 3.447, 2.444, 1.462, 3.254, 2.644, 2.258, 1.654, 2.557, 2.101, 1.591, 1.709, 1.822, 3.234, 3.539, 2.234, 2.699, 2.248, 2.194, 2.174, 2.504, 1.687, 2.847, 3.167, 2.326, 2.765, 2.806, 2.794, 2.58, 1.922, 1.977, 2.982, 2.187, 2.394, 1.822, 2.446, 3.265, 2.356, 2.393, 1.812, 1.656, 2.845, 2.205, 2.476, 2.387, 2.534, 2.01, 3.408, 2.991, 2.64, 2.102, 1.515, 3.177, 3.217, 3.507, 2.378, 2.663, 3.026, 2.424, 2.522, 2.037, 1.978, 2.158, 1.709, 2.409, 2.264, 2.856, 2.736, 1.568, 3.266, 1.933, 1.768, 2.739, 1.879, 2.755, 2.123, 2.64, 1.635, 2.622, 2.439, 1.592, 3.481, 2.029, 1.729, 2.944, 2.221, 2.574, 2.125, 1.733, 2.66, 2.356, 2.54, 2.169, 2.658, 1.785, 2.506, 1.873, 1.948, 2.605, 2.991, 3.022, 1.686, 2.193, 2.644, 2.134, 2.316, 1.917, 1.756, 2.216, 1.638, 2.685, 2.345, 3.412, 2.637, 3.221, 1.925, 2.18, 2.327, 1.766, 2.619, 3.001, 2.443, 1.981, 2.771, 1.727, 3.673, 2.477, 2.036, 3.152, 3.487, 2.059, 2.259, 2.434, 2.157, 1.846, 2.756, 2.114, 1.648, 2.429, 2.659, 1.744, 2.4, 2.624, 1.754, 2.058, 3.081, 2.078, 1.818, 1.594, 2.57, 3.226, 2.025, 1.909, 1.731, 3.295, 2.663, 3.186, 2.32, 3.539, 2.388, 2.945, 3.217, 2.357, 1.949, 3.332, 2.676, 3.057, 2.603, 3.633, 2.283, 2.462, 2.93, 1.551, 1.869, 2.413, 2.664, 1.793, 2.905, 2.372, 2.37, 2.39, 2.645, 2.36, 1.991, 2.152, 2.301, 1.567, 2.827, 3.74, 2.626, 1.927, 2.057, 1.983, 2.078, 2.554, 2.401, 2.332, 3.027, 2.397, 1.978, 2.417, 1.804, 2.307, 2.023, 2.012, 2.228, 2.973, 1.973, 2.75, 2.702, 2.66, 2.37, 1.88, 2.675, 1.831, 1.773, 2.967, 3.176, 3.534, 2.036, 2.841, 2.643, 3.438, 2.719, 2.136, 1.588, 2.567, 2.052, 2.752, 1.94, 3.065, 2.376, 2.275, 3.671, 1.879, 2.108, 1.682, 2.043, 2.327, 2.501, 3.541, 2.594, 3.265, 2.81, 2.639, 2.645, 2.004, 2.5, 2.184, 3.062, 1.857, 2.684, 2.93, 3.446, 2.446, 1.816, 3.414, 2.63, 1.776, 1.896, 2.724, 2.275, 3.156, 3.181, 1.914, 3.229, 1.871, 2.918, 2.918, 2.912, 1.918, 2.346, 1.904, 3.338, 3.725, 3.025, 2.321, 2.782, 2.217, 2.266, 2.642, 2.542, 2.338, 2.399, 2.211, 2.278, 2.917, 2.684, 2.735, 3.755, 2.488, 1.96, 2.273, 2.687, 2.421, 3.016, 2.897, 2.102, 3.037, 1.964, 2.151, 3.383, 2.669, 3.157, 2.379, 1.879, 2.034, 3.421, 2.025, 3.539, 2.739, 2.155, 2.465, 2.02, 2.737, 2.015, 2.079, 3.778, 2.705, 3.252, 2.692, 2.117, 2.364, 3.19, 2.201, 3.205, 2.1, 2.218, 2.75, 2.156, 2.282, 2.481, 2.26, 1.788, 1.779, 1.948, 2.542, 2.886, 2.162, 2.593, 2.423, 2.094, 1.854, 2.37, 2.133, 2.336, 2.356, 2.354, 2.258, 1.967, 2.621, 2.824, 2.359, 3.868, 1.694, 3.349, 2.379, 2.05, 3.651, 2.654, 2.897, 2.231, 3, 3.266, 2.197, 2.225, 2.571, 2.858, 2.553, 2.269, 2.501, 3.349, 2.211, 2.205, 2.453, 2.927, 2.444, 3.157, 2.921, 2.485, 1.726, 3.074, 2.494, 2.487, 2.209, 2.714, 2.526, 1.816, 2.751, 2.486, 2.67, 2.427, 2.016, 2.741, 2.435, 3.348, 2.694, 1.757, 2.472, 1.934, 3.14, 2.003, 2.108, 2.706, 2.927, 3.285, 3.476, 2.211, 3.063, 3.03, 3.591, 2.088, 3.651, 2.377, 3.093, 2.116, 3.029, 2.706, 2.84, 3.763, 3.02, 2.994, 2.976, 2.29, 3.042, 3.599, 2.751, 1.745, 3.032, 1.995, 2.105, 2.149, 2.472, 3.943, 2.862, 2.264, 1.844, 3.046, 2.502, 3.058, 2.539, 2.508, 2.437, 1.678, 2.388, 2.751, 1.836, 1.879, 2.66, 1.752, 2.868, 1.967, 2.494, 1.991, 3.274, 2.448, 2.786, 3.702, 2.069, 3.973, 1.909, 2.012, 1.909, 2.64, 2.532, 2.983, 2.38, 2.173, 2.386, 2.985, 1.991, 2.599, 2.673, 1.914, 1.635, 3.101, 2.07, 2.73, 2.834, 2.795, 2.448, 2.222, 2.784, 2.663, 2.388, 2.874, 2.519, 3.072, 3.248, 2.581, 2.101, 2.748, 2.708, 2.024, 2.716, 2.329, 2.603, 2.902, 3.117, 2.948, 2.743, 2.241, 3.068, 2.718, 2.058, 3.504, 2.545, 2.144, 2.647, 2.546, 2.517, 2.257, 3.34, 2.213, 2.479, 2.501, 2.209, 2.346, 2.445, 2.956, 2.166, 2.54, 3.1, 2.303, 2.937, 3.018, 3.368, 2.234, 2.255, 3.542, 2.845, 2.304, 3.758, 2.436, 2.79, 3.75, 3.035, 2.266, 2.299, 2.468, 3.1, 2.073, 3.099, 3.057, 3.698, 2.796, 1.947, 2.579, 2.746, 2.739, 2.239, 2.471, 2.316, 3.58, 3.304, 2.355, 1.882, 2.378, 2.087, 2.905, 2.324, 3.407, 3.057, 3.036, 2.329, 3.066, 2.037, 2.806, 2.077, 3.028, 2.513, 2.536, 2.002, 2.146, 2.944, 2.29, 2.158, 3.686, 3.307, 3.459, 2.377, 2.823, 2.45, 2.005, 2.665, 2.687, 2.379, 2.301, 3.301, 1.994, 2.477, 1.822, 2.8, 2.369, 3.916, 3.464, 2.035, 3.167, 2.098, 2.395, 3.283, 1.912, 2.162, 1.967, 3.907, 1.706, 2.503, 2.589, 3.379, 2.633, 2.699, 4.027, 2.254, 3.855, 2.383, 2.666, 2.852, 3.49, 2.63, 2.668, 2.758, 3.269, 2.696, 2.801, 3.001, 2.886, 2.146, 2.586, 2.477, 2.6, 2.951, 2.189, 2.637, 2.156, 3.196, 2.862, 2.564, 2.008, 1.823, 3.078, 2.27, 2.103, 3.129, 2.801, 2.735, 2.288, 3.309, 2.032, 4.167, 2.868, 2.697, 2.839, 2.136, 2.964, 3.449, 2.46, 2.871, 3.193, 2.471, 2.489, 2.273, 3.73, 2.927, 2.52, 2.985, 2.948, 3.976, 1.919, 2.512, 2.355, 2.968, 3.792, 3.535, 2.863, 3.466, 3.501, 2.695, 2.427, 2.684, 2.443, 2.817, 2.902, 3.841, 3.034, 3.156, 2.543, 1.877, 3.121, 2.66, 3.231, 2.412, 2.547, 2.019, 3.627, 2.101, 2.642, 3.247, 3.094, 3.323, 2.56, 2.77, 2.11, 3.379, 2.082, 2.264, 2.941, 2.814, 3.22, 3.527, 3.329, 3.393, 2.264, 2.376, 3.085, 2.383, 2.498, 3.659, 3.026, 3.26, 1.966, 3.36, 2.427, 2.236, 2.665, 4.019, 3.776, 3.38, 2.753, 2.836, 2.563, 2.992, 2.691, 2.437, 2.496, 2.735, 2.06, 2.439, 2.614, 2.635, 3.844, 2.284, 3, 2.837, 2.732, 2.646, 3.38, 1.859, 4.065, 1.791, 3.36, 2.09, 3.692, 2.918, 3.79, 2.302, 2.468, 2.497, 2.472, 4.213, 2.485, 2.943, 4.209, 3.165, 2.842, 2.187, 2.208, 3.647, 2.509, 2.952, 2.418, 2.292, 2.684, 3.293, 3.429, 2.2, 3.619, 2.657, 2.698, 2.466, 3.13, 2.311, 3.409, 2.432, 3.508, 2.709, 3.099, 2.437, 3.927, 2.933, 3.549, 3.669, 2.374, 2.751, 2.059, 2.951, 2.269, 2.972, 1.878, 3.258, 2.422, 3.234, 2.259, 2.688, 2.342, 2.458, 3.188, 3.157, 4.13, 2.229, 2.629, 2.846, 3.038, 2.555, 4.132, 3.344, 3.856, 2.247, 4.305, 1.947, 3.05, 2.149, 3.321, 3.183, 3.372, 2.891, 3.113, 2.094, 2.915, 3.958, 2.973, 3.044, 3.661, 2.651, 2.577, 2.911, 2.329, 2.35, 3.985, 2.477, 3.034, 4.123, 2.792, 3.338, 2.991, 3.797, 2.658, 2.241, 3.243, 2.494, 2.748, 3.478, 2.696, 3.247, 2.307, 2.295, 2.892, 2.466, 2.41, 2.741, 3.487, 2.632, 2.614, 3.427, 3.692, 2.526, 3.195, 2.972, 3.758, 3.632, 3.582, 2.729, 3.196, 4.244, 3.649, 2.484, 2.644, 2.175, 2.244, 3.564, 3.191, 3.597, 2.654, 2.943, 3.182, 3.397, 3.42, 2.507, 2.894, 2.516, 4.087, 2.224, 3.044, 3.302, 2.005, 2.562, 2.226, 2.305, 3.034, 2.589, 2.371, 3.143, 3.215, 2.614, 3.104, 3.624, 1.844, 4.241, 4.177, 3.314, 3.161, 2.221, 2.216, 3.47, 3.126, 3.265, 2.755, 2.626, 2.338, 3.17, 2.828, 3.662, 3.133, 4.174, 2.047, 2.765, 2.409, 3.478, 2.793, 2.17, 3.567, 2.144, 2.292, 3.387, 2.776, 3.277, 3.291, 2.339, 2.912, 3.806, 3.122, 2.884, 2.919, 3.095, 2.767, 3.165, 2.764, 2.475, 3.403, 3.623, 3.331, 3.324, 3.186, 3.325, 3.434, 1.966, 2.023, 4.099, 3.275, 2.786, 2.871, 2.692, 3.613, 2.88, 2.647, 3.52, 3.489, 2.661, 2.667, 3.975, 2.829, 4.319, 2.845, 2.2, 3.31, 2.157, 3.719, 3.378, 2.694, 3.949, 3.74, 3.994, 4.413, 4.487, 2.516, 2.546, 4.283, 4.114, 2.397, 3.227, 2.577, 3.603, 3.501, 2.091, 3.115, 3.05, 2.563, 2.475, 3.176, 3.186, 2.618, 2.643, 2.896, 3.198, 3.095, 2.322, 2.763, 2.442, 2.709, 3.329, 2.866, 3.758, 2.508, 3.582, 2.544, 2.664, 2.322, 3.32, 2.815, 2.504, 3.024, 3.733, 2.987, 2.274, 3.21, 2.198, 2.881, 2.125, 2.678, 2.109, 2.381, 2.793, 2.998, 2.404, 3.987, 3.431, 3.821, 2.366, 2.751, 2.075, 3.258, 2.76, 3.727, 3.742, 1.937, 2.866, 3.235, 4.524, 2.956, 3.019, 2.947, 3.226, 3.315, 2.489, 2.294, 1.984, 3.769, 2.53, 2.663, 2.608, 3.071, 3.28, 3.136, 2.567, 2.962, 2.645, 4.076, 2.962, 3.02, 3.012, 2.933, 2.888, 3.115, 3.02, 2.459, 4.035, 3.199, 2.367, 3.198, 2.628, 4.219, 3.231, 2.913, 3.092, 2.718, 4.077, 2.974, 2.67, 3.366, 2.778, 2.262, 2.807, 3.333, 3.633, 2.528, 3.794, 3.252, 4.368, 2.832, 2.726, 3.93, 3.451, 3.624, 2.919, 2.719, 2.454, 2.96, 3.034, 4.525, 2.996, 3.049, 2.77, 2.443, 3.546, 2.555, 2.732, 3.073, 3.214, 4.611, 2.919, 3.793, 3.502, 2.918, 3.897, 4.139, 3.335, 2.639, 3.231, 3.145, 2.761, 2.265, 2.683, 2.376, 3.788, 2.544, 2.672, 2.409, 4.309, 3.847, 3.227, 2.568, 2.649, 3.229, 3.525, 4.245, 4.353, 2.795, 2.228, 2.694, 2.74, 3.615, 1.979, 2.44, 3.045, 2.328, 4.582, 2.976, 3.356, 3.386, 2.785, 3.937, 3.285, 2.883, 2.06, 2.198, 2.856, 2.584, 2.566, 2.724, 3.536, 2.903, 3.126, 3.253, 3.765, 2.721, 3.813, 3.523, 3.168, 3.565, 3.353, 3.688, 2.518, 2.765, 2.561, 3.727, 2.958, 3.226, 4.226, 3.02, 2.545, 2.373, 2.669, 4.02, 4.56, 2.605, 2.855, 4.084, 4.353, 2.784, 2.507, 2.283, 4.37, 2.45, 2.906, 3.282, 3.811, 2.668, 2.297, 3.979, 3.362, 3.911, 3.232, 2.638, 2.772, 3.397, 3.986, 4.062, 3.043, 2.671, 3.613, 2.36, 3.37, 2.767, 2.601, 2.241, 3.847, 2.797, 2.909, 3.275, 2.967, 3.31, 2.602, 3.02, 2.77, 4.001, 3.167, 2.602, 3.543, 2.976, 2.22, 4.405, 2.631, 2.734, 4.041, 2.93, 3.818, 3.604, 3.363, 2.981, 2.345, 2.879, 3.162, 2.918, 2.93, 2.924, 3.608, 2.985, 2.914, 3.438, 3.134, 2.525, 2.917, 3.656, 2.679, 3.239, 2.353, 2.759, 2.884, 2.35, 3.202, 2.508, 2.843, 2.723, 2.26, 2.979, 4.241, 3.5, 2.622, 2.793, 3.053, 3.469, 3.624, 3.323, 2.995, 3.874, 3.885, 3.002, 3.815, 2.917, 2.593, 2.66, 3.023, 3.642, 2.586, 3.816, 2.615, 3.189, 3.553, 2.582, 3.581, 4.108, 3.35, 4.591, 3.344, 2.502, 4.525, 4.325, 2.753, 3.176, 2.753, 3.443, 2.357, 3.082, 3.317, 2.138, 2.736, 4.223, 2.169, 2.815, 3.38, 3.187, 4.039, 2.654, 4.371, 3.682, 2.99, 3.787, 2.575, 3.618, 2.77, 3.751, 3.534, 3.235, 4.244, 2.681, 4.456, 2.966, 3.111, 3.602, 3.144, 2.881, 2.558, 2.748, 2.593, 2.99, 2.59, 3.538, 2.135, 2.852, 3.08, 2.902, 3.117, 2.906, 2.698, 2.239, 2.372, 3.295, 2.663, 4.29, 2.91, 3.36, 4.167, 3.537, 4.027, 2.708, 3.317, 3.757, 3.191, 2.499, 3.168, 2.981, 4.506, 3.06, 3.943, 3.5, 3.824, 2.758, 4.529, 3.892, 3.679, 4.273, 2.701, 3.989, 2.98, 3.347, 3.644, 4.609, 2.43, 4.256, 4.777, 4.717, 3.022, 4.471, 2.731, 4.322, 3.078, 3.673, 4.06, 2.559, 3.184, 2.669, 2.888, 3.872, 2.64, 2.757, 2.569, 2.498, 2.865, 3.024, 2.346, 2.824, 3.893, 3.301, 2.728, 3.722, 3.595, 2.963, 2.924, 3.494, 3.29, 3.359, 4.564, 2.887, 3.309, 2.557, 4.182, 3.234, 3.154, 4.533, 2.724, 4.664, 3.738, 3.341, 4.265, 2.582, 3.738, 3.5, 3.632, 3.199, 2.634, 4.571, 3.818, 4.479, 4.195, 3.235, 4.521, 3.229, 2.638, 3.196, 3.093, 3.637, 3.95, 3.737, 2.513, 2.594, 3.527, 2.892, 2.854, 4.004, 3.872, 3.657, 2.543, 2.839, 2.91, 4.341, 2.907, 3.963, 2.207, 2.545, 3.161, 4.189, 3.443, 3.593, 4.26, 4.137, 3.356, 4.114, 2.416, 3.107, 3.98, 2.955, 2.283, 2.875, 3.753, 4.16, 3.555, 3.338, 2.569, 3.649, 3.892, 3.304, 2.502, 3.473, 3.612, 3.19, 2.574, 3.835, 3.977, 2.901, 3.58, 2.791, 2.78, 2.695, 3.384, 2.401, 2.666, 4.469, 3.057, 4.474, 2.719, 2.714, 3.201, 3.949, 4.546, 4.23, 3.459, 3.101, 3.58, 3.392, 3.516, 3.07, 3.043, 4.166, 4.602, 3.53, 2.766, 4.624, 2.384, 3.335, 2.831, 3.953, 4.119, 2.654, 3.171, 2.875, 3.522, 4.397, 2.517, 3.087, 3.064, 3.188, 3.607, 3.983, 3.216, 3.257, 3.086, 4.212, 3.415, 2.336, 2.878, 3.214, 4.438, 3.183, 3.937, 2.405, 2.746, 3.449, 3.367, 4.366, 2.607, 3.69, 3.766, 3.552, 3.122, 2.548, 3.459, 4.728, 3.288, 4.248, 2.823, 4.428, 3.791, 3.546, 3.054, 4.466, 3.556, 2.899, 2.616, 2.799, 3.107, 4.788, 4.802, 3.503, 2.884, 2.826, 3.923, 4.582, 3.038, 3.79, 4.838, 3.175, 3.756, 3.39, 4.845, 3.18, 3.805, 3.213, 3.18, 3.803, 4.455, 3.099, 3.908, 3.167, 4.233, 4.866, 3.371, 4.5, 2.822, 3.318, 3.439, 4.042, 3.283, 2.678, 4.778, 3.592, 2.986, 4.559, 3.738, 3.937, 3.546, 4.527, 4.318, 3.583, 3.002, 3.5, 3.245, 4.445, 3.163, 4.804, 4.108, 3.95, 3.015, 3.161, 4.166, 3.238, 2.907, 4.595, 3.165, 3.827, 2.449, 2.878, 4.82, 2.908, 4.098, 4.428, 3.223, 3.918, 4.222, 4.052, 4.11, 3.065, 4.565, 3.975, 4.666, 4.038, 3.867, 2.772, 3.015, 4.786, 2.581, 3.245, 4.382, 3.874, 3.991, 3.82, 2.5, 2.67, 3.683, 3.733, 4.849, 3.14, 4.416, 3.889, 2.558, 2.703, 3.752, 2.791, 3.877, 3.188, 4.185, 3.962, 2.5, 3.069, 3.159, 4.703, 3.982, 3.543, 3.243, 2.907, 3.046, 3.07, 4.002, 3.666, 4.738, 2.521, 3.749, 3.778, 3.364, 5.151, 3.813, 2.557, 4.48, 2.606, 3.139, 5.036, 4.526, 3.022, 3.769, 3.82, 4.963, 3.451, 4.614, 3.511, 4.555, 3.17, 3.913, 4.024, 3.124, 5.006, 2.864, 3.269, 2.553, 2.773, 4.602, 3.627, 3.873, 3.805, 4.077, 4.143, 4.457, 5.006, 2.949, 4.172, 3.569, 5.306, 2.963, 3.446, 4.692, 3.871, 3.183, 5.031, 3.187, 4.262, 4.024, 3.817, 3.774, 4.049, 3.612, 3.826, 3.657, 3.432, 4.591, 3.9, 4.618, 4.348, 2.869, 4.461, 3.274, 3.69, 3.814, 2.902, 3.933, 3.667, 4.515, 3.726, 4.19, 5.012, 3.227, 3.554, 3.57, 3.656, 3.243, 4.604, 3.357, 5.25, 3.811, 3.348, 4.173, 3.589, 5.341, 3.455, 3.073, 4.41, 3.478, 3.691, 4.311, 3.237, 3.187, 3.812, 4.43, 3.554, 3.41, 4.989, 3.339, 4.412, 3.491, 5.265, 3.701, 4.095, 3.931, 3.323, 3.154, 3.294, 3.232, 3.344, 3.653, 4.506, 4.554, 3.829, 4.547, 5.095, 4.11, 3.951, 2.885, 4.415, 3.414, 4.3, 3.9, 5.437, 4.088, 3.381, 4.341, 2.983, 3.865, 4.716, 3.163, 3.405, 4.078, 4.364, 4.42, 3.904, 3.332, 4.119, 4.455, 3.803, 3.847, 3.93, 4.368, 3.952, 4.713, 3.989, 3.849, 4.157, 4.526, 3.35, 3.432, 3.86, 3.889, 4.16, 2.907, 4.237, 5.035, 3.38, 3.244, 3.427, 4.452, 4.071, 3.42, 3.516, 4.694, 2.961, 4.408, 3.175, 3.995, 4.263, 4.514, 5.353, 3.633, 3.495, 4.265, 5.45, 4.412, 3.537, 5.244, 5.116, 3.513, 5.497, 4.66, 3.266, 4.281, 4.473, 3.656, 3.16, 3.867, 4.023, 3.603, 4.224, 3.524, 2.915, 2.957, 4.639, 4.624, 3.461, 2.945, 3.164, 3.549, 3.556, 5.239, 4.182, 4.563, 4.724, 3.714, 4.385, 4.572, 4.069, 3.473, 3.793, 3.413, 4.152, 4.942, 3.526, 4.504, 3.19, 4.171, 3.243, 4.249, 4.776, 3.553, 3.309, 3.605, 4.447, 5.14, 4.081, 5.221, 3.808, 4.532, 3.475, 5.311, 5.084, 5.088, 3.953, 5.088, 4.151, 4.329, 3.622, 3.591, 5.041, 4.576, 3.649, 5.209, 3.601, 5.339, 4.153, 4.223, 3.45, 3.327, 5.185, 4.691, 3.513, 4.451, 5.235, 3.993, 3.562, 4.166, 3.191, 4.485, 3.617, 4.81, 5.013, 4.018, 3.286, 4.744, 4.203, 3.178, 3.234, 4.204, 3.76, 3.848, 4.855, 4.842, 4.756, 4.998, 3.397, 5.613, 4.679, 3.851, 4.659, 3.382, 4.732, 3.938, 3.555, 4.976, 3.522, 3.383, 4.86, 4.429, 4.981, 5.332, 5.373, 3.713, 3.361, 3.78, 4.615, 4.279, 3.688, 4.132, 3.924, 4.894, 4.63, 4.023, 5.299, 4.817, 5.345, 4.036, 4.759, 4.618, 4.73, 3.707, 4.117, 5.33, 4.859, 3.543, 4.815, 5.529, 4.874, 4.001, 4.685, 5.229, 4.35, 4.7, 4.437, 4.488, 4.075, 3.788, 4.199, 5.251, 4.661, 4.556, 5.123, 5.372, 3.987, 4.578, 4.388, 5.316, 4.624, 3.939, 5.38, 4.348, 5.082, 5.028, 4.355, 3.942, 4.409, 4.978, 4.908, 4.085, 5.356, 4.808, 4.764, 4.306, 5.142, 4.86"
            },
            {
              "Key": "NumRealisations",
              "Value": "1000"
            },
            {
              "Key": "MeanLoadToGenerate",
              "Value": "0"
            },
            {
              "Key": "AmountAddMeanLoad",
              "Value": "2.5"
            },
            {
              "Key": "VectorOfMeans",
              "Value": "1.1567018157972, 0.400851532821705"
            },
            {
              "Key": "CovarianceMatrix",
              "Value": "0.047123025480434, 0.033361752139528, 0.033361752139528, 0.033598852595467"
            },
            {
              "Key": "SlopeVolWithLoad",
              "Value": "0.119"
            },
            {
              "Key": "DaysPerGrazeWhenDry",
              "Value": "3"
            },
            {
              "Key": "CowBodyWeight",
              "Value": "450"
            },
            {
              "Key": "CowDateCalving",
              "Value": "1-aug"
            },
            {
              "Key": "CowDateInCalf",
              "Value": "1-nov"
            },
            {
              "Key": "CowDateDryOff",
              "Value": "10-may"
            },
            {
              "Key": "LactationCurveParam",
              "Value": "20, 0.2, -0.04, 0.092"
            },
            {
              "Key": "UrineDepthPenetration",
              "Value": "0"
            },
            {
              "Key": "UrineReturnType",
              "Value": "FromHarvest"
            },
            {
              "Key": "UrineReturnPattern",
              "Value": "Random"
            },
            {
              "Key": "StockingRate",
              "Value": "2.25"
            },
            {
              "Key": "Num1HaPaddocks",
              "Value": "25"
            },
            {
              "Key": "SilageNConc",
              "Value": "2.75"
            },
            {
              "Key": "SilageMEConc",
              "Value": "11"
            },
            {
              "Key": "UrinationsPerHead",
              "Value": "11"
            },
            {
              "Key": "patchMargin",
              "Value": "0.1"
            },
            {
              "Key": "AdjustVolme",
              "Value": "False"
            }
          ],
          "Name": "SimpleCow",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.AgPasture.SimpleGrazing, Models",
          "GrazingRotationType": 1,
          "SimpleGrazingFrequencyString": "0",
          "SimpleMinGrazable": 0.0,
          "SimpleGrazingResidual": 1000.0,
          "PreGrazeDMArray": [
            2800.0,
            2800.0,
            2800.0,
            2800.0,
            2800.0,
            2800.0,
            2800.0,
            2800.0,
            2800.0,
            2800.0,
            2800.0,
            2800.0
          ],
          "PostGrazeDMArray": [
            1500.0,
            1500.0,
            1500.0,
            1500.0,
            1250.0,
            1250.0,
            1250.0,
            1250.0,
            1500.0,
            1500.0,
            1500.0,
            1500.0
          ],
          "FlexibleExpressionForTimingOfGrazing": null,
          "FlexibleGrazePostDM": 0.0,
          "MaximumRotationLengthArray": [
            50.0,
            50.0,
            50.0,
            50.0,
            60.0,
            60.0,
            90.0,
            70.0,
            50.0,
            50.0,
            50.0,
            50.0
          ],
          "MinimumRotationLengthArray": [
            1.0,
            1.0,
            1.0,
            1.0,
            3.0,
            3.0,
            3.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
          ],
          "NoGrazingStartString": null,
          "NoGrazingEndString": null,
          "FractionDefoliatedBiomassToSoil": [
            1.0
          ],
          "FractionDefoliatedNToSoil": [
            0.75
          ],
          "FractionExcretedNToDung": [
            0.4
          ],
          "CNRatioDung": 0.0,
          "DepthUrineIsAdded": 250.0,
          "SendDungElsewhere": 0.0,
          "SendUrineElsewhere": 0.0,
          "FractionPopulationDecline": 0.0,
          "TramplingOn": false,
          "MaximumPropLitterMovedToSoil": 0.1,
          "PastureConsumedAtMaximumRateOfLitterRemoval": 1200.0,
          "SpeciesCutProportions": null,
          "Name": "SimpleGrazing",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Newtonsoft.Json;",
            "using Models.Soils.Nutrients;",
            "using Models.Soils.NutrientPatching;",
            "using Models.Interfaces;",
            "using System.Diagnostics;",
            "using System.Collections.Generic;",
            "using APSIM.Shared.Utilities;",
            "using Models.Surface;",
            "using Models.Soils;",
            "using System.Xml.Serialization;",
            "using Models.AgPasture;",
            "using Models.Zones;",
            "using Models.PMF;",
            "using Models.Core;",
            "using Models.Core.ApsimFile;",
            "using System;",
            "using System.Linq;",
            "using Models.Climate;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class Script : Model",
            "    {",
            "        [Link] private ISummary summary;",
            "        [Link] private List<NutrientPatchManager> patchManagers;",
            "",
            "        [Description(\"Should this simulation create Patches? If not then explict Zones will be created\")]",
            "        public bool PseudoPatches { get; set; }",
            "        ",
            "        [Description(\"How many patches or zones should be created?\")]",
            "        public int ZoneCount { get; set; }",
            "        ",
            "",
            "        public override void OnPreLink()",
            "        {",
            "            var simulation = Parent.Parent as Simulation;",
            "            var zone = simulation.FindChild<Zone>();",
            "                ",
            "            // Set the maximum N uptake for all species",
            "            foreach (var species in zone.FindAllDescendants<PastureSpecies>())",
            "            {",
            "                var root = species.FindChild<PastureBelowGroundOrgan>();",
            "                root.MaximumNUptake = 3.0;",
            "            }",
            "                ",
            "            if (!PseudoPatches)",
            "            {",
            "                zone.Area = 1.0 / ZoneCount;  // and then this will apply to all the new zones  ",
            "                for (int i = 0; i < ZoneCount-1; i++)",
            "                {",
            "                    var newZone = Apsim.Clone(zone);",
            "                    Structure.Add(newZone, simulation);",
            "                }",
            "             }",
            "        }",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")] ",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            if (!PseudoPatches)",
            "                summary.WriteMessage(this, \"Created \" + ZoneCount + \" identical zones, each of area \" + (1.0 / ZoneCount) + \" ha\", MessageType.Diagnostic);",
            "",
            "              summary.WriteMessage(this, \"Initialising the ZoneManager for grazing, urine return and reporting\", MessageType.Diagnostic);",
            "            ",
            "            if (PseudoPatches)",
            "            {",
            "                foreach (var patchManager in patchManagers)",
            "                {",
            "                    //patchManager.MaximumNitrogenAvailableToPlants = 0.45; This is now set in pre start",
            "                    patchManager.NPartitionApproach = PartitionApproachEnum.BasedOnConcentrationAndDelta;",
            "                    patchManager.AutoAmalgamationApproach = AutoAmalgamationApproachEnum.None;",
            "                    patchManager.basePatchApproach = BaseApproachEnum.IDBased;",
            "                    patchManager.AllowPatchAmalgamationByAge = false;",
            "                    patchManager.PatchAgeForForcedMerge = 1000000.0;  // ie don't merge                                ",
            "                }",
            "",
            "                int[] PatchToAddTo = new int[1];  //need an array variable for this",
            "                string[] PatchNmToAddTo = new string[1];  ",
            "                int nPatchesAdded = 0;",
            "                double NewArea = 1.0 / ZoneCount;",
            "                ",
            "                while (nPatchesAdded < ZoneCount - 1)",
            "                {",
            "                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();",
            "                    NewPatch.DepositionType = DepositionTypeEnum.ToNewPatch;",
            "                    NewPatch.AreaFraction = NewArea;",
            "                    PatchToAddTo[0] = 0;",
            "                    PatchNmToAddTo[0] = \"0\";",
            "                    NewPatch.AffectedPatches_id = PatchToAddTo;",
            "                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;",
            "                    NewPatch.SuppressMessages = false;",
            "",
            "                    foreach (var patchManager in patchManagers)",
            "                        patchManager.Add(NewPatch);",
            "                    nPatchesAdded += 1;",
            "                }                ",
            "",
            "                  summary.WriteMessage(this, patchManagers[0].NumPatches.ToString() + \" pseudopatches have been created\", MessageType.Diagnostic); ",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "PseudoPatches",
              "Value": "False"
            },
            {
              "Key": "ZoneCount",
              "Value": "10"
            }
          ],
          "Name": "PatchZoneManagerForSimpleCow",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using System;",
            "using Models.Core;",
            "using Models.Interfaces;",
            "using Models.Soils;",
            "using Models.Soils.Nutrients;",
            "using Models.WaterModel;",
            "using Models.AgPasture;",
            "using System.Linq;",
            "using System.Diagnostics;",
            "using APSIM.Shared.Utilities;",
            "using Models.Soils.Nutrients;",
            "using Models.Surface;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class ReportingWithPatchesScript : Model",
            "    {",
            "        [Link] private Simulation simulation;",
            "        [Link] private Clock clock;",
            "        [Link] private SimpleCowScript simpleCow;",
            "        [Link] private SimpleGrazing simpleGrazing;",
            "        [Link(ByName=true)] private ISolute urea;",
            "        [Link(ByName=true)] private ISolute no3;",
            "        [Link(ByName=true)] private ISolute nh4;",
            "        private double iniOrgC;",
            "        private double iniOrgN;",
            "        [Link]",
            "        private Nutrient Nutrient;",
            "        [Link(Path=\"[SurfaceOrganicMatter].SurfaceResidue.Decomposition\")]",
            "        private OrganicFlow ResidueDecomposition;",
            "",
            "",
            "        // --------------- Privates ---------------------------------",
            "",
            "       [NonSerialized] private CNPatchVariableType myPatchNO3 = new CNPatchVariableType();",
            "       [NonSerialized] private CNPatchVariableType myPatchNH4 = new CNPatchVariableType();",
            "        private bool ReportToday = false;",
            "",
            "        // --------------- Enumerated types ---------------------------------",
            "",
            "        public enum ReportingFrequencyEnum",
            "        {",
            "            Daily,",
            "            TenDaily,",
            "            Monthly,",
            "            Annual,",
            "            OnGrazing",
            "        }",
            "",
            "        // --------------- Parameters ---------------------------------",
            "",
            "        [Description(\"Verbose output?\")]",
            "        public bool Verbose { get; set; }",
            "",
            "        [Description(\"Name of output component for reporting\")]",
            "        [Display(Type = DisplayType.Model, ModelType=typeof(Report))]",
            "        public Report OutputModule { get; set; }",
            "",
            "        [Description(\"Frequency of reporting\")]",
            "        public ReportingFrequencyEnum ReportingFreq { get; set; }",
            "",
            "        [Description(\"Location for reporting\")]",
            "        public string Site { get; set; }",
            "",
            "        [Description(\"Soil name for reporting\")]",
            "        public string SoilName { get; set; }",
            "",
            "        [Description(\"Low (2800) or high (3500) pasture biomasses for grazing\")]",
            "        public string Regrowth { get; set; }",
            "",
            "        [Description(\"To make analysing the output easier\")]",
            "        public string Sorter { get; set; }",
            "",
            "        [Description(\"For outputing\")]",
            "        public string LocSoilFert { get; set; }",
            "",
            "        // --------------- Outputs ---------------------------------",
            "",
            "        public int DaysSinceReport { get; set; }",
            "        public double NHA { get; set; }",
            "        public double PGR { get; set; }",
            "        public double HerbageGrazed { get; set; }",
            "        public double HerbageGrazedN { get; set; }",
            "        public double HerbageGrazedMEConc { get; set; }",
            "        public double UreaReturned { get; set; }",
            "        public double Fixation { get; set; }",
            "        public double LeachN { get; set; }",
            "        public double Denit { get; set; }",
            "        public double DenitN2O { get; set; }",
            "        public double OrgC { get; set; }",
            "        public double OrgN { get; set; }",
            "        public double dltOrgC { get; set; }",
            "        public double dltOrgN { get; set; }",
            "        public double MinN { get; set; }",
            "        public double UreaN { get; set; }",
            "        public double NH4N { get; set; }",
            "        public double NO3N { get; set; }",
            "        public double UreaAddedInGrazing { get; set; }",
            "        [Units(\"mm\")] public double Drainage600 { get; set; }",
            "        public double NetSilageImported { get; set; }",
            "        public double SumSilageMade { get; set; }",
            "        public double SumSilageFed { get; set; }",
            "        public double UrinePatchLoad { get; set; }",
            "        public int Events { get; set; }",
            "        public string SiteSoil { get; set; }",
            "        public double AboveGroundDM { get; set; }",
            "        public int PatchCount { get; set; }",
            "        public int z600 { get; set; }",
            "        public int z300 { get; set; }",
            "   ",
            "      ",
            "        /// <summary>Invoked when simulation starts.</summary>",
            "        /// <param name=\"sender\">The sender of the event.</param>",
            "        /// <param name=\"e\">The event arguments.</param>",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            //Debugger.Break();",
            "              if (Verbose)",
            "                 Console.WriteLine(\"Initialising the Manager for grazing, urine return and reporting\");",
            "      ",
            "            DaysSinceReport = 0;",
            "",
            "            SiteSoil = Site + SoilName;",
            "            Events = 1;",
            "",
            "            if (Verbose)",
            "                Console.WriteLine(\"Finished initialising the Manager for grazing, urine return and reporting\");",
            "        }",
            "",
            "",
            "        // <summary>Invoked by clock to let us do some calculations.</summary>",
            "        [EventSubscribe(\"DoManagementCalculations\")]",
            "        private void OnDoManagementCalculations(object sender, EventArgs e)",
            "        {",
            "            if (Verbose)",
            "                 Console.WriteLine(\"In Prepare for the Reporting Manager on \" + clock.Today);",
            "",
            "            // if this is the start of the simulation then sort out the depth for the urine placement, can't do this in initialisation because of the module order",
            "            if (clock.Today == clock.StartDate)",
            "            {",
            "                iniOrgC = 0.0; ",
            "                iniOrgN = 0.0;",
            "                z300 = 0;",
            "                z600 = 0;",
            "",
            "                foreach (Zone paddock in simulation.FindAllChildren<Zone>())",
            "                {",
            "                    var soilNitrogen = paddock.FindInScope<Nutrient>();",
            "                    var soilWater = paddock.FindInScope<WaterBalance>();",
            "",
            "                    double tempDepth = 0.0;",
            "",
            "                    for (int ii = 0; ii < soilWater.Thickness.Length; ii++)",
            "                    {",
            "                       iniOrgC += Nutrient.TotalC[ii]; ",
            "                       iniOrgN += Nutrient.TotalN[ii];",
            "                       tempDepth += soilWater.Thickness[ii];",
            "                       if (tempDepth <= 300)",
            "                          z300 = ii;",
            "                       if (tempDepth <= 600)",
            "                          z600 = ii;",
            "                    }",
            "                }",
            "        }",
            "",
            "",
            "        if (Verbose)",
            "            Console.WriteLine(\"Finished Prepare for the Reporting Manager on \" + clock.Today);",
            "        }",
            "",
            "",
            "        // <summary>Invoked by clock to let us do report calculations.</summary>",
            "        [EventSubscribe(\"DoReportCalculations\")]",
            "        private void OnDoReportCalculations(object sender, EventArgs e)",
            "        {",
            "            if (Verbose)",
            "                 Console.WriteLine(\"In Post for the Reporting Manager on \" + clock.Today);",
            "",
            "            // should reporting be done today?  ",
            "            if (ReportingFreq == ReportingFrequencyEnum.Daily)",
            "                ReportToday = true;",
            "            else if ((ReportingFreq == ReportingFrequencyEnum.TenDaily) && ((clock.Today.Day == 10) || (clock.Today.Day == 20) || (DateUtilities.IsEndOfMonth(clock.Today))))",
            "                ReportToday = true;",
            "            else if ((ReportingFreq == ReportingFrequencyEnum.Monthly) && (DateUtilities.IsEndOfMonth(clock.Today)))",
            "                ReportToday = true;",
            "            else if ((ReportingFreq == ReportingFrequencyEnum.Annual) && (DateUtilities.IsEndOfYear(clock.Today)))",
            "                ReportToday = true;",
            "            else if ((ReportingFreq == ReportingFrequencyEnum.OnGrazing) && (simpleGrazing.GrazedToday))",
            "                ReportToday = true;",
            "            else",
            "                ReportToday = false;",
            "",
            "            DaysSinceReport += 1;",
            "",
            "            // each day gather data for the accumulations",
            "            foreach (Zone paddock in simulation.FindAllChildren<Zone>())",
            "            {",
            "                var sward = paddock.FindAllInScope<PastureSpecies>();",
            "                var soilWater = paddock.FindInScope<WaterBalance>();",
            "                var nutrient = paddock.FindInScope<Nutrient>();",
            "                var denitrificationModel = nutrient.FindInScope<NFlow>();",
            "",
            "                AboveGroundDM = sward.Sum(species => species.AboveGroundWt);",
            "                NHA += sward.Sum(species => species.HerbageGrowthWt);",
            "                PGR = NHA;  // divide this by the number of days just before reporting",
            "                Fixation += sward.Sum(species => species.FixedN);",
            "",
            "                double[] tempArray = soilWater.FlowNO3;",
            "                LeachN += tempArray[soilWater.Thickness.Length - 1];  // only take the deepest element",
            "",
            "                tempArray = soilWater.Flux;      ",
            "                Drainage600 += tempArray[z600];  //mmm",
            "",
            "                for (int ii = 0; ii <= z300; ii++)",
            "                {",
            "                    Denit += denitrificationModel.Value[ii];",
            "                    DenitN2O += nutrient.N2Oatm[ii];",
            "                }",
            "            }  ",
            "",
            "            // Things that come from other Managers or modules at the current level",
            "            HerbageGrazed += simpleGrazing.GrazedDM;",
            "            HerbageGrazedN += simpleGrazing.GrazedN;",
            "            UreaReturned += simpleCow.UrineNReturned;",
            "            if ((simpleCow.NumPatchesForUrine * simpleCow.NumPatches) > 0)",
            "                UrinePatchLoad = UreaReturned / (double)simpleCow.NumPatchesForUrine / (double)simpleCow.NumPatches;",
            "            else",
            "                UrinePatchLoad = 0.0;",
            "",
            "            SumSilageMade += simpleCow.SilageMade;",
            "            SumSilageFed += simpleCow.SilageFed;",
            "            NetSilageImported = SumSilageFed - SumSilageMade;",
            "",
            "            if (ReportToday)",
            "            {",
            "                OrgC = 0.0;",
            "                OrgN = 0.0;",
            "                UreaN = 0.0;",
            "                NH4N = 0.0;",
            "                NO3N = 0.0;",
            "                MinN = 0.0;",
            "",
            "                foreach (Zone paddock in simulation.FindAllChildren<Zone>())",
            "                {",
            "                    var sward = paddock.FindAllInScope<PastureSpecies>();",
            "                    var soilWater = paddock.FindInScope<WaterBalance>();",
            "                    var soilNitrogen = paddock.FindInScope<Nutrient>();",
            "",
            "                    for (int ii = 0; ii <= (soilWater.Thickness.Length - 1); ii++)",
            "                    {",
            "                       OrgC += Nutrient.TotalC[ii]; ",
            "                       OrgN += Nutrient.TotalN[ii];",
            "                       UreaN += urea.kgha[ii];",
            "                       NH4N += nh4.ppm[ii];",
            "                       NO3N += no3.ppm[ii];",
            "                       MinN = UreaN + NH4N + NO3N;",
            "                    }",
            "                    dltOrgC = OrgC - iniOrgC; ",
            "                    dltOrgN = OrgN - iniOrgN;",
            "                    iniOrgC = OrgC; // ready for the next calculation of change in pools",
            "                    iniOrgN = OrgN;",
            "                }",
            "",
            "                PGR = NHA / DaysSinceReport;  ",
            "",
            "                // do the patch outputs here",
            "                OutputModule.DoOutput();",
            "",
            "                // now zero the reported variables",
            "                DaysSinceReport = 0;",
            "                HerbageGrazed = 0.0;",
            "                HerbageGrazedN = 0.0;",
            "                DaysSinceReport = 0;",
            "                NHA = 0;",
            "                PGR = 0;",
            "                UreaReturned = 0;",
            "                Fixation = 0;",
            "                LeachN = 0;",
            "                Denit = 0;",
            "                DenitN2O = 0;",
            "                OrgC = 0;",
            "                OrgN = 0;",
            "                MinN = 0;",
            "                UreaN = 0;",
            "                NH4N = 0;",
            "                NO3N = 0;",
            "                Drainage600 = 0.0;",
            "                NetSilageImported = 0.0;",
            "                SumSilageMade = 0.0;",
            "                SumSilageFed = 0.0;",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Verbose",
              "Value": "False"
            },
            {
              "Key": "OutputModule",
              "Value": "[WholePaddock]"
            },
            {
              "Key": "ReportingFreq",
              "Value": "Daily"
            },
            {
              "Key": "Site",
              "Value": "Ruakura"
            },
            {
              "Key": "SoilName",
              "Value": "HE"
            },
            {
              "Key": "Regrowth",
              "Value": "1low"
            },
            {
              "Key": "Sorter",
              "Value": "S0"
            },
            {
              "Key": "LocSoilFert",
              "Value": "RuaHE100"
            }
          ],
          "Name": "ReportingWithPatches",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today",
            "[SimpleCow].SimpleCowScript.NumPatches",
            "[ReportingWithPatches].ReportingWithPatchesScript.LocSoilFert as LocSoil",
            "[SimpleCow].SimpleCowScript.UrinationsPerHead",
            "//[SimpleCow].SimpleCowScript.ForageType",
            "[SimpleCow].SimpleCowScript.patchMargin",
            "[SimpleCow].SimpleCowScript.StockingRate",
            "//[SimpleCow].SimpleCowScript.GeneralFertAmt",
            "[SimpleGrazing].GrazingInterval",
            "[SimpleGrazing].PreGrazeDM as PreGrazeDM",
            "[SimpleGrazing].PostGrazeDM",
            "[SimpleCow].SimpleCowScript.HerdMEDemand",
            "[SimpleCow].SimpleCowScript.LoadAdjustmentPropOverall as LoadAdjustment",
            "[SimpleCow].SimpleCowScript.AverageUrineDepth",
            "[ReportingWithPatches].ReportingWithPatchesScript.Events",
            "[ReportingWithPatches].ReportingWithPatchesScript.UreaReturned as UrineNReturned",
            "[SimpleCow].SimpleCowScript.NumPatchesForUrine as GridsUsed",
            "[ReportingWithPatches].ReportingWithPatchesScript.UrinePatchLoad",
            "[SimpleGrazing].GrazedDM",
            "[SimpleGrazing].GrazedN",
            "[ReportingWithPatches].ReportingWithPatchesScript.LeachN",
            "[ReportingWithPatches].ReportingWithPatchesScript.Denit",
            "[ReportingWithPatches].ReportingWithPatchesScript.DenitN2O",
            "[ReportingWithPatches].ReportingWithPatchesScript.Fixation",
            "[ReportingWithPatches].ReportingWithPatchesScript.MinN",
            "[ReportingWithPatches].ReportingWithPatchesScript.dltOrgN",
            "[ReportingWithPatches].ReportingWithPatchesScript.Drainage600",
            "[SimpleCow].SimpleCowScript.CowDMIntake",
            "[ReportingWithPatches].ReportingWithPatchesScript.NHA",
            "[ReportingWithPatches].ReportingWithPatchesScript.PGR",
            "[ReportingWithPatches].ReportingWithPatchesScript.NetSilageImported",
            "[ReportingWithPatches].ReportingWithPatchesScript.SumSilageMade as SilageMade",
            "[ReportingWithPatches].ReportingWithPatchesScript.SumSilageFed as SilageFed",
            "[SimpleCow].SimpleCowScript.StockingDensity",
            "[SimpleCow].SimpleCowScript.CowState",
            "//[SimpleCow].SimpleCowScript.ListOfPatches"
          ],
          "EventNames": [
            ""
          ],
          "GroupByVariableName": null,
          "Name": "WholePaddock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Paddock",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Newtonsoft.Json;",
                "using APSIM.Shared.Utilities;",
                "using System.Xml.Serialization;",
                "using Models.Soils;",
                "using Models.PMF;",
                "using Models.Core;",
                "using System;",
                "using Models.Interfaces;",
                "",
                "",
                "",
                "        ",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                "    public class Script : Model",
                "    {",
                "        [Link] private ISummary summary;",
                "        [Link] private Irrigation Irrigation;",
                "        [Link] private Clock Clock;",
                "        [Link] private Soil Soil;",
                "        [Link(IsOptional = true)] private IPlant existingCrop;",
                "        private DateTime StartDate;",
                "        private DateTime EndDate;",
                "        private double TopDUL;",
                "        private double TopLL;",
                "        private int nLayers;",
                "        [Link]",
                "        private IPhysical soilPhysical;",
                "        [Link]",
                "        private ISoilWater waterBalance;",
                "        //Communication to other modules",
                "       ",
                "        //User inputs from properties tab",
                "        [Description(\"Turn irrigation on?\")]",
                "        public bool allowIrrigation { get; set; } = true;",
                "",
                "        [Description(\"Allow reporting to the summary file?\")]",
                "        public bool allowReporting { get; set; }",
                "",
                "",
                "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                "        public string seasonStart { get; set; }",
                "",
                "",
                "        [Description(\"End of irrigation season (dd-MMM)\")]",
                "        public string seasonEnd { get; set; }",
                "",
                "",
                "        [Description(\"Season allocation (mm)\")]",
                "        public double seasonsAllocation { get; set; }",
                "",
                "",
                "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                "        public double triggerDeficit { get; set; }",
                "",
                "",
                "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                "        public double targetDeficit { get; set; }",
                "",
                "",
                "        [Description(\"Minimum days for irrigation to return\")]",
                "        public double returndays { get; set; }",
                "",
                "        [Description(\"Maximum irrigation application (mm/day)\")]",
                "        public double maximumAmount { get; set; }",
                "",
                "        [Description(\"Depth to calculate PAWC (mm)\")]",
                "        public double depthPAWC { get; set; }",
                "",
                "        //Class members",
                "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                "        [JsonIgnore] public double TopSWC { get; set; }",
                "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                "        [JsonIgnore] public double AmountToApply { get; set; }",
                "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                "        ",
                "        private bool IrrigationIsAllowed { get; set; }",
                "        private bool SeasonIsOpen { get; set; }",
                "        private bool CropIsActive { get; set; }",
                "        private bool IrrigatorIsAvailable { get; set; }",
                "        private bool SoilIsDry { get; set; }",
                "",
                "    ",
                "        //Calculate static soil variables",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                "        {   ",
                "            //Set the season dates",
                "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                "            ",
                "           ",
                "            //Can we irrigate at all?",
                "            IrrigationIsAllowed = false; ",
                "            if (allowIrrigation)",
                "                IrrigationIsAllowed = true; ",
                "",
                "            //Calculate soil water variables",
                "            double depthFromSurface = 0.0;",
                "            double fracLayer = 0.0;",
                "            nLayers = soilPhysical.Thickness.Length;",
                "            for (int layer = 0; layer < nLayers; layer++)",
                "            {",
                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                "                depthFromSurface += soilPhysical.Thickness[layer];",
                "                if (depthFromSurface >= depthPAWC)",
                "                    layer = nLayers;",
                "            }",
                "        }",
                "             ",
                "        //Determine daily requirement for irrigation",
                "        [EventSubscribe(\"StartOfDay\")]",
                "        private void OnStartOfDay(object sender, EventArgs e)",
                "        {",
                "            //Can we irrigate today?          ",
                "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                "            if (!SeasonIsOpen)",
                "                SeasonAppliedAmount = 0;",
                "",
                "            //Is there a crop in the ground that needs irrigation?",
                "            CropIsActive = false;",
                "            if ((existingCrop != null) && (existingCrop.IsAlive))",
                "                CropIsActive = true;",
                "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
                "          ",
                "            //Is the irrigator available?",
                "            IrrigatorIsAvailable = false;",
                "            DaysSinceIrrigation += 1;",
                "            if (DaysSinceIrrigation >= returndays)",
                "                IrrigatorIsAvailable = true;",
                "          ",
                "            //Is the soil dry enough to require irrigation?",
                "            SoilIsDry = false;",
                "            double depthFromSurface = 0.0;",
                "            double fracLayer = 0.0;",
                "            TopSWC = 0.0;",
                "            for (int layer = 0; layer < nLayers; layer++)",
                "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
                "            {",
                "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                "                depthFromSurface += soilPhysical.Thickness[layer];",
                "                if (depthFromSurface >= depthPAWC)",
                "                    layer = nLayers;",
                "            }",
                "            ",
                "            TopSWdeficit = TopSWC - TopDUL;",
                "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                "                SoilIsDry = true;",
                "                ",
                "            //Are all the conditions ratifying irrigation",
                "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                "            {",
                "                //Lets bloody well irrigate then!!!!",
                "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                "                AmountToApply = Math.Min(AmountToApply,maximumAmount);",
                "                ",
                "                Irrigation.Apply(AmountToApply, doOutput:  allowReporting);",
                "                ",
                "                DaysSinceIrrigation = 0;",
                "                SeasonAppliedAmount += AmountToApply;",
                "            }",
                "        }",
                "        ",
                "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                "        {",
                "            bool result = false;",
                "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                "            {",
                "                // period is within one year, ex: summer in the northern hemisphere",
                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                "                    result = true;",
                "            }",
                "            else",
                "            {",
                "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                "                    result = true;",
                "            }",
                "            ",
                "            return result;",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "allowIrrigation",
                  "Value": "True"
                },
                {
                  "Key": "allowReporting",
                  "Value": "False"
                },
                {
                  "Key": "seasonStart",
                  "Value": "1-sep"
                },
                {
                  "Key": "seasonEnd",
                  "Value": "30-mar"
                },
                {
                  "Key": "seasonsAllocation",
                  "Value": "10000"
                },
                {
                  "Key": "triggerDeficit",
                  "Value": "80"
                },
                {
                  "Key": "targetDeficit",
                  "Value": "95"
                },
                {
                  "Key": "returndays",
                  "Value": "3"
                },
                {
                  "Key": "maximumAmount",
                  "Value": "30"
                },
                {
                  "Key": "depthPAWC",
                  "Value": "300"
                }
              ],
              "Name": "AutomaticIrrigation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "grass",
              "InitialResidueType": "grass",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 10.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": null,
              "ASCSubOrder": null,
              "SoilType": "MergeAge40",
              "LocalName": null,
              "Site": "-",
              "NearestTown": "-",
              "Region": "Plains",
              "State": "Canterbury",
              "Country": "New Zealand",
              "NaturalVegetation": null,
              "ApsoilNumber": null,
              "Latitude": 0.0,
              "Longitude": 0.0,
              "LocationAccuracy": null,
              "YearOfSampling": null,
              "DataSource": "Generic profile descriptions provided by Trevor Webb and data for functional horizions based on SWAMP project results",
              "Comments": "Bulk density values were measured on the fine earth fraction so values entered into apsim soil are adjusted down to account for stone content (assuming stones are inert from all soil process so their mass and volume is removed from model paramaters).  SAT, DUL, LL15 and Air dry have been adjusted down to account for stone content.  OC has not been adjusted so the model will get the correct carbon and N amounts using the adjusted BD.",
              "Name": "HE_140mm",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "ParticleSizeClay": [
                    20.0,
                    24.0,
                    39.0,
                    44.0,
                    44.0,
                    19.0,
                    19.0
                  ],
                  "ParticleSizeSand": [
                    14.5,
                    18.0,
                    13.0,
                    1.0,
                    1.0,
                    15.0,
                    15.0
                  ],
                  "ParticleSizeSilt": [
                    65.5,
                    58.0,
                    48.0,
                    55.0,
                    55.0,
                    66.0,
                    66.0
                  ],
                  "Rocks": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "Texture": null,
                  "BD": [
                    1.3105,
                    1.524,
                    1.42,
                    1.424,
                    1.424,
                    1.601,
                    1.601
                  ],
                  "AirDry": [
                    0.07675,
                    0.201,
                    0.2985,
                    0.308,
                    0.308,
                    0.162,
                    0.162
                  ],
                  "LL15": [
                    0.1535,
                    0.201,
                    0.2985,
                    0.308,
                    0.308,
                    0.162,
                    0.162
                  ],
                  "DUL": [
                    0.3735,
                    0.332,
                    0.426,
                    0.446,
                    0.446,
                    0.325,
                    0.325
                  ],
                  "SAT": [
                    0.456165,
                    0.39432,
                    0.441525,
                    0.4557,
                    0.456,
                    0.376,
                    0.376
                  ],
                  "KS": null,
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": [
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated"
                  ],
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": [
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
                  ],
                  "ParticleSizeSiltMetadata": [
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
                  ],
                  "ParticleSizeClayMetadata": [
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
                  ],
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.154,
                        0.201,
                        0.299,
                        0.308,
                        0.308,
                        0.162,
                        0.162
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.1,
                        0.05,
                        0.05,
                        0.05,
                        0.05
                      ],
                      "XF": [
                        1.0,
                        0.8,
                        0.8,
                        0.3,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "LLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "KLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "XFMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "Name": "AGPRyegrassSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.154,
                        0.201,
                        0.299,
                        0.308,
                        0.308,
                        0.162,
                        0.162
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.1,
                        0.05,
                        0.05,
                        0.05,
                        0.05
                      ],
                      "XF": [
                        1.0,
                        0.8,
                        0.8,
                        0.3,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "LLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "KLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "XFMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "Name": "AGPWhiteCloverSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "Carbon": [
                    4.502,
                    1.91,
                    0.772,
                    0.422,
                    0.422,
                    0.402,
                    0.4
                  ],
                  "CarbonUnits": 0,
                  "SoilCNRatio": [
                    11.0,
                    11.0,
                    11.0,
                    11.0,
                    11.0,
                    11.0,
                    11.0
                  ],
                  "FBiom": [
                    0.048,
                    0.027,
                    0.019,
                    0.015,
                    0.015,
                    0.015,
                    0.015
                  ],
                  "FInert": [
                    0.382,
                    0.634,
                    0.784,
                    0.924,
                    0.924,
                    0.971,
                    0.985
                  ],
                  "FOM": [
                    347.67,
                    257.56,
                    172.648,
                    85.734,
                    63.514,
                    47.052,
                    25.823
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "PH": [
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.373,
                    0.332,
                    0.426,
                    0.446,
                    0.446,
                    0.325,
                    0.325
                  ],
                  "InitialPAWmm": 231.4,
                  "RelativeTo": "LL15",
                  "FilledFromTop": true,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 6.0,
                  "SummerCona": 3.5,
                  "WinterDate": "1-Apr",
                  "WinterU": 6.0,
                  "WinterCona": 2.5,
                  "DiffusConst": 0.0,
                  "DiffusSlope": 0.0,
                  "Salb": 0.0,
                  "CN2Bare": 0.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": 5.0,
                  "CatchmentArea": 10.0,
                  "PSIDul": -100.0,
                  "Thickness": [],
                  "SWCON": null,
                  "KLAT": null,
                  "Name": "WaterBalance",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "InitialValues": null,
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "InitialValues": null,
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "InitialValues": null,
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.NutrientPatching.NutrientPatchManager, Models",
                  "MaximumNitrogenAvailableToPlants": 0.0,
                  "NPartitionApproach": 0,
                  "AutoAmalgamationApproach": 0,
                  "basePatchApproach": 0,
                  "AllowPatchAmalgamationByAge": false,
                  "PatchAgeForForcedMerge": 0.0,
                  "LayerForNPartition": -99.0,
                  "MaximumNO3AvailableToPlants": null,
                  "MaximumNH4AvailableToPlants": null,
                  "Name": "NutrientPatchManager",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.AgPasture.PastureSpecies, Models",
              "doyGermination": 275,
              "daysEmergenceToAnthesis": 120,
              "daysAnthesisToMaturity": 85,
              "degreesDayForAnthesis": 1100.0,
              "degreesDayForMaturity": 900.0,
              "daysAnnualsFactor": 45,
              "FVPDFunction": {
                "$type": "Models.Functions.LinearInterpolationFunction, Models",
                "Name": "LinearInterpolationFunction",
                "ResourceName": null,
                "Children": [],
                "Enabled": true,
                "ReadOnly": false
              },
              "CanopyType": "PastureSpecies",
              "LightProfile": null,
              "InitialShootDM": 1500.0,
              "InitialRootDM": 450.0,
              "InitialRootDepth": 750.0,
              "initialDMFractionsGrasses": [
                0.15,
                0.25,
                0.25,
                0.05,
                0.05,
                0.1,
                0.1,
                0.05,
                0.0,
                0.0,
                0.0
              ],
              "initialDMFractionsLegumes": [
                0.16,
                0.23,
                0.22,
                0.05,
                0.03,
                0.05,
                0.05,
                0.01,
                0.04,
                0.08,
                0.08
              ],
              "initialDMFractionsForbs": [
                0.2,
                0.2,
                0.15,
                0.05,
                0.1,
                0.15,
                0.1,
                0.05,
                0.0,
                0.0,
                0.0
              ],
              "PhotosyntheticEfficiency": 0.01,
              "PhotosynthesisCurveFactor": 0.8,
              "FractionPAR": 0.5,
              "ReferenceCO2": 380.0,
              "CO2EffectScaleFactor": 700.0,
              "CO2EffectOffsetFactor": 600.0,
              "CO2EffectMinimum": 0.7,
              "CO2EffectExponent": 2.0,
              "ReproSeasonDurationCoeff": 2.0,
              "ReproSeasonShouldersLengthFactor": 1.0,
              "ReproSeasonOnsetDurationFactor": 0.6,
              "RelativeTurnoverEmerging": 2.0,
              "DetachmentDroughtCoefficient": 3.0,
              "DetachmentDroughtEffectMin": 0.1,
              "TurnoverStockFactor": 0.01,
              "TurnoverDefoliationEffectMin": 0.025,
              "MinimumGreenLeafProp": 0.8,
              "MinimumGreenRootProp": 0.5,
              "Name": "AGPRyegrass",
              "ResourceName": "AGPRyegrass",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.AgPasture.PastureSpecies, Models",
              "doyGermination": 275,
              "daysEmergenceToAnthesis": 120,
              "daysAnthesisToMaturity": 85,
              "degreesDayForAnthesis": 1100.0,
              "degreesDayForMaturity": 900.0,
              "daysAnnualsFactor": 45,
              "FVPDFunction": {
                "$type": "Models.Functions.LinearInterpolationFunction, Models",
                "Name": "LinearInterpolationFunction",
                "ResourceName": null,
                "Children": [],
                "Enabled": true,
                "ReadOnly": false
              },
              "CanopyType": "PastureSpecies",
              "LightProfile": null,
              "InitialShootDM": 500.0,
              "InitialRootDM": 150.0,
              "InitialRootDepth": 350.0,
              "initialDMFractionsGrasses": [
                0.15,
                0.25,
                0.25,
                0.05,
                0.05,
                0.1,
                0.1,
                0.05,
                0.0,
                0.0,
                0.0
              ],
              "initialDMFractionsLegumes": [
                0.16,
                0.23,
                0.22,
                0.05,
                0.03,
                0.05,
                0.05,
                0.01,
                0.04,
                0.08,
                0.08
              ],
              "initialDMFractionsForbs": [
                0.2,
                0.2,
                0.15,
                0.05,
                0.1,
                0.15,
                0.1,
                0.05,
                0.0,
                0.0,
                0.0
              ],
              "PhotosyntheticEfficiency": 0.01,
              "PhotosynthesisCurveFactor": 0.8,
              "FractionPAR": 0.5,
              "ReferenceCO2": 380.0,
              "CO2EffectScaleFactor": 700.0,
              "CO2EffectOffsetFactor": 600.0,
              "CO2EffectMinimum": 0.7,
              "CO2EffectExponent": 2.0,
              "ReproSeasonDurationCoeff": 2.0,
              "ReproSeasonShouldersLengthFactor": 1.0,
              "ReproSeasonOnsetDurationFactor": 0.6,
              "RelativeTurnoverEmerging": 2.0,
              "DetachmentDroughtCoefficient": 3.0,
              "DetachmentDroughtEffectMin": 0.1,
              "TurnoverStockFactor": 0.01,
              "TurnoverDefoliationEffectMin": 0.025,
              "MinimumGreenLeafProp": 0.8,
              "MinimumGreenRootProp": 0.5,
              "Name": "AGPWhiteClover",
              "ResourceName": "AGPWhiteClover",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Decomposition].MineralisedN",
                "[Nutrient].MineralisedN",
                "[NO3].kgha",
                "[NH4].kgha",
                "[Urea].kgha"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "Report",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}