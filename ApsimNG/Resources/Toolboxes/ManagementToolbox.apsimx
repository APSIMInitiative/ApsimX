{
  "$type": "Models.Core.Simulations, Models",
  "Version": 174,
  "Name": "Management toolbox",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": false,
      "GraphsPerPage": 6,
      "Name": "Weather",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Newtonsoft.Json;",
            "using APSIM.Shared.Utilities;",
            "using Models.Interfaces;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System.Xml.Serialization;",
            "using System;",
            "using System.Linq;",
            "using Models.Soils.Nutrients;",
            "using Models.Climate;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        // - Links to APSIM models",
            "        [Link] Zone zone;",
            "        [Link] Clock clock;",
            "        [Link] Weather weather;",
            "        [Link] ISummary summary = null;",
            "",
            "        // - Paramters for this manager",
            "        [Description(\"Enable? Set to 'No' to completely disable this manager\")] public bool AllowControl { get; set; }",
            "",
            "        [Separator(\"General settings\")]",
            "        [Description(\"Start the climate controls beginning on date (dd/mmm/yyyy): \")] public DateTime EnableDate { get; set; }",
            "        [Description(\"Implement climate control only during part of the year?\")] public bool WithinYearControl { get; set; }",
            "        [Description(\"Within each year, the first day to start the climate controls is (dd-mmm)\")] public string ControlStart { get; set; }",
            "        [Description(\"Within each year, end last day of climate control is (dd-mmm)\")] public string ControlEnd { get; set; }",
            "",
            "        [Separator(\"Rainfall\")]",
            "        [Description(\"Rainfall multiplier (-): \")] public double RainfallMultiplier { get; set; }",
            "        [Description(\"Rainfall addition (mm): \")] public double RainfallAddition { get; set; }",
            "",
            "        [Separator(\"Radiation\")]",
            "        [Description(\"Radiation multiplier (-): \")] public double RadiationMultiplier { get; set; }",
            "        [Description(\"Radiation addition (MJ/m2): \")] public double RadiationAddition { get; set; }",
            "",
            "        [Separator(\"Minimum temperature\")]",
            "        [Description(\"Minimum temperature multiplier (-): \")] public double MinTMultiplier { get; set; }",
            "        [Description(\"Minimum temperature addition (C): \")] public double MinTAddition { get; set; }",
            "",
            "        [Separator(\"Maximum temperature\")]",
            "        [Description(\"Maximum temperature multiplier (-): \")] public double MaxTMultiplier { get; set; }",
            "        [Description(\"Maximum temperature addition (C): \")] public double MaxTAddition { get; set; }",
            "",
            "        [Separator(\"Wind speed\")]",
            "        [Description(\"Wind speed multiplier (-): \")] public double WindMultiplier { get; set; }",
            "        [Description(\"Wind speed addition (m/s): \")] public double WindAddition { get; set; }",
            "",
            "        [Separator(\"Vapour pressure\")]",
            "        [Description(\"Vapour pressure multiplier (-): \")] public double VPMultiplier { get; set; }",
            "        [Description(\"Vapour pressure addition (hPa): \")] public double VPAddition { get; set; }",
            "",
            "        [JsonIgnore] public bool DoControl { get; set; }",
            "        [JsonIgnore] public int DoControlInt { get; set; }",
            "",
            "        [EventSubscribe(\"PreparingNewWeatherData\")] private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            // Check if this manager is enabled",
            "            if ((AllowControl) && (clock.Today >= EnableDate))",
            "            {",
            "                DoControl = true;",
            "                if (WithinYearControl)",
            "                    DoControl = DateUtilities.WithinDates(ControlStart, clock.Today, ControlEnd); ",
            "            }",
            "",
            "            if (DoControl)",
            "                DoControlInt = 1;",
            "            else",
            "                DoControlInt = 0;",
            "",
            "            if (DoControl)",
            "            {",
            "                // do the weather alterations ",
            "                weather.Rain = RainfallMultiplier * weather.Rain + RainfallAddition;",
            "                weather.Radn = RadiationMultiplier * weather.Radn + RadiationAddition;",
            "                weather.MinT = MinTMultiplier * weather.MinT + MinTAddition;",
            "                weather.MaxT = MaxTMultiplier * weather.MaxT + MaxTAddition;",
            "                weather.Wind = WindMultiplier * weather.Wind + WindAddition;",
            "                weather.VP = VPMultiplier * weather.VP + VPAddition;",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "AllowControl",
              "Value": "True"
            },
            {
              "Key": "EnableDate",
              "Value": "01/01/1972 00:00:00"
            },
            {
              "Key": "WithinYearControl",
              "Value": "False"
            },
            {
              "Key": "ControlStart",
              "Value": ""
            },
            {
              "Key": "ControlEnd",
              "Value": ""
            },
            {
              "Key": "RainfallMultiplier",
              "Value": "0.9"
            },
            {
              "Key": "RainfallAddition",
              "Value": "0"
            },
            {
              "Key": "RadiationMultiplier",
              "Value": "1"
            },
            {
              "Key": "RadiationAddition",
              "Value": "0"
            },
            {
              "Key": "MinTMultiplier",
              "Value": "1"
            },
            {
              "Key": "MinTAddition",
              "Value": "0"
            },
            {
              "Key": "MaxTMultiplier",
              "Value": "1"
            },
            {
              "Key": "MaxTAddition",
              "Value": "0"
            },
            {
              "Key": "WindMultiplier",
              "Value": "1"
            },
            {
              "Key": "WindAddition",
              "Value": "0"
            },
            {
              "Key": "VPMultiplier",
              "Value": "1"
            },
            {
              "Key": "VPAddition",
              "Value": "0"
            }
          ],
          "Name": "ClimateController",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System.Diagnostics;",
            "using System.Collections.Generic;",
            "using System.IO;",
            "using System.Data;",
            "using System.Linq;",
            "using System;",
            "using Models.Interfaces;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock clock;",
            "        [Link] IWeather weather;",
            "        [Link] Simulation simulation;",
            "        ",
            "        private DataTable data;",
            "        private List<DateTime> dates = new List<DateTime>();",
            "        private DateTime startDate;",
            "        private DateTime endDate;",
            "",
            "        [Description(\"Name of file containing weather data to patch:\")]",
            "        public string patchFileName { get; set; }",
            "",
            "        [Description(\"Date to start patching weather data (can be blank):\")]",
            "        public string date1 { get; set; }",
            "",
            "        [Description(\"Date to stop patching weather data: (can be blank)\")]",
            "        public string date2 { get; set; }",
            "",
            "        [Separator(\"Which data items should be patched\")]",
            "",
            "        [Description(\"Patch 'Rain'?\")] public bool PatchRain { get; set; }",
            "        ",
            "        [Description(\"Patch 'MinT'?\")] public bool PatchMinT { get; set; }",
            "",
            "        [Description(\"Patch 'MaxT'?\")] public bool PatchMaxT { get; set; }",
            "",
            "        [Description(\"Patch 'Radn'?\")] public bool PatchRadn { get; set; }",
            "",
            "        [Description(\"Patch 'CO2'?\")] public bool PatchCO2 { get; set; }",
            "",
            "        [Description(\"Patch 'VP'?\")] public bool PatchVP { get; set; }",
            "        ",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            // Ensure filename is relative to the directory where the .apsimx file is located.",
            "            string fullFileName = PathUtilities.GetAbsolutePath(patchFileName, simulation.FileName);",
            "        ",
            "            // Read in data.",
            "            data = ApsimTextFile.ToTable(fullFileName);",
            "            foreach (DataRow row in data.Rows)",
            "                dates.Add(DataTableUtilities.GetDateFromRow(row));",
            "            ",
            "            // Ensure startDate and endDate always have a value.",
            "            if (string.IsNullOrEmpty(date1))",
            "                startDate = clock.StartDate;",
            "            else",
            "                startDate = DateTime.Parse(date1);",
            "",
            "             if (string.IsNullOrEmpty(date2))",
            "                endDate = clock.EndDate;",
            "            else",
            "                endDate = DateTime.Parse(date2);",
            "",
            "        }",
            "",
            "        [EventSubscribe(\"PreparingNewWeatherData\")]",
            "        private void OnPreparingNewWeatherData(object sender, EventArgs e)",
            "        {",
            "            if (clock.Today >= startDate && clock.Today <= endDate)",
            "            {",
            "                // check to see if we have a row of data for today.",
            "                int rowIndex = dates.IndexOf(clock.Today);",
            "                if (rowIndex != -1)",
            "                {",
            "                    // Yes we do have data for today so patch the data.",
            "                    foreach (DataColumn column in data.Columns)",
            "                    {",
            "                        if (PatchRain && (column.ColumnName.Equals(\"Rain\", StringComparison.InvariantCultureIgnoreCase)))",
            "                            weather.Rain = Convert.ToDouble(data.Rows[rowIndex][column.ColumnName]);",
            "                        else if (PatchMinT && (column.ColumnName.Equals(\"MaxT\", StringComparison.InvariantCultureIgnoreCase)))",
            "                            weather.MaxT = Convert.ToDouble(data.Rows[rowIndex][column.ColumnName]);",
            "                        else if (PatchMaxT && (column.ColumnName.Equals(\"MinT\", StringComparison.InvariantCultureIgnoreCase)))",
            "                            weather.MinT = Convert.ToDouble(data.Rows[rowIndex][column.ColumnName]);",
            "                        else if ((PatchRadn && column.ColumnName.Equals(\"Radn\", StringComparison.InvariantCultureIgnoreCase)))",
            "                            weather.Radn = Convert.ToDouble(data.Rows[rowIndex][column.ColumnName]);",
            "                        else if (PatchCO2 && (column.ColumnName.Equals(\"CO2\", StringComparison.InvariantCultureIgnoreCase)))",
            "                            weather.CO2 = Convert.ToDouble(data.Rows[rowIndex][column.ColumnName]);",
            "                        else if (PatchVP && (column.ColumnName.Equals(\"VP\", StringComparison.InvariantCultureIgnoreCase)))",
            "                            weather.VP = Convert.ToDouble(data.Rows[rowIndex][column.ColumnName]);",
            "                    }",
            "                }",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "patchFileName",
              "Value": ""
            },
            {
              "Key": "date1",
              "Value": ""
            },
            {
              "Key": "date2",
              "Value": ""
            },
            {
              "Key": "PatchRain",
              "Value": "False"
            },
            {
              "Key": "PatchMinT",
              "Value": "False"
            },
            {
              "Key": "PatchMaxT",
              "Value": "False"
            },
            {
              "Key": "PatchRadn",
              "Value": "False"
            },
            {
              "Key": "PatchCO2",
              "Value": "False"
            },
            {
              "Key": "PatchVP",
              "Value": "False"
            }
          ],
          "Name": "PatchWeather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": false,
      "GraphsPerPage": 6,
      "Name": "Plant",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using APSIM.Shared.Utilities;",
            "using Models.Utilities;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] Fertiliser Fertiliser;",
            "        [Link] Summary Summary;",
            "        [Link] Soil Soil;",
            "        ",
            "        [Description(\"Crop\")]",
            "        public IPlant Crop { get; set; }",
            "",
            "        [Description(\"Sowing date (d-mmm)\")]",
            "        public string SowDate { get; set; }",
            "",
            "        [Display(Type = DisplayType.CultivarName)]",
            "        [Description(\"Cultivar to be sown\")]",
            "        public string CultivarName { get; set; }",
            "",
            "        [Description(\"Sowing depth (mm)\")]",
            "        public double SowingDepth { get; set; }",
            "",
            "        [Description(\"Row spacing (mm)\")]",
            "        public double RowSpacing { get; set; }",
            "",
            "        [Description(\"Plant population (/m2)\")]",
            "        public double Population { get; set; }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            if (DateUtilities.WithinDates(SowDate, Clock.Today, SowDate))",
            "            {",
            "                Crop.Sow(population: Population, cultivar: CultivarName, depth: SowingDepth, rowSpacing: RowSpacing);    ",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Crop",
              "Value": ""
            },
            {
              "Key": "SowDate",
              "Value": "24-Jul"
            },
            {
              "Key": "CultivarName",
              "Value": "Amethyst"
            },
            {
              "Key": "SowingDepth",
              "Value": "50"
            },
            {
              "Key": "RowSpacing",
              "Value": "750"
            },
            {
              "Key": "Population",
              "Value": "6"
            }
          ],
          "Name": "Sow on a fixed date",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Interfaces;",
            "using APSIM.Shared.Utilities;",
            "using Models.Utilities;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "using Models.Climate;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] private Clock Clock;",
            "        [Link] private Fertiliser Fertiliser;",
            "        [Link] private Summary Summary;",
            "        [Link] private Soil Soil;",
            "        private Accumulator accumulatedRain;",
            "        [Link]",
            "        private ISoilWater waterBalance;",
            "        ",
            "        [Description(\"Crop\")]",
            "        public IPlant Crop { get; set; }",
            "",
            "        [Description(\"Start of sowing window (d-mmm)\")]",
            "        public string StartDate { get; set; }",
            "",
            "        [Description(\"End of sowing window (d-mmm)\")]",
            "        public string EndDate { get; set; }",
            "",
            "        [Description(\"Minimum extractable soil water for sowing (mm)\")]",
            "        public double MinESW { get; set; }",
            "",
            "        [Description(\"Accumulated rainfall required for sowing (mm)\")]",
            "        public double MinRain { get; set; }",
            "",
            "        [Description(\"Duration of rainfall accumulation (d)\")]",
            "        public int RainDays { get; set; }",
            "",
            "        [Display(Type = DisplayType.CultivarName)]",
            "        [Description(\"Cultivar to be sown\")]",
            "        public string CultivarName { get; set; }",
            "",
            "        [Description(\"Sowing depth (mm)\")]",
            "        public double SowingDepth { get; set; }",
            "",
            "        [Description(\"Row spacing (mm)\")]",
            "        public double RowSpacing { get; set; }",
            "",
            "        [Description(\"Plant population (/m2)\")]",
            "        public double Population { get; set; }",
            "        ",
            "        ",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnSimulationCommencing(object sender, EventArgs e)",
            "        {",
            "            accumulatedRain = new Accumulator(this, \"[Weather].Rain\", RainDays);",
            "        }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            accumulatedRain.Update();",
            "            ",
            "            if (DateUtilities.WithinDates(StartDate, Clock.Today, EndDate) &&",
            "                !Crop.IsAlive &&",
            "                MathUtilities.Sum(waterBalance.ESW) > MinESW &&",
            "                accumulatedRain.Sum > MinRain)",
            "            {",
            "                Crop.Sow(population: Population, cultivar: CultivarName, depth: SowingDepth, rowSpacing: RowSpacing);    ",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Crop",
              "Value": ""
            },
            {
              "Key": "StartDate",
              "Value": "1-nov"
            },
            {
              "Key": "EndDate",
              "Value": "10-jan"
            },
            {
              "Key": "MinESW",
              "Value": "100"
            },
            {
              "Key": "MinRain",
              "Value": "25"
            },
            {
              "Key": "RainDays",
              "Value": "7"
            },
            {
              "Key": "CultivarName",
              "Value": "Dekalb_XL82"
            },
            {
              "Key": "SowingDepth",
              "Value": "30"
            },
            {
              "Key": "RowSpacing",
              "Value": "750"
            },
            {
              "Key": "Population",
              "Value": "6"
            }
          ],
          "Name": "Sow using a variable rule",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using APSIM.Shared.Utilities;",
            "using Models.Utilities;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    public class Script : Model",
            "    {",
            "        [Description(\"Crop\")]",
            "        public IPlant Crop { get; set; }",
            "        ",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            if (Crop.IsReadyForHarvesting)",
            "            {",
            "                Crop.Harvest();",
            "                Crop.EndCrop();",
            "            }",
            "        }",
            "    }",
            "}",
            "       "
          ],
          "Parameters": [
            {
              "Key": "Crop",
              "Value": ""
            }
          ],
          "Name": "Harvesting",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "using Models.Surface;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] SurfaceOrganicMatter SOM;",
            "        ",
            "        [Description(\"Tillage Date\")]",
            "        public string TillageDate { get; set; }",
            "        ",
            "        [Description(\"Fraction of Residues To Incorporate (0-1)\")]",
            "        public double Fraction { get; set; }",
            "",
            "        [Description(\"Depth of Tillage (mm)\")]",
            "        public double Depth { get; set; }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            if (DateUtilities.WithinDates(TillageDate, Clock.Today, TillageDate))",
            "                SOM.Incorporate(Fraction, Depth);",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "TillageDate",
              "Value": "1-jul"
            },
            {
              "Key": "Fraction",
              "Value": "0.5"
            },
            {
              "Key": "Depth",
              "Value": "0"
            }
          ],
          "Name": "Tillage on a fixed date",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "",
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] Fertiliser Fertiliser;",
            "",
            "        public double TimeSincePlanting {get; set;}",
            "",
            "        [Description(\"The tree to manage\")]",
            "        public Plant Plant { get; set; }",
            "",
            "        [Description(\"Spacing (m) between plants within rows\")]",
            "        public double RowSpace { get; set; }",
            "",
            "        [Description(\"Spacing (m) between rows\")]",
            "        public double RowWidth { get; set; }",
            "",
            "        [Description(\"Cultivar\")]",
            "        [Display(Type=DisplayType.CultivarName)]",
            "        public string CultivarName { get; set; }",
            "",
            "        [Description(\"Planting Date (dd-mmm)\")]",
            "        public String PlantingDate { get; set; }",
            "",
            "        [Description(\"Harvest Age (years)\")]",
            "        public double HarvestAge { get; set; }",
            "",
            "        [Description(\"Amount of fertiliser N to be applied at planting (kg N/ha)\")]",
            "        public double FertAmount { get; set; }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            double PlantPopulation = 1 / (RowWidth * RowSpace);",
            "            double RowWidthmm = RowWidth * 1000;",
            "",
            "            if (DateUtilities.WithinDates(PlantingDate, Clock.Today, PlantingDate) && !Plant.IsAlive)",
            "            {",
            "                Plant.Sow(population: PlantPopulation, ",
            "                    cultivar: CultivarName, ",
            "                    depth: 100, ",
            "                    rowSpacing: RowWidthmm);",
            "                TimeSincePlanting = 0;",
            "                Fertiliser.Apply(Amount: FertAmount, Type: Fertiliser.Types.NO3N);",
            "            }",
            "",
            "            if (TimeSincePlanting > HarvestAge && Plant.IsAlive)",
            "            {",
            "               Plant.Harvest();",
            "               Plant.EndCrop();         ",
            "               TimeSincePlanting = 0;  ",
            "            }",
            "",
            "            TimeSincePlanting += 1.0/365.242199;",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Plant",
              "Value": ""
            },
            {
              "Key": "RowSpace",
              "Value": "3"
            },
            {
              "Key": "RowWidth",
              "Value": "3"
            },
            {
              "Key": "CultivarName",
              "Value": "grandisCoffsHarbour"
            },
            {
              "Key": "PlantingDate",
              "Value": "1-aug"
            },
            {
              "Key": "HarvestAge",
              "Value": "7"
            },
            {
              "Key": "FertAmount",
              "Value": "100"
            }
          ],
          "Name": "TreeManagement",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.PMF.Interfaces;",
            "using Newtonsoft.Json;",
            "using System;",
            "using System.Linq;",
            "using System.Collections.Generic;",
            "using Models.Core;",
            "using Models.PMF;",
            "using Models.PMF.Interfaces;",
            "using System.Xml.Serialization;",
            "using APSIM.Shared.Utilities;",
            "using Models.Interfaces;",
            "using Models.Soils;",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    public class Script : Model",
            "    {",
            "        [Link] Plant Tree;",
            "",
            "\t\t[Description(\"Bias away from average (e.g. 0.5 for thinning from below, and 2 for thinning from above)\")]",
            "\t\tpublic double ThinBias { get; set; } = 0.7;",
            "",
            "        ",
            "        public void DoThin(double ThinFr)",
            "        {",
            "            //Set up  array of remove fractions to send with Cut method.  Each member in the array corresponds to an organ in the same order they are set up in.",
            "            //Set thinning bias away from average for biomass components (not for population), e.g. 0.5 for thinning from below, and 2 for thinning from above, ",
            "            //i.e. average individual tree size changes",
            "",
            "            //Harvest with manager specified removal fractions",
            "            Tree.structure?.DoThin(ThinFr*ThinBias);",
            "            var Leaf = Tree.FindChild<IHasDamageableBiomass>(\"Leaf\");",
            "            var Stem = Tree.FindChild<IHasDamageableBiomass>(\"Stem\");",
            "            var Branch = Tree.FindChild<IHasDamageableBiomass>(\"Branch\");",
            "            var FineRoot = Tree.FindChild<IHasDamageableBiomass>(\"FineRoot\");",
            "            var CoarseRoot = Tree.FindChild<IHasDamageableBiomass>(\"CoarseRoot\");",
            "            Leaf.RemoveBiomass(liveToResidue: ThinFr*ThinBias);",
            "            Stem.RemoveBiomass(liveToResidue: ThinFr*ThinBias);",
            "            Branch.RemoveBiomass(liveToResidue: ThinFr*ThinBias);",
            "            FineRoot.RemoveBiomass(liveToResidue: ThinFr*ThinBias);",
            "            CoarseRoot.RemoveBiomass(liveToResidue: ThinFr*ThinBias);",
            "",
            "            Tree.Population = Tree.Population*(1-ThinFr);",
            "        }",
            "    }",
            "}",
            "",
            "                "
          ],
          "Parameters": [
            {
              "Key": "ThinBias",
              "Value": "0.7"
            }
          ],
          "Name": "TreeThinning",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "// This manager script calculates the plant available water capacity (PAWC: DUL - CLL) and the ",
            "// current plant available amount (PAW: SW - CLL) for the root zone i.e. it uses root depth.",
            "// The reportable variables are called:",
            "//",
            "// PAWInRootZone",
            "// PAWCInRootzone",
            "",
            "// Both will return an array of values in mm (not volumetric). ",
            "",
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "using Models.PMF.Organs;",
            "using APSIM.Shared.Utilities;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        // Links",
            "        [Link] Clock Clock;",
            "        [Link] Physical physical;",
            "        [Link] Water water;",
            "        [Link] Locator locator;",
            "        ",
            "        // Privates",
            "        private double[] zeroArray;",
            "        private Root root;",
            "        private SoilCrop soilCrop;",
            "        ",
            "        // User configurable parameters",
            "        [Description(\"Plant model to calculate PAWC for\")]",
            "        public IPlant plant { get; set; }",
            "        ",
            "        // Outputs",
            "        public double[] PAWInRootZone { get; private set; }",
            "        public double[] PAWCInRootzone { get; private set; }",
            "        ",
            "        ",
            "        // This will be invoked once at the start of the simulation.",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "        \tzeroArray = new double[physical.Thickness.Length];",
            "        \t",
            "        \troot = locator.Get($\"[{plant.Name}].Root\") as Root;",
            "        \tsoilCrop = locator.Get($\"[Physical].{plant.Name}Soil\") as SoilCrop;",
            "        }",
            "        ",
            "        ",
            "        // This will be invoked each day at the start of the day.",
            "        [EventSubscribe(\"DoManagementCalculations\")]",
            "        private void OnDoManagementCalculations(object sender, EventArgs e)",
            "        {",
            "        \tif (root.Depth == 0)",
            "        \t{",
            "\t\t\t\tPAWInRootZone = zeroArray;",
            "\t\t\t\tPAWCInRootzone = zeroArray;",
            "        \t}",
            "        \telse",
            "        \t{",
            "        \t\t// Create a thickness array with zeros below root depth.",
            "        \t\tdouble[] rootDepthThickness = (double[]) physical.Thickness.Clone();",
            "        \t\tint layerIndexBottomRootZone = SoilUtilities.LayerIndexOfDepth(physical.Thickness, root.Depth);",
            "        \t\t",
            "        \t\tdouble depthOfLayerAboveBottomOfRootZone = 0;",
            "        \t\tif (layerIndexBottomRootZone > 0)",
            "\t\t\t\t{        \t\t",
            "\t\t    \t\tdouble[] cumThickness = SoilUtilities.ToCumThickness(physical.Thickness);",
            "\t\t    \t\tdepthOfLayerAboveBottomOfRootZone = cumThickness[layerIndexBottomRootZone-1];",
            "\t\t    \t}",
            "\t\t    \t\t",
            "\t    \t\trootDepthThickness[layerIndexBottomRootZone] = root.Depth - depthOfLayerAboveBottomOfRootZone;",
            "\t\t\t\tfor (int i = layerIndexBottomRootZone+1; i < physical.Thickness.Length; i++)",
            "\t\t    \t\trootDepthThickness[i] = 0;",
            "\t\t    \t",
            "\t\t    \t",
            "\t\t    \t// Calculate volumetric paw and pawc, taking XF into account.",
            "\t\t    \tdouble[] paw = APSIM.Shared.APSoil.APSoilUtilities.CalcPAWC(physical.Thickness, soilCrop.LL, water.Volumetric, soilCrop.XF);",
            "\t\t    \tdouble[] pawc = APSIM.Shared.APSoil.APSoilUtilities.CalcPAWC(physical.Thickness, soilCrop.LL, physical.DUL, soilCrop.XF);",
            "\t\t    \t",
            "\t\t    \t// Convert paw and pawc into mm available in the root zone.",
            "\t\t        PAWInRootZone = MathUtilities.Multiply(paw, rootDepthThickness);",
            "            \tPAWCInRootzone = MathUtilities.Multiply(pawc, rootDepthThickness);",
            "        \t}",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "plant",
              "Value": ""
            }
          ],
          "Name": "PAWC In Root Zone",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": false,
      "GraphsPerPage": 6,
      "Name": "Fertilise",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] Fertiliser Fertiliser;",
            "        ",
            "        [Separator(\"A component to apply fertiliser on one or more dates on every year of the simulation\")]",
            "",
            "        [Description(\"Type of fertiliser to apply? \")] ",
            "        public Fertiliser.Types FertiliserType { get; set; }",
            "",
            "        [Description(\"Enter the fertilisation dates as dd-mmm with comma separation (any year information entered will be ignored): \")] ",
            "        public string[] FertiliserDates { get; set; } ",
            "",
            "        [Description(\"Amount of fertiliser to be applied (kg /ha)\")] ",
            "        public double Amount { get; set; }",
            "",
            "        [Description(\"Is the above amount to be applied each time? (yes/ticked)? Or is it the total annual amount across all dates (no/unticked)\")] ",
            "        public bool AmountType { get; set; }",
            "        ",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            foreach (string ddMMM in FertiliserDates)",
            "            {",
            "                if (DateUtilities.DatesEqual(ddMMM, Clock.Today))",
            "                {",
            "                    if (AmountType)",
            "                        Fertiliser.Apply(Amount: Amount, Type: FertiliserType);",
            "                    else",
            "                        Fertiliser.Apply(Amount: Amount / FertiliserDates.Length, Type: FertiliserType);",
            "                }",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "FertiliserType",
              "Value": "NO3N"
            },
            {
              "Key": "FertiliserDates",
              "Value": "24-apr"
            },
            {
              "Key": "Amount",
              "Value": "160"
            },
            {
              "Key": "AmountType",
              "Value": "False"
            }
          ],
          "Name": "Fertilise on fixed dates",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Interfaces;",
            "using System.Linq;",
            "using APSIM.Shared.Utilities;",
            "using Models.PMF;",
            "using Models.Soils;",
            "using Models.Core;",
            "using System;",
            "using Models.Soils.Nutrients;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] private Clock clock;",
            "        [Link] private Fertiliser fertiliser;",
            "        [Link] private ISummary summary;",
            "        [Link] private Soil soil;",
            "        private Nutrient nutrient;",
            "        [Link]",
            "        private IPhysical soilPhysical;",
            "",
            "",
            "        [Separator(\"Fertiliser will be applied on the date(s) below\")]",
            "        [Description(\"Apply fertiliser on the same day(s) each year? If no, then must include the year of appliaction below\")]",
            "        public bool EachYear { get; set; }",
            "",
            "        [Description(\"Dates for one or more fertiliser applications (dd-mmm or dd-mmm-yyyy) as a list with a comma between dates\")]",
            "        public string[] Dates { get; set; }",
            "",
            "        [Separator(\"Test for the mineral N in the soil and don't apply the fertiliser if greater than X kgN/ha is stored in the soil above a depth of Y mm\")]",
            "        [Description(\"Use a critical soil mineral N to prevent application above a threshold?\")]",
            "        public bool UseCritNThreshold { get; set; }",
            "",
            "        [Description(\"Don't add fertiliser if N in the soil to the depth below exceeds (kg/ha)\")]",
            "        public double CritNThreshold { get; set; }",
            "",
            "        [Description(\"Depth to which the amount of N in the soil should be calculated (mm)\")]",
            "        public double CritNDepth { get; set; }",
            "",
            "        [Separator(\"Fertiliser application details\")]",
            "        [Description(\"Depth at which to apply the fertiliser (mm)\")]",
            "        public double Depth { get; set; }",
            "",
            "        [Description(\"Amount of fertiliser to apply (kg N /ha) per application\")]",
            "        public double Amount { get; set; }",
            "",
            "        [Description(\"Fertiliser type - select from the list\")]",
            "        public Fertiliser.Types FertiliserType { get; set; }",
            "",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void FindSoilNOrNutrient(object sender, EventArgs e)",
            "        {",
            "            nutrient = this.FindInScope<Nutrient>() as Nutrient;",
            "",
            "            if (nutrient == null)",
            "                throw new Exception(string.Format(\"Error in script {0}: Unable to find nutrient.\", Name));",
            "        }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            if (OnApplicationDate())",
            "            {",
            "                if (NContentBelowThreshold())",
            "                    fertiliser.Apply(Amount, FertiliserType, Depth);",
            "                else",
            "                    summary.WriteMessage(this, \"Skipping fertiliser application due to soil mineral N content being above critical threshold.\", MessageType.Diagnostic);",
            "            }",
            "        }",
            "",
            "        /// <summary>Checks if today's date is one of the specified fertiliser application dates.</summary>",
            "        private bool OnApplicationDate()",
            "        {",
            "            if (EachYear)",
            "                return Dates.Any(d => DateUtilities.DatesEqual(d, clock.Today));",
            "            ",
            "            DateTime[] dates = Dates.Select(d => DateTime.ParseExact(d, \"d-MMM-yyyy\", null)).ToArray();",
            "            return dates.Any(d => SameDate(d, clock.Today));",
            "        }",
            "",
            "        /// <summary>Checks if N content in soil is below critical threshold.</summary>",
            "        private bool NContentBelowThreshold()",
            "        {",
            "            if (!UseCritNThreshold)",
            "                return true;",
            "            ",
            "            double[] weights = GetLayerWeights();",
            "            double cumSoilN = 0;",
            "",
            "            for (int i = 0; i < soilPhysical.Thickness.Length; i++)",
            "            {",
            "                cumSoilN += weights[i] * nutrient.MineralN[i];",
            "            }",
            "",
            "            return cumSoilN <= CritNThreshold;",
            "        }",
            "",
            "        private double[] GetLayerWeights()",
            "        {",
            "            double[] weights = new double[soilPhysical.Thickness.Length];",
            "            double cumDepth = 0;",
            "",
            "            for (int i = 0; i < soilPhysical.Thickness.Length; i++)",
            "            {",
            "                cumDepth += soilPhysical.Thickness[i];",
            "                if (cumDepth < CritNDepth)",
            "                    weights[i] = 1;",
            "                else if (cumDepth - soilPhysical.Thickness[i] <= CritNDepth)",
            "                    weights[i] = (CritNDepth - (cumDepth - soilPhysical.Thickness[i])) / soilPhysical.Thickness[i];",
            "                else",
            "                    weights[i] = 0;",
            "            }",
            "",
            "            return weights;",
            "        }",
            "",
            "        private bool SameDate(DateTime d1, DateTime d2)",
            "        {",
            "            return d1.Year == d2.Year && d1.DayOfYear == d2.DayOfYear;",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "EachYear",
              "Value": "True"
            },
            {
              "Key": "Dates",
              "Value": "30-nov, 15-apr"
            },
            {
              "Key": "UseCritNThreshold",
              "Value": "False"
            },
            {
              "Key": "CritNThreshold",
              "Value": "50"
            },
            {
              "Key": "CritNDepth",
              "Value": "75"
            },
            {
              "Key": "Depth",
              "Value": "50"
            },
            {
              "Key": "Amount",
              "Value": "25"
            },
            {
              "Key": "FertiliserType",
              "Value": "UreaN"
            }
          ],
          "Name": "Fertilise on fixed dates (advanced version)",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] Fertiliser Fertiliser;",
            "        ",
            "        [Description(\"Crop to be fertilised\")]",
            "        public IPlant Crop { get; set; }",
            "",
            "        [Description(\"Type of fertiliser to apply? \")] ",
            "        public Fertiliser.Types FertiliserType { get; set; }",
            "    ",
            "        [Description(\"Amount of fertiliser to be applied (kg/ha)\")]",
            "        public double Amount { get; set; }",
            "        ",
            "        [EventSubscribe(\"Sowing\")]",
            "        private void OnSowing(object sender, EventArgs e)",
            "        {",
            "            Model crop = sender as Model;",
            "            if (Crop != null && crop.Name.ToLower() == (Crop as IModel).Name.ToLower())",
            "                Fertiliser.Apply(Amount: Amount, Type: FertiliserType);",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Crop",
              "Value": ""
            },
            {
              "Key": "FertiliserType",
              "Value": "UreaN"
            },
            {
              "Key": "Amount",
              "Value": "160"
            }
          ],
          "Name": "Fertilise at sowing",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] Fertiliser Fertiliser;",
            "        [Link] Summary Summary;",
            "        [Link] Plant Wheat;",
            " ",
            "        private bool hasFertilised = false;",
            "",
            "        [Description(\"Fertilise once crop reaches stage:\")]",
            "        public double Stage { get; set; }",
            "",
            "        [Description(\"Type of fertiliser to apply? \")] ",
            "        public Fertiliser.Types FertiliserType { get; set; }",
            "",
            "        [Description(\"Amount of fertiliser to be applied (kg/ha)\")] ",
            "        public double Amount { get; set; }",
            "     ",
            "        [EventSubscribe(\"DoManagement\")] ",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        { ",
            "            double zadok = (double)Wheat.FindByPath(\"Phenology.Zadok.Stage\").Value; ",
            " ",
            "            if (zadok >= Stage && !hasFertilised)",
            "            { ",
            "                Summary.WriteMessage(this, \"Fertilising!!\", MessageType.Diagnostic); ",
            "                Fertiliser.Apply(Amount: Amount, Type: FertiliserType);",
            "                hasFertilised = true; ",
            "            } ",
            "        }",
            "",
            "        [EventSubscribe(\"Sowing\")]",
            "        private void OnSowing(object sender, EventArgs e)",
            "        {",
            "            hasFertilised = false;",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Stage",
              "Value": "30"
            },
            {
              "Key": "FertiliserType",
              "Value": "UreaN"
            },
            {
              "Key": "Amount",
              "Value": "40"
            }
          ],
          "Name": "Fertilise on Zadok stage",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using APSIM.Shared.Utilities;",
            "using Models.Soils.Nutrients;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "using Models.Soils.Nutrients;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] Fertiliser Fertiliser;",
            "        [Link(ByName=true)] Solute NO3;",
            "",
            "        [Description(\"Type of fertiliser to apply? \")] ",
            "        public Fertiliser.Types FertiliserType { get; set; }",
            "    ",
            "        [Description(\"Threshold amount of NO3 to topup to (kg/ha)\")]",
            "        public double Threshold { get; set;}",
            "        ",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            double Amount = Threshold - MathUtilities.Sum(NO3.kgha);",
            "            Fertiliser.Apply(Amount: Amount, Type: FertiliserType);",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "FertiliserType",
              "Value": "NO3N"
            },
            {
              "Key": "Threshold",
              "Value": "200"
            }
          ],
          "Name": "Fertilise topup",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using Models.Functions;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "using System.Diagnostics;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock clock;",
            "        [Link] Fertiliser fertiliser;",
            "        [Link] Zone zone;",
            "        ",
            "        [Separator(\"A model to apply fertiliser days after a variable reaches a threshold\")]",
            "        [Separator(\"Trigger to fertilse on\")]",
            "                 ",
            "        [Description(\"Name of APSIM variable\")]",
            "        public string VariableName { get; set; }",
            "                ",
            "        [Description(\"Exact value to trigger fertilise\")]",
            "        public double TriggerValue { get; set; }",
            "        ",
            "        [Description(\"Number of days to wait after trigger\")]",
            "        public int NumDaysToWait { get; set; }",
            "        ",
            "        [Description(\"Only trigger once per sowing\")] ",
            "        public bool DoOncePerSowing { get; set; }",
            "               ",
            "        [Separator(\"Amount and type to fertilise\")]",
            "                 ",
            "        [Description(\"Amount of fertiliser to be applied (kg /ha)\")]",
            "        public double Amount { get; set; }",
            "               ",
            "        [Description(\"Type of fertiliser to apply? \")]",
            "        public Fertiliser.Types FertiliserType { get; set; }",
            "          ",
            "        private DateTime FertiliseDate;",
            "        private Model obj;",
            "        private bool waitingForFertiliser = false;",
            "        private bool hasTriggeredPerSowing = true;",
            "               ",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "        }",
            "        ",
            "        [EventSubscribe(\"Sowing\")]",
            "        private void OnSowing(object sender, EventArgs e)",
            "        {",
            "            hasTriggeredPerSowing = false;",
            "        }    ",
            "               ",
            "        [EventSubscribe(\"DoManagementCalculations\")]",
            "        private void OnDoManagementCalculations(object sender, EventArgs e)",
            "        {",
            "            var obj = zone.Get(VariableName);",
            "            double value;",
            "            if (obj is double)",
            "                value = (double) obj;",
            "            else if (obj is IFunction f)",
            "                value = f.Value();",
            "            else",
            "                throw new Exception($\"Unknown type of variable: {VariableName}\");",
            "                ",
            "            bool canTrigger = true;",
            "            if (waitingForFertiliser)",
            "                canTrigger = false;",
            "            if (DoOncePerSowing && hasTriggeredPerSowing)",
            "                canTrigger = false;",
            "                    ",
            "            if (canTrigger && MathUtilities.FloatsAreEqual(value, TriggerValue, 0.1))",
            "            {",
            "                waitingForFertiliser = true;",
            "                hasTriggeredPerSowing = true;",
            "                FertiliseDate = clock.Today.AddDays(NumDaysToWait);",
            "            }",
            "",
            "            if (clock.Today == FertiliseDate)",
            "            {",
            "                waitingForFertiliser = false;",
            "                fertiliser.Apply(Amount: Amount, Type: FertiliserType);",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "VariableName",
              "Value": "[Wheat].Phenology.Stage"
            },
            {
              "Key": "TriggerValue",
              "Value": "2"
            },
            {
              "Key": "NumDaysToWait",
              "Value": "10"
            },
            {
              "Key": "Amount",
              "Value": "30"
            },
            {
              "Key": "FertiliserType",
              "Value": "Urea"
            },
            {
              "Key": "DoOncePerSowing",
              "Value": "True"
            }
          ],
          "Name": "Fertilise when variable reaches threshold",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using Models.Functions;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "using System.Diagnostics;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock clock;",
            "        [Link] Fertiliser fertiliser;",
            "        [Link] Zone zone;",
            "        [Link] IEvent events = null;",
            "        ",
            "        [Separator(\"A model to apply fertiliser days after a variable reaches a threshold\")]",
            "        [Separator(\"Trigger to fertilse on\")]",
            "                 ",
            "        [Description(\"Name of APSIM event\")] ",
            "        public string EventName { get; set; } ",
            "        ",
            "        [Description(\"Number of days to wait after trigger\")] ",
            "        public int NumDaysToWait { get; set; }  ",
            "               ",
            "        [Separator(\"Amount and type to fertilise\")]",
            "                 ",
            "        [Description(\"Amount of fertiliser to be applied (kg /ha)\")] ",
            "        public double Amount { get; set; }  ",
            "               ",
            "        [Description(\"Type of fertiliser to apply? \")] ",
            "        public Fertiliser.Types FertiliserType { get; set; }   ",
            "          ",
            "        private DateTime FertiliseDate;  ",
            "               ",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            events.Subscribe(EventName, OnEvent);",
            "        }",
            "        ",
            "        private void OnEvent(object sender, EventArgs e)",
            "        {",
            "            FertiliseDate = clock.Today.AddDays(NumDaysToWait);",
            "        }               ",
            "               ",
            "        [EventSubscribe(\"DoManagementCalculations\")]",
            "        private void OnDoManagementCalculations(object sender, EventArgs e)",
            "        {",
            "            if (clock.Today == FertiliseDate)",
            "               fertiliser.Apply(Amount: Amount, Type: FertiliserType);",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "EventName",
              "Value": "[Wheat].Phenology.PlantEmerged"
            },
            {
              "Key": "NumDaysToWait",
              "Value": "10"
            },
            {
              "Key": "Amount",
              "Value": "30"
            },
            {
              "Key": "FertiliserType",
              "Value": "Urea"
            }
          ],
          "Name": "Fertilise on event",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": false,
      "GraphsPerPage": 6,
      "Name": "Irrigate",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] Irrigation Irrigation;",
            "        ",
            "        [Separator(\"A component to apply irrigation on one or more dates on every year of the simulation\")]",
            "",
            "        [Description(\"Enter the irrigation dates as dd-mmm with comma separation (any year information entered will be ignored)\")] ",
            "        public string[] IrrigateDates { get; set; }",
            "        ",
            "        [Description(\"Amount of irrigation to be applied (mm)\")] ",
            "        public double Amount { get; set; }",
            "        ",
            "        [Description(\"Depth in the soil to apply the  irrigation (mm)\")] ",
            "        public double Depth { get; set; }",
            "        ",
            "        [Description(\"Efficiency of irrigation (0-1)\")] ",
            "        public double Efficiency { get; set; }",
            "        ",
            "        [Description(\"Will the irrigation runoff?\")] ",
            "        public bool WillRunoff { get; set; }",
            "        ",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            foreach (string ddMMM in IrrigateDates)",
            "            {",
            "                if (DateUtilities.DatesEqual(ddMMM, Clock.Today))",
            "                    Irrigation.Apply(amount: Amount, depth: Depth, efficiency: Efficiency, willRunoff: WillRunoff);",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "IrrigateDates",
              "Value": "24-jan"
            },
            {
              "Key": "Amount",
              "Value": "30"
            },
            {
              "Key": "Depth",
              "Value": "0"
            },
            {
              "Key": "Efficiency",
              "Value": "1"
            },
            {
              "Key": "WillRunoff",
              "Value": "False"
            }
          ],
          "Name": "Irrigate on fixed dates",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Newtonsoft.Json;",
            "using APSIM.Shared.Utilities;",
            "using System.Xml.Serialization;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "using Models.Interfaces;",
            "",
            "",
            "",
            "        ",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class Script : Model",
            "    {",
            "        [Link] private ISummary summary;",
            "        [Link] private Irrigation Irrigation;",
            "        [Link] private Clock Clock;",
            "        [Link] private Soil Soil;",
            "        [Link(IsOptional = true)] private IPlant existingCrop;",
            "        private DateTime StartDate;",
            "        private DateTime EndDate;",
            "        private double TopDUL;",
            "        private double TopLL;",
            "        private int nLayers;",
            "        [Link]",
            "        private IPhysical soilPhysical;",
            "        [Link]",
            "        private ISoilWater waterBalance;",
            "        //Communication to other modules",
            "       ",
            "        //User inputs from properties tab",
            "        [Description(\"Turn irrigation on?\")]",
            "        public bool allowIrrigation { get; set; }",
            "        [Description(\"Start of irrigation season (dd-MMM)\")]",
            "        public string seasonStart { get; set; }",
            "        [Description(\"End of irrigation season (dd-MMM)\")]",
            "        public string seasonEnd { get; set; }",
            "        [Description(\"Season allocation (mm)\")]",
            "        public double seasonsAllocation { get; set; }",
            "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
            "        public double triggerDeficit { get; set; }",
            "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
            "        public double targetDeficit { get; set; }",
            "        [Description(\"Minimum days for irrigation to return\")]",
            "        public double returndays { get; set; }",
            "        [Description(\"Maximum irrigation application (mm/day)\")]",
            "        public double maximumAmount { get; set; }",
            "        [Description(\"Depth to calculate PAWC (mm)\")]",
            "        public double depthPAWC { get; set; }",
            "",
            "        //Class members",
            "        [JsonIgnore] public double TopSWdeficit { get; set; }",
            "        [JsonIgnore] public double TopSWC { get; set; }",
            "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
            "        [JsonIgnore] public double AmountToApply { get; set; }",
            "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
            "        ",
            "        private bool IrrigationIsAllowed { get; set; }",
            "        private bool SeasonIsOpen { get; set; }",
            "        private bool CropIsActive { get; set; }",
            "        private bool IrrigatorIsAvailable { get; set; }",
            "        private bool SoilIsDry { get; set; }",
            "",
            "    ",
            "        //Calculate static soil variables",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {   ",
            "            //Set the season dates",
            "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
            "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
            "            ",
            "            //Can we irrigate at all?",
            "            IrrigationIsAllowed = false; ",
            "            if (allowIrrigation)",
            "                IrrigationIsAllowed = true; ",
            "",
            "            //Calculate soil water variables",
            "            double depthFromSurface = 0.0;",
            "            double fracLayer = 0.0;",
            "            nLayers = soilPhysical.Thickness.Length;",
            "            for (int layer = 0; layer < nLayers; layer++)",
            "            {",
            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
            "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
            "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
            "                depthFromSurface += soilPhysical.Thickness[layer];",
            "                if (depthFromSurface >= depthPAWC)",
            "                    layer = nLayers;",
            "            }",
            "        }",
            "             ",
            "        //Determine daily requirement for irrigation",
            "        [EventSubscribe(\"StartOfDay\")]",
            "        private void OnStartOfDay(object sender, EventArgs e)",
            "        {",
            "            //Can we irrigate today?          ",
            "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
            "            if (!SeasonIsOpen)",
            "                SeasonAppliedAmount = 0;",
            "",
            "            //Is there a crop in the ground that needs irrigation?",
            "            CropIsActive = false;",
            "            if ((existingCrop != null) && (existingCrop.IsAlive))",
            "                CropIsActive = true;",
            "            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))",
            "          ",
            "            //Is the irrigator available?",
            "            IrrigatorIsAvailable = false;",
            "            DaysSinceIrrigation += 1;",
            "            if (DaysSinceIrrigation >= returndays)",
            "                IrrigatorIsAvailable = true;",
            "          ",
            "            //Is the soil dry enough to require irrigation?",
            "            SoilIsDry = false;",
            "            double depthFromSurface = 0.0;",
            "            double fracLayer = 0.0;",
            "            TopSWC = 0.0;",
            "            for (int layer = 0; layer < nLayers; layer++)",
            "            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)",
            "            {",
            "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
            "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
            "                depthFromSurface += soilPhysical.Thickness[layer];",
            "                if (depthFromSurface >= depthPAWC)",
            "                    layer = nLayers;",
            "            }",
            "            ",
            "            TopSWdeficit = TopSWC - TopDUL;",
            "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
            "                SoilIsDry = true;",
            "                ",
            "            //Are all the conditions ratifying irrigation",
            "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
            "            {",
            "                //Lets bloody well irrigate then!!!!",
            "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
            "                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
            "                AmountToApply = Math.Min(AmountToApply,maximumAmount);",
            "                Irrigation.Apply(AmountToApply);",
            "                DaysSinceIrrigation = 0;",
            "                SeasonAppliedAmount += AmountToApply;",
            "            }",
            "        }",
            "        ",
            "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
            "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
            "        {",
            "            bool result = false;",
            "            if (iniDate.DayOfYear < endDate.DayOfYear)",
            "            {",
            "                // period is within one year, ex: summer in the northern hemisphere",
            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
            "                    result = true;",
            "            }",
            "            else",
            "            {",
            "                // period goes over the end of the year, ex: summer in the southern hemisphere",
            "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
            "                    result = true;",
            "            }",
            "            ",
            "            return result;",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "allowIrrigation",
              "Value": "True"
            },
            {
              "Key": "seasonStart",
              "Value": "1-sep"
            },
            {
              "Key": "seasonEnd",
              "Value": "30-mar"
            },
            {
              "Key": "seasonsAllocation",
              "Value": "10000"
            },
            {
              "Key": "triggerDeficit",
              "Value": "50"
            },
            {
              "Key": "targetDeficit",
              "Value": "95"
            },
            {
              "Key": "returndays",
              "Value": "3"
            },
            {
              "Key": "maximumAmount",
              "Value": "30"
            },
            {
              "Key": "depthPAWC",
              "Value": "650"
            }
          ],
          "Name": "AutomaticIrrigation",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Interfaces;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using System.Collections.Generic;",
            "using System.Text;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models;",
            "using System.Xml.Serialization;",
            "using APSIM.Shared.Utilities;",
            "using Models.Interfaces;",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    public class Script : Model",
            "    {",
            "        [Link] private Zone zone;",
            "        [Link] private Irrigation irrigation;",
            "        [Link] private ISoilWater waterBalance;",
            "        [Link] private IPhysical soilPhysical;",
            "        public double FASW { get; set; }",
            "        public double WaterDeficit  { get; set; }",
            "    ",
            "",
            "",
            "        [Description(\"Crop to irrigate\")]",
            "        public IPlant Crop { get; set; }",
            "        ",
            "        [Description(\"Auto irrigation on?\")]",
            "        public bool AutoIrrigationOn { get; set; }",
            "",
            "        [Description(\"Threshold fraction available water (0-1)\")]",
            "        public double FASWThreshold { get; set; }",
            "",
            "        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]",
            "        public double FASWDepth { get; set; }",
            "",
            "        [Description(\"Minimum weeks between irrigations\")]",
            "        public double weeks { get; set; }",
            "",
            "        [Description(\"Minimum days after sowing for first irrigation\")]",
            "        public int afterSowing { get; set; }",
            "",
            "        private double irrigationGap = 0;    // gap between irrigations",
            "",
            "        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void ErrorChecking(object sender, EventArgs args)",
            "        {",
            "            if (Crop == null)",
            "                throw new Exception(\"No crop was specified in script \" + Parent.Name);",
            "        }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            if (AutoIrrigationOn && Crop.IsAlive)",
            "            {",
            "                   irrigationGap += 1;                // increment gap between irrigations",
            "                CalculateFASW();                // calc FASW and WaterDeficit",
            "                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))",
            "                {",
            "                    irrigation.Apply(WaterDeficit, depth: 0);",
            "                    irrigationGap = 0;            // reset",
            "                }",
            "            }",
            "            else",
            "            {",
            "                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown",
            "            }",
            "        }",
            "",
            "        // Calculate the fraction of the potential available sw",
            "        // Calculate the deficit amount from DUL",
            "        private void CalculateFASW()",
            "        {",
            "            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);",
            "            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);",
            "        ",
            "            int nlayr = GetLayerIndex(FASWDepth);",
            "            nlayr = Math.Min(nlayr, soilPhysical.Thickness.Length-1);",
            "            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr",
            "",
            "            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);",
            "",
            "            // note that results may be strange if swdep < ll15",
            "            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])",
            "                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);",
            "",
            "            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])",
            "                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);",
            "            ",
            "            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);",
            "            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);",
            "        }",
            "",
            "        // Get index of the layer that has this depth in it ",
            "        private int GetLayerIndex(double pointDepth)",
            "        {",
            "            double[] cumThickness = soilPhysical.ThicknessCumulative;",
            "            int layerIdx = 0;",
            "            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))",
            "            {",
            "                layerIdx += 1;",
            "            }",
            "",
            "            return layerIdx;",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Crop",
              "Value": ""
            },
            {
              "Key": "AutoIrrigationOn",
              "Value": "True"
            },
            {
              "Key": "FASWThreshold",
              "Value": "0.9"
            },
            {
              "Key": "FASWDepth",
              "Value": "600"
            },
            {
              "Key": "weeks",
              "Value": "3"
            },
            {
              "Key": "afterSowing",
              "Value": "2"
            }
          ],
          "Name": "Automatic irrigation based on water deficit",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] Irrigation Irrigation;",
            "        [Link] Water Water;",
            "",
            "        [Description(\"SoilCrop module\")] ",
            "        public SoilCrop CropSoil { get; set;}",
            "",
            "          [Description(\"Plant available water to reset at sowing (mm)\")] ",
            "        public double SowPAW { get; set; }",
            "        ",
            "        ///<summary>The deficit (amount of water applied) at sowing.</summary>",
            "        [Units(\"mm\")]",
            "        public double WaterDeficit{ get; set; }",
            "   ",
            "        [EventSubscribe(\"Sowing\")]",
            "        private void OnSowing(object sender, EventArgs e)",
            "        {",
            "            if (CropSoil == null)",
            "                throw new Exception(\"No CropSoil was specified in \" + Name);",
            "            WaterDeficit = SowPAW - CropSoil.PAWmm.Sum();",
            "            if (WaterDeficit > 0)",
            "                Irrigation.Apply(amount: WaterDeficit, depth: 0, efficiency: 1);",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "CropSoil",
              "Value": ""
            },
            {
              "Key": "SowPAW",
              "Value": "180"
            }
          ],
          "Name": "Irrigate to crop PAW at sowing",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using System.Diagnostics;",
            "using Models.Core;",
            "using Models.Interfaces;",
            "using APSIM.Shared.Utilities;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock clock;",
            "        [Link] IWeather weather;",
            "        [Link] Irrigation irrigation;",
            "        [Link] ISummary summary;",
            "        [Link] Physical physical;",
            "        [Link] Water water;",
            "    ",
            "        [Separator(\"All soils\")]",
            "",
            "        [Description(\"Start of irrigation season (dd-mmm)\")] ",
            "        public string IrrigStart { get; set; }",
            "",
            "        [Description(\"End of irrigation season (dd-mmm)\")] ",
            "        public string IrrigEnd { get; set; }",
            "",
            "        [Description(\"Enter the depth to which water deficit is computed (mm)\")] ",
            "        public double SoilDepth { get; set; }",
            "        ",
            "        [Description(\"PAW below which soil is considered 'shallow' (mm)\")] ",
            "        public double CritPAWForShallow { get; set; }",
            "",
            "        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")] ",
            "        public double CritRainToPause { get; set; }",
            "",
            "        [Description(\"Number of days to pause irrigator after critical delay (days)\")] ",
            "        public double DaysToPauseOnCritRain { get; set; }",
            "        ",
            "        [Separator(\"Shallow soils\")]",
            "        ",
            "        [Description(\"Irrigation return period for shallow soils (days)\")] ",
            "        public double IrrigReturnShallow { get; set; }",
            "",
            "        [Description(\"Effective irrigation amount for shallow soils (mm)\")] ",
            "        public double IrrigAmtShallow { get; set; }",
            "",
            "        [Description(\"Percentage of PAW at which to irrigate shallow soils (%)\")] ",
            "        public double PercPAWIrrigDeficitShallow { get; set; }",
            "",
            "        [Description(\"Irrigation efficiency for shallow soils (%)\")] ",
            "        public double IrrigEffShallow { get; set; }",
            "",
            "        [Separator(\"Deep soils\")]",
            "        ",
            "        [Description(\"Irrigation return period for deep soils (days)\")] ",
            "        public double IrrigReturnDeep { get; set; }",
            "",
            "        [Description(\"Effective irrigation amount for deep soils (mm)\")] ",
            "        public double IrrigAmtDeep { get; set; }",
            "",
            "        [Description(\"Percentage of PAW at which to irrigate deep soils (%)\")] ",
            "        public double IrrigDeficitDeep { get; set; }",
            "",
            "        [Description(\"Irrigation efficiency for deep soils (%)\")] ",
            "        public double IrrigEffDeep { get; set; }",
            "",
            "",
            "        // Output variables",
            "        [Units(\"mm\")]",
            "        public double TodayDeficit {get; set; }",
            "         ",
            "        [Units(\"mm\")]",
            "        public double TodayDeficit_nve {get; set; }",
            "         ",
            "        [Units(\"\")]",
            "        public double IrrigDay {get; set; }",
            "         ",
            "        [Units(\"\")]",
            "        public double SoilPAW {get; set; }",
            "         ",
            "        [Units(\"\")]",
            "        public double IrrigDeficit {get; set; }",
            "        ",
            "        [Units(\"\")]",
            "        public double IrrigReturn {get; set; }",
            "        ",
            "        [Units(\"\")]",
            "        public double IrrigAmt {get; set; }",
            "        ",
            "        [Units(\"\")]",
            "        public double IrrigEff {get; set; }",
            "        ",
            "        [Units(\"mm\")]",
            "        public double Rain3 {get; set; }",
            "        ",
            "        [Units(\"mm\")]",
            "        public double[] Rain_3 {get; set; } = new double[3];",
            "        ",
            "        [Units(\"\")]",
            "        public double Days2Pause {get; set; }",
            "",
            "         // private variables",
            "        private double irrigDeficitShallow {get; set; }",
            "",
            "        ",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            IrrigDay = 5000;  // so will reset to 1 on first day",
            "",
            "            Rain3 = 0.0;",
            "            Rain_3[0] = 0.0; Rain_3[1] = 0.0; Rain_3[2] = 0.0;",
            "",
            "            SoilPAW = 0.0;",
            "            double mySoilDepth = 0;",
            "            for (int z = 0; z <= physical.Thickness.Length - 1; z++)",
            "            {",
            "                mySoilDepth = mySoilDepth + physical.Thickness[z];",
            "                if (mySoilDepth <= SoilDepth)",
            "                    SoilPAW = SoilPAW + physical.DULmm[z] - physical.LL15mm[z];",
            "            }",
            "            if (SoilPAW <= CritPAWForShallow)",
            "            {",
            "                IrrigDeficit = PercPAWIrrigDeficitShallow / (double)100 * SoilPAW;",
            "                IrrigReturn = IrrigReturnShallow;",
            "                IrrigAmt = IrrigAmtShallow;",
            "                IrrigEff = IrrigEffShallow;",
            "                summary.WriteMessage(this, \"Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW, MessageType.Information);",
            "            }",
            "            else",
            "            {",
            "                IrrigDeficit = IrrigDeficitDeep;",
            "                IrrigReturn = IrrigReturnDeep;",
            "                IrrigAmt = IrrigAmtDeep;",
            "                IrrigEff = IrrigEffDeep;",
            "                summary.WriteMessage(this, \"Soil is considered to be deep\", MessageType.Information);",
            "            }",
            "",
            "            summary.WriteMessage(this, $\"Irrigation critical deficit (mm): {IrrigDeficit}\", MessageType.Information);",
            "            summary.WriteMessage(this, $\"        Irrigation return (days): {IrrigReturn}\", MessageType.Information);",
            "            summary.WriteMessage(this, $\"   Irrigation pumped amount (mm): {IrrigAmt}\", MessageType.Information);",
            "            summary.WriteMessage(this, $\"       Irrigation efficiency (%): {IrrigEff}\", MessageType.Information);",
            "        }",
            "        ",
            "        ",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            Rain_3[2] = Rain_3[1];",
            "            Rain_3[1] = Rain_3[0];",
            "            Rain_3[0] = weather.Rain;",
            "            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2];",
            "            if (Rain3 >= CritRainToPause)",
            "                Days2Pause = DaysToPauseOnCritRain;",
            "            else",
            "                Days2Pause = Days2Pause - 1;",
            "",
            "            TodayDeficit = 0.0;",
            "            SoilPAW = 0.0;",
            "            double mySoilDepth = 0;",
            "",
            "            for (int z = 0; z <= physical.Thickness.Length - 1; z++)",
            "            {",
            "                mySoilDepth = mySoilDepth + physical.Thickness[z];",
            "                if (mySoilDepth <= SoilDepth)",
            "                {",
            "                    SoilPAW = SoilPAW + physical.DULmm[z] - physical.LL15mm[z];",
            "                    TodayDeficit = TodayDeficit + physical.DULmm[z] - Math.Min(physical.DULmm[z], water.MM[z]);",
            "                }",
            "            }",
            "            TodayDeficit_nve = -1 * TodayDeficit;",
            "",
            "            if (DateUtilities.WithinDates(IrrigStart, clock.Today, IrrigEnd))",
            "            {",
            "                if (SoilPAW <= CritPAWForShallow)",
            "                {",
            "                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;",
            "                    IrrigReturn = IrrigReturnShallow;",
            "                    IrrigAmt = IrrigAmtShallow;",
            "                    IrrigEff = IrrigEffShallow;",
            "                }",
            "                else",
            "                {",
            "                    IrrigDeficit = IrrigDeficitDeep;",
            "                    IrrigReturn = IrrigReturnDeep;",
            "                    IrrigAmt = IrrigAmtDeep;",
            "                    IrrigEff = IrrigEffDeep;",
            "                }",
            "",
            "                if (Days2Pause < 0.5)",
            "                {",
            "                    IrrigDay = IrrigDay + 1;",
            "                    if (IrrigDay > IrrigReturn)",
            "                        IrrigDay = 1;// and day = 1 is when the irrigation happens",
            "",
            "                    if (TodayDeficit >= IrrigDeficit)",
            "                    {",
            "                        if (IrrigDay == 1)",
            "                            irrigation.Apply(amount: IrrigAmt / (IrrigEff / 100.0));",
            "                    }",
            "                }",
            "            }",
            "        }    ",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "IrrigStart",
              "Value": "1-sep"
            },
            {
              "Key": "IrrigEnd",
              "Value": "30-apr"
            },
            {
              "Key": "SoilDepth",
              "Value": "500"
            },
            {
              "Key": "CritPAWForShallow",
              "Value": "60"
            },
            {
              "Key": "CritRainToPause",
              "Value": "30"
            },
            {
              "Key": "DaysToPauseOnCritRain",
              "Value": "3"
            },
            {
              "Key": "IrrigReturnShallow",
              "Value": "2"
            },
            {
              "Key": "IrrigAmtShallow",
              "Value": "10"
            },
            {
              "Key": "IrrigEffShallow",
              "Value": "100"
            },
            {
              "Key": "IrrigReturnDeep",
              "Value": "4"
            },
            {
              "Key": "IrrigAmtDeep",
              "Value": "20"
            },
            {
              "Key": "IrrigDeficitDeep",
              "Value": "25"
            },
            {
              "Key": "IrrigEffDeep",
              "Value": "100"
            },
            {
              "Key": "PercPAWIrrigDeficitShallow",
              "Value": "0"
            }
          ],
          "Name": "CentrePivot",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "// Applies irrigation into the second soil layer after a crop has been sown(lateral inflow from furrow into adjacent beds)",
            "// Irrigation is applied on a deficit defined by the number of soil layers (depth) and a deficit value [0-1]",
            "// Water applied uses the Irrigation model and is reported in the summary file.",
            "// Local variable returned and available for reporting is: applied_furrow_irrigation",
            "",
            "using Models.Interfaces;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using System.Collections.Generic;",
            "using System.Text;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using System.Xml.Serialization;",
            "using APSIM.Shared.Utilities;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        // Links",
            "        [Link] Clock clock;",
            "        [Link] Irrigation Irrigation;",
            "        [Link] Soil Soil;",
            "        [Link] IPhysical soilPhysical;",
            "        [Link] ISoilWater waterBalance;",
            "",
            "        // Fields",
            "        public double SW_now;",
            "        public double CLL_now;",
            "        public double SW_full;",
            "",
            "        // Properties",
            "        [Description(\"Number of soil layers used in calculating SW deficit\")]",
            "        public int asw_depth { get; set; } // Change to int for layer count",
            "        [Description(\"Fraction of ASW below which irrigation is applied (0-1.0)\")]",
            "        public double crit_fr_asw { get; set; } // Critical fraction of available soil water before applying irrigation",
            "        [Description(\"The earliest date irrigation will be applied (dd-MMM)\")]",
            "        public string IrrigStart { get; set; } // No irrigation will be applied before this date",
            "        [Description(\"The latest date irrigation will be applied (dd-MMM)\")]",
            "        public string IrrigEnd { get; set; } // No irrigation will be applied after this date",
            "",
            "        // Output variables",
            "        public double[] inflow_lat { get; set; }",
            "        public double applied_furrow_irrigation { get; set; }",
            "",
            "        // Methods",
            "",
            "        // Calculate static soil variables",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            // Initialize inflow_lat array",
            "            inflow_lat = new double[soilPhysical.DULmm.Length];",
            "        }",
            "",
            "        // Determine daily requirement for irrigation",
            "        [EventSubscribe(\"StartOfDay\")]",
            "        private void OnStartOfDay(object sender, EventArgs e)",
            "        {",
            "            // Is today within the irrigation window?",
            "            if (DateUtilities.WithinDates(IrrigStart, clock.Today, IrrigEnd))",
            "            {",
            "                // Calculate soil water variables",
            "                double[] SW_add = new double[soilPhysical.DULmm.Length];",
            "                for (int layer = 0; layer < asw_depth; layer++)",
            "                {",
            "                    SW_now += waterBalance.SWmm[layer];",
            "                    CLL_now += soilPhysical.LL15mm[layer];",
            "                    SW_full += (soilPhysical.DULmm[layer] - soilPhysical.LL15mm[layer]);",
            "                    SW_add[layer] = soilPhysical.DULmm[layer] - waterBalance.SWmm[layer];",
            "                }",
            "",
            "                // Is the soil water deficit greater than the critical SW fraction?",
            "                if ((SW_now - CLL_now) <= (SW_full * crit_fr_asw))",
            "                {",
            "                    // Calculate irrigation and apply it",
            "                    for (int layer = 1; layer < asw_depth; layer++)",
            "                    {",
            "                        inflow_lat[layer] = SW_add[layer] + (SW_add[0] / (asw_depth - 1));",
            "                        applied_furrow_irrigation += inflow_lat[layer];",
            "                        Irrigation.Apply(inflow_lat[layer], depth: soilPhysical.Thickness[layer]);",
            "                    }",
            "                }",
            "                else",
            "                {",
            "                    for (int layer = 0; layer < soilPhysical.DULmm.Length; layer++)",
            "                    {",
            "                        inflow_lat[layer] = 0;",
            "                        applied_furrow_irrigation = 0;            ",
            "        \t\t    }",
            "                }",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "}",
            ""
          ],
          "Parameters": [
            {
              "Key": "asw_depth",
              "Value": "0"
            },
            {
              "Key": "crit_fr_asw",
              "Value": "0"
            },
            {
              "Key": "IrrigStart",
              "Value": ""
            },
            {
              "Key": "IrrigEnd",
              "Value": ""
            }
          ],
          "Name": "Furrow Irrigation",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": false,
      "GraphsPerPage": 6,
      "Name": "Soil",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Climate;",
            "using APSIM.Shared.Utilities;",
            "using Models.Soils.Nutrients;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System.Xml.Serialization;",
            "using System;",
            "using System.Linq;",
            "using Models.AgPasture;",
            "using Models.Interfaces;",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock clock;",
            "        [Link] ISummary summary;",
            "        [Link] private Swim3 swim;",
            "        //[Link] private PastureSpecies ryegrass;",
            "        //[Link] private SimpleGrazing grazing;",
            "        ",
            "        public enum LowerBCTypeOptions {gradient,seepage,potential,watertable};",
            "",
            "        [Separator(\"Sets the lower boundary condition type (and value if set to 'potential' for SWIM3. The change is applied at the beginning of the first day of the simulation.\")]",
            "        ",
            "        [Description(\"What lower boundary condition is wanted?\")] public LowerBCTypeOptions LowerBCType { get; set; }",
            "",
            "",
            "        [Display(VisibleCallback = \"IsBCPotentialOrWater\")]",
            "        [Description(\"What should the lower BC potential be set to (should be positive for a watertable) (mm)?\")] public double LowerBCValue { get; set; }",
            "        ",
            "        public bool IsBCPotentialOrWater => LowerBCType == LowerBCTypeOptions.potential || LowerBCType == LowerBCTypeOptions.watertable;",
            "",
            "",
            "",
            "",
            "",
            "        public double SoilWaterStart  { get; set; }",
            "        public double SoilWaterEnd  { get; set; }",
            "",
            "        [EventSubscribe(\"DoDailyInitialisation\")]",
            "        private void DoDailyInitialisation(object sender, EventArgs e)",
            "        {",
            "        }",
            "",
            "        [EventSubscribe(\"DoReportCalculations\")]",
            "        private void DoReportCalculations(object sender, EventArgs e)",
            "        {",
            "        }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void DoDailyCalculations(object sender, EventArgs e)",
            "        {",
            "            if (clock.Today == clock.StartDate)",
            "            {",
            "                summary.WriteMessage(this, \"Script is setting lower boundary condition to \" + LowerBCType, MessageType.Diagnostic);",
            "                if (LowerBCType == LowerBCTypeOptions.gradient)",
            "                    swim.SetLowerBCForGradient(bbcGradient: 0.0);   // in cm/cm (ibbc=0) Note that this is the default setting",
            "                else if (LowerBCType == LowerBCTypeOptions.potential)",
            "                    swim.SetLowerBCForGivenPotential(bbcPotential: LowerBCValue /10.0 );    //  convert to cm (ibbc=1), DUL is -100 cm so values more positive will often result in inflow to the bottom of the soil profile. Input in mm so divide here.",
            "                else if (LowerBCType == LowerBCTypeOptions.seepage)",
            "                    swim.SetLowerBCForSeepage(bbcPotentialSeepage: 0.0);  // in cm (ibbc=3). This is for zero-tension lysimeters",
            "                else if (LowerBCType == LowerBCTypeOptions.watertable)",
            "                    swim.SetLowerBCForSeepage(LowerBCValue / 10.0);  // in cm (ibbc=4). This is for water tables",
            "                else",
            "                    throw new Exception(\"Wrong lower boundary condition type\");",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "LowerBCType",
              "Value": "watertable"
            },
            {
              "Key": "LowerBCValue",
              "Value": "500"
            }
          ],
          "Name": "SWIMSetLowerBC",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Climate;",
            "using APSIM.Shared.Utilities;",
            "using Models.Soils.Nutrients;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System.Xml.Serialization;",
            "using System;",
            "using System.Linq;",
            "using Models.AgPasture;",
            "using Models.Interfaces;",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class Script : Model",
            "    {",
            "        [Link] ISummary summary;",
            "        [Link] private Swim3 swim;",
            "        ",
            "        public enum SurfaceBCOptions { CurveNumber, PowerFunction };",
            "",
            "        [Separator(\"Sets SWIMs surface boundary condition to either a curve number approach or a power function.\")]",
            "        ",
            "",
            "        [Description(\"What surface boundary condition?\")] ",
            "        public SurfaceBCOptions SurfaceBCType { get; set; }",
            "",
            "        [Description(\"Minimum surface storage (mm):\")] ",
            "        [Display(EnabledCallback = \"IsPowerFunction\")] ",
            "        public double MinimumSurfaceStorage { get; set; }",
            "",
            "        [Description(\"Maximum surface storage (mm):\")] ",
            "        [Display(EnabledCallback = \"IsPowerFunction\")] ",
            "        public double MaximumSurfaceStorage { get; set; }",
            "",
            "        [Description(\"Initial surface storage (mm):\")] ",
            "        [Display(EnabledCallback = \"IsPowerFunction\")] ",
            "        public double InitialSurfaceStorage { get; set; }",
            "",
            "        [Description(\"Precipitation constant:\")] ",
            "        [Display(EnabledCallback = \"IsPowerFunction\")] ",
            "        public double PrecipitationConstant { get; set; }",
            "",
            "        [Description(\"Runoff rate factor:\")] ",
            "        [Display(EnabledCallback = \"IsPowerFunction\")] ",
            "        public double RunoffRateFactor { get; set; }",
            "",
            "        [Description(\"Runoff rate power:\")] ",
            "        [Display(EnabledCallback = \"IsPowerFunction\")] ",
            "        public double RunoffRatePower { get; set; }",
            "",
            "        /// <summary></summary>",
            "        public bool IsPowerFunction => SurfaceBCType == SurfaceBCOptions.PowerFunction;",
            "",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void DoDailyInitialisation(object sender, EventArgs e)",
            "        {",
            "            summary.WriteMessage(this, \"Script is setting surface boundary condition to \" + SurfaceBCType, MessageType.Diagnostic);",
            "            if (SurfaceBCType == SurfaceBCOptions.CurveNumber)",
            "                swim.SetSurfaceBCForCurveNumber();",
            "            else if (SurfaceBCType == SurfaceBCOptions.PowerFunction)",
            "                swim.SetSurfaceBCForPowerFunction(minimumSurfaceStorage: 10, ",
            "                                                    maximumSurfaceStorage: 20, ",
            "                                                     initialSurfaceStorage: 15, ",
            "                                                     precipitationConstant: 50, ",
            "                                                     runoffRateFactor: 0.2, ",
            "                                                     runoffRatePower: 2);",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "SurfaceBCType",
              "Value": "CurveNumber"
            },
            {
              "Key": "MinimumSurfaceStorage",
              "Value": "10"
            },
            {
              "Key": "MaximumSurfaceStorage",
              "Value": "20"
            },
            {
              "Key": "InitialSurfaceStorage",
              "Value": "15"
            },
            {
              "Key": "PrecipitationConstant",
              "Value": "50"
            },
            {
              "Key": "RunoffRateFactor",
              "Value": "0.2"
            },
            {
              "Key": "RunoffRatePower",
              "Value": "2"
            }
          ],
          "Name": "SWIMSetSurfaceBC",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Climate;",
            "using APSIM.Shared.Utilities;",
            "using Models.Soils.Nutrients;",
            "using Models.Soils;",
            "using Models.Soils.SoilTemp;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System.Xml.Serialization;",
            "using System;",
            "using Models.AgPasture;",
            "using Models.Interfaces;",
            "using System.Diagnostics;",
            "",
            "// This module estimate the amount of NH3 in the soil and its volatilisation",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class Script : Model",
            "    {",
            "        [Link]",
            "        private IWeather weather;",
            "        ",
            "        [Link]",
            "        private ISoilWater waterBalance;",
            "         ",
            "        [Link]",
            "        private Irrigation irrigation;",
            "",
            "        [Link]",
            "        private Nutrient nutrient;",
            "",
            "        [Link]",
            "        private Swim3 swim;",
            "",
            "        [Link]",
            "        private NFlow hydrolysis;",
            "",
            "        [Link]",
            "        private NFlow nitrification;        ",
            "",
            "        [Link]",
            "        private ISolute nh4;",
            "                ",
            "        [Link]",
            "        private Physical physical;",
            "",
            "        [Link]",
            "        private Chemical chemical;",
            "",
            "        [Link(IsOptional=true)]",
            "        private SoilTemperature soilTemperature;",
            "        ",
            "        [Link(IsOptional=true)]",
            "        private CERESSoilTemperature ceresSoilTemperature;",
            "        ",
            "        // Parameter variables:",
            "        [Separator(\"NH3 volatilisation parameters\")]",
            "        [Description(\"Depth to which NH3 volatilisation is considered (mm):\")]",
            "        public double Depth_for_NH3 { get; set; }",
            "    ",
            "        [Separator(\"Base soil and pH change parameters\")]            ",
            "        [Description(\"The base soil pH for each soil layer:\")]",
            "        public string Soil_pH_base { get; set; }             // The base soil pH, apsim will try to keep to this value, same for all layers",
            "        [Description(\"The CEC for each layer (meq/100g)\")] ",
            "        public string CEC_strng { get; set; }           // The CEC for each layer (meq/100g)",
            "        [Description(\"Soil buffer capacity factor\")] ",
            "        public double k_BC { get; set; }                    // Soil buffer capacity factor ()",
            "        [Description(\"Factor to convert urea hydrolysed into H+ changes\")] ",
            "        public double k_pH_hyd { get; set; }                 // Factor to convert urea hydrolysed into H+ changes ()",
            "        [Description(\"Factor to convert NH4 nitrified into H+ changes\")] ",
            "        public double k_pH_nit { get; set; }                 // Factor to convert NH4 nitrified into H+ changes ()",
            "        [Description(\"Minimum decrease for pH (fraction/day)\")] ",
            "        public double k_pH_x { get; set; }                   // Minimum decrease for pH (fraction/day)",
            "        ",
            "        [Separator(\"Gas exchange parameters\")]",
            "        [Description(\"Factor for soil/atmosphere gas exchange (AFPV/mm):\")] ",
            "        public double k_AFPV { get; set; }                   // Factor to transform potential evaporation in air filled pore volumes that are potential exchanged with to atmosphere",
            "        [Description(\"Fractor for volatilisable NH3, per soil layer (0-1):\")] ",
            "        public string f_NV_strng { get; set; }               // The fraction of potential NH3 volatilisation for each layer that is transpoted to the soil surface ()",
            "",
            "        [Separator(\"Additional limits for volatilisation\")]",
            "        [Description(\"Fraction of total soil NH4 that can be volatilised per day:\")] ",
            "        public double f_AV { get; set; }                     // Fraction of total soil NH4 that can be volatilised per day, limits volatilisation and ensure mass balance ()",
            "        [Description(\"Rain+irrigation below which volatilisation is not limited (mm):\")] ",
            "        public double CritRain1 { get; set; }                // Critial rainfall. Below this volatilisation is not limited by rainfall or irrigation",
            "        [Description(\"Rain+irrigation above which no volatilisation occur (mm):\")] ",
            "        private double CritRain2 { get; set; }                // Critial rainfall. Above this no volatilisation occurs",
            "        ",
            "        // Output variables",
            "        [Units(\"ppm\")]",
            "        public double[] NH3ppm { get; set; }  // The estimated amount of NH3 in the soil (ppm)",
            "",
            "        [Units(\"kgN/ha\")]",
            "        public double[] NH3 { get; set; }               // The estimated amount of NH3 in the soil (kg/ha)",
            "        ",
            "        [Units(\"g/ha\")]",
            "        public double[] NH3Gas { get; set; }             // The estimated amount of NH3 in the soil in gaseous form (g/ha)",
            "    ",
            "        [Units(\"kgN/ha\")]",
            "        public double[] EmissionNH3 { get; set; }      // The estimated amount of NH3 volatilised (kg/ha/day)",
            "    ",
            "        [Units(\"\")]",
            "        public double[] SoilpH { get; set; }                 // dummy soil pH",
            "    ",
            "        [Units(\"kgN/ha\")]",
            "        public double[] NH4Sol { get; set; }           // The amount of NH4 in the soil solution (kg/ha)   ",
            "    ",
            "        [Units(\"oC\")]",
            "        public double[] SoilTemp { get; set; }              // The soil temperature (oC)",
            "",
            "        [Units(\"AFPV/day\")]",
            "        public double PotGasExchangeNH { get; set; }  // The potential soil-atmosphere gas exchange (Air-filled-pore-spaces/day)",
            "    ",
            "        [Units(\"L/m2/day\")]",
            "        public double[] GasExchangeNH { get; set; }   // The volume of gas exchanged (L/m2/day)",
            "        ",
            "        [Units(\"L/m2\")]",
            "        public double[] AirFilledPoreVolume { get; set; } // The volume of air filled pore space in each soil layer (L_air/m2)",
            "    ",
            "        [Units(\"\")]",
            "        public double[] NH3toNHxRatio { get; set; }          // The ratio between NH3 and NHx in the soil solution",
            "    ",
            "        [Units(\"x1000\")]",
            "        public double[] NH3GtoNH3ARatio { get; set; }   // The ratio between NH3 liquide and gas in the soil, times 1000",
            "    ",
            "        [Units(\"\")]",
            "        public double[] pK_NHx { get; set; }                  // The equilibrium constant for NH4-NH3",
            "        ",
            "        [Units(\"\")]",
            "        public double[] pG_NH3 { get; set; }                  // The equilibrium constant for NH3A-NH3G",
            "",
            "        // Internal variables",
            "        private int NH3_z;                           // The layer to consider NH3 volatilization",
            "        private double[] f_NV;                           // The fraction of NH3 transport from each layer",
            "        private double[] Ini_SoilpH;                     // The initial, or base, soil pH",
            "        private double[] SoilCEC;                        // The CEC (mol/kg)",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "        //Debugger.Break();",
            "            SoilpH = new double[waterBalance.Thickness.Length];",
            "            Ini_SoilpH = new double[waterBalance.Thickness.Length];",
            "",
            "            // Split the read values of f_NV into an array",
            "            f_NV = makeArray(f_NV_strng);",
            "            // Split the read values of pH into an array",
            "            Ini_SoilpH = makeArray(Soil_pH_base);",
            "            // Split the read values of CEC into an array",
            "            SoilCEC = makeArray(CEC_strng);",
            "            var oldIni_SoilpH = Ini_SoilpH;",
            "            Ini_SoilpH = new double[waterBalance.Thickness.Length];",
            "            if (oldIni_SoilpH != null)",
            "                Array.Copy(oldIni_SoilpH, Ini_SoilpH, Math.Min(waterBalance.Thickness.Length, oldIni_SoilpH.Length));",
            "            var oldSoilCEC = SoilCEC;",
            "            SoilCEC = new double[waterBalance.Thickness.Length];",
            "            if (oldSoilCEC != null)",
            "                Array.Copy(oldSoilCEC, SoilCEC, Math.Min(waterBalance.Thickness.Length, oldSoilCEC.Length));",
            "            // Assign initial pH values and convert CEC from meq to mol",
            "            for (int z = 0; z < waterBalance.Thickness.Length; z++)",
            "            {",
            "                Ini_SoilpH[z] = Math.Max(0, Ini_SoilpH[z]);",
            "                SoilpH[z] = Ini_SoilpH[z];",
            "                SoilCEC[z] = 0.01 * Math.Max(0.1, SoilCEC[z]);     // mol/kg",
            "            }",
            "    ",
            "            // Identify the layer down to which volatilization is considered",
            "            double Depth_from_surface = 0;",
            "            for (int z = 0; z < waterBalance.Thickness.Length; z++)",
            "            {",
            "                Depth_from_surface = Depth_from_surface + waterBalance.Thickness[z];",
            "                if (Depth_from_surface <= Depth_for_NH3)",
            "                    NH3_z = z;",
            "                else",
            "                    z = waterBalance.Thickness.Length;",
            "            }",
            "",
            "            // verify the bounds of the pH converting factor",
            "            k_pH_hyd = Math.Min(1, Math.Max(0, k_pH_hyd));",
            "            k_pH_nit = Math.Min(1, Math.Max(0, k_pH_nit));",
            "            k_pH_x = Math.Min(1, Math.Max(0, k_pH_x));",
            "            k_BC = Math.Max(0, k_BC);",
            "            var oldF_NV = f_NV;",
            "            f_NV = new double[waterBalance.Thickness.Length];",
            "            if (oldF_NV != null)",
            "                Array.Copy(oldF_NV, f_NV, Math.Min(waterBalance.Thickness.Length, oldF_NV.Length));",
            "            for (int z = 0; z < waterBalance.Thickness.Length; z++)",
            "                f_NV[z] = Math.Min(1, Math.Max(0, f_NV[z]));",
            "    ",
            "            // ----------- NH3 volatilization ---------------------------------------------------",
            "            Console.WriteLine(\"\");",
            "            Console.WriteLine(\"Volatilization will be calculated by manager\");",
            "            Console.WriteLine(\"   Top \" + Depth_for_NH3.ToString() + \"mm are considered,\");",
            "            Console.WriteLine(\"   pH variation is mimicked by dlt_urea_hydrol + dlt_nh4_nitrif\");",
            "            Console.WriteLine(\"\");",
            "        }",
            "",
            "        [EventSubscribe(\"DoManagementCalculations\")]",
            "        private void DoManagementCalculations(object sender, EventArgs e)",
            "        {",
            "            double urea_hydrol;                    // The amount of urea hydrolised (mol/L)",
            "            double nh4_nitrif;                     // The amount of NH4 nitrified (mol/L)",
            "            double dlt_H;                          // Estimated variation of H+ in the soil (mol/L)",
            "            double delta_pH_Hyd = 0;               // Variation in soil pH due to urea hydrolysis",
            "            double delta_pH_Nit = 0;               // Variation in soil pH due to NH4 nitrification",
            "            double delta_pH_x = 0;                 // Minimum decrease in soil pH, to ensure pH returns to base after urea deposition",
            "            double delta_pH_vol = 0;               // Variatin in pH due to volatilisation",
            "            double Beta = 1;                       // The soil buffer capacity ()",
            "            double[] delta_nh4 = new double[waterBalance.Thickness.Length];   // The variation in NH4 content due to volatilisation (kg/ha)",
            "            double RainFactor = 1.0;               // The rain factor",
            "    ",
            "            if (ceresSoilTemperature == null)  // to get the soil temperature from SoilTemp, otherwise use SoilN's:",
            "                SoilTemp = soilTemperature.AverageSoilTemp;",
            "            else",
            "                SoilTemp = ceresSoilTemperature.Value;",
            "    ",
            "            NH3ppm = new double[waterBalance.Thickness.Length];",
            "            NH4Sol = new double[waterBalance.Thickness.Length];",
            "            NH3 = new double[waterBalance.Thickness.Length];",
            "            NH3Gas = new double[waterBalance.Thickness.Length];",
            "            EmissionNH3 = new double[waterBalance.Thickness.Length];",
            "            GasExchangeNH = new double[waterBalance.Thickness.Length];",
            "            AirFilledPoreVolume = new double[waterBalance.Thickness.Length];",
            "            NH3toNHxRatio = new double[waterBalance.Thickness.Length];",
            "            NH3GtoNH3ARatio = new double[waterBalance.Thickness.Length];",
            "            pK_NHx = new double[waterBalance.Thickness.Length];",
            "            pG_NH3 = new double[waterBalance.Thickness.Length];",
            "    ",
            "            // Calc the irrigation factor",
            "            if (weather.Rain + irrigation.IrrigationApplied < CritRain1)",
            "                RainFactor = 1.0;",
            "            else if (weather.Rain + irrigation.IrrigationApplied > CritRain2)",
            "                RainFactor = 0.0;",
            "            else",
            "                RainFactor = (weather.Rain + irrigation.IrrigationApplied - CritRain1) / (double)(CritRain2 - CritRain1);",
            "    ",
            "            // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
            "            // NOTES:",
            "            // The RainFactor accounts for the downwards transport of NH3 gas when water from rain or irrigation is being drained throught the soil.",
            "            // Below RainCrit1, precipitation has no effect, above RainCrit2 volatilisation is zero.  A linear relationship is used between",
            "            // these two limits:",
            "            // ",
            "            // |",
            "            // F   1+                /-----------",
            "            // R a    |               /:",
            "            // a c    |              / :",
            "            // i t    |             /  :",
            "            // n o    |            /   :",
            "            // r    |           /    :",
            "            // |          /     :",
            "            // |         /      :",
            "            // 0+========+-------+--------------> Rain + Irrigation",
            "            // |      Rain    Rain",
            "            // Crit1   Crit2",
            "            // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
            "    ",
            "            var dlt_urea_hydrol = hydrolysis.Value;",
            "            var dlt_rntrf = nitrification.Value;",
            "            double[] conc_water_nh4 = swim.ConcWaterNH4;",
            "            for (int z = 0; z < waterBalance.Thickness.Length; z++)",
            "            {",
            "    ",
            "                // 0-Compute the value of Beta",
            "                Beta = k_BC * physical.BD[z] * SoilCEC[z] / (double)waterBalance.SW[z];",
            "    ",
            "                // 1-Compute the consumption of H+ by urea hydrolysis",
            "                urea_hydrol = dlt_urea_hydrol[z] / (double)(waterBalance.Thickness[z] * 10000);   // kg_urea_N/L_soil",
            "                urea_hydrol = urea_hydrol * 1000 / (double)waterBalance.SW[z];                 // g_urea_N/L_water",
            "                urea_hydrol = urea_hydrol / 14.00674;                     // mol_urea_N/L_water  - All N pools as expresseed in kg_N, so molecular mass is 14",
            "                dlt_H = -2 * urea_hydrol * k_pH_hyd;                      // mol/L",
            "    ",
            "                // 2-Compute changes in soil pH due to urea hydrolysis",
            "                if (dlt_H < 0)",
            "                    delta_pH_Hyd = (14 / (1 + ((14 - SoilpH[z]) / (double)SoilpH[z]) * Math.Pow(10, (dlt_H / (double)Beta)))) - SoilpH[z];",
            "                else",
            "                    delta_pH_Hyd = 0;",
            "                SoilpH[z] = SoilpH[z] + delta_pH_Hyd;",
            "    ",
            "                // 3-Compute the production of H+ by nitrification and its effect on soil pH",
            "                nh4_nitrif = dlt_rntrf[z] / (double)(waterBalance.Thickness[z] * 10000);          // kg_nh4_N/L_soil",
            "                nh4_nitrif = nh4_nitrif * 1000 / (double)waterBalance.SW[z];                   // g_nh4_N/L_water",
            "                nh4_nitrif = nh4_nitrif / 14.0067;                        // mol_nh4_N/L_water  - All N pools as expresseed in kg_N, so molecular mass is 14",
            "                dlt_H = 2 * nh4_nitrif * k_pH_nit;                        // mol/L",
            "                if (dlt_H > 0)",
            "                    delta_pH_Nit = (14 / (1 + ((14 - SoilpH[z]) / (double)SoilpH[z]) * Math.Pow(10, (dlt_H / (double)Beta)))) - SoilpH[z];",
            "                else",
            "                    delta_pH_Nit = 0;",
            "    ",
            "                // 4-Compute soil forced pH change - this is to ensure pH will decline to its base value",
            "                if (SoilpH[z] > Ini_SoilpH[z])",
            "                    delta_pH_x = -(SoilpH[z] - Ini_SoilpH[z]) * k_pH_x;",
            "                else",
            "                    delta_pH_x = 0;",
            "                SoilpH[z] = SoilpH[z] + Math.Min(delta_pH_Nit, delta_pH_x);",
            "    ",
            "                // 5-bound pH between base and 14",
            "                SoilpH[z] = Math.Min(14, Math.Max(Ini_SoilpH[z], SoilpH[z]));",
            "    ",
            "    ",
            "                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
            "                // NOTES:",
            "                // The changes in pH are due to the consumption of H+ as urea is hydrolysed or the production of H+ by nitrification,",
            "                // in theory for each mol of N hydrolised two mols of H+ are consumed, while two mols are produced by nitrification;",
            "                // The k_pH_nit ad k_pH_hyd factors allow to control the extent that H+ is affected by hydrolysis and nitrification,",
            "                // when set to zero there's no effect, while setting it to one causes full theoretical effect",
            "                // The parameter Beta describes the soil buffer capacity, which is a function of CEC, k_BC is used for adjusting the relationship.",
            "                // k_pH_x stablish a minimum rate for pH decay, it mimicks soil buffering and other reactions that bring pH down",
            "                // after urea/urine deposition. Used when nitrification is not enough to bring the pH down.",
            "                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
            "    ",
            "    ",
            "                // 6-compute the NH3 equilibrium factors",
            "                pK_NHx[z] = pK(\"aq\", SoilTemp[z] + 273.15);      // Aqueous equilibrium [NH4 <--> NH3]",
            "                pG_NH3[z] = pK(\"gs\", SoilTemp[z] + 273.15);      // Gaseous equilibrium [NH3_liquid <--> NH3Gas]",
            "    ",
            "                // 7-Calc the proportion of total NHx that is in the form of NH3",
            "                double NH3toNHx = 1 / (1 + Math.Pow(10, (pK_NHx[z] - SoilpH[z])));",
            "                NH3toNHxRatio[z] = NH3toNHx;",
            "    ",
            "                // 8-Calc the amount of NH3 in aqueous solution (original equation uses mol/L, thus the ratio of molecular mass is needed)",
            "                NH3ppm[z] = conc_water_nh4[z] * NH3toNHx * (17.03 / 18.04);      // ppm (ug/cm3_water)",
            "    ",
            "                // 9-Calc the proportion of total NH3 that is in the gaseous form",
            "                double NH3GtoNH3A = 1 / (1 + Math.Pow(10, (pG_NH3[z])));",
            "                NH3GtoNH3ARatio[z] = NH3GtoNH3A * 1000;",
            "    ",
            "                // 10-Calc the amount of NH3 in gaseous form",
            "                NH3Gas[z] = NH3ppm[z] * NH3GtoNH3A;                   // ppm (ug/cm3_air in soil = mg/L)",
            "    ",
            "                // 11-Calc the amount of NH3 in gaseous form and the amount effectivelly lost by volatilization",
            "                PotGasExchangeNH = waterBalance.Eo * k_AFPV;   // air filled pore volumes/day",
            "                AirFilledPoreVolume[z] = (physical.SAT[z] - waterBalance.SW[z]) * waterBalance.Thickness[z];    // L_air/m2",
            "                if (z <= NH3_z)",
            "                {",
            "                    GasExchangeNH[z] = PotGasExchangeNH * AirFilledPoreVolume[z];      // L_air/m2/day",
            "                    GasExchangeNH[z] = GasExchangeNH[z] * RainFactor;",
            "                    if (GasExchangeNH[z] > 0)",
            "                    {",
            "                        EmissionNH3[z] = NH3Gas[z] * GasExchangeNH[z] * f_NV[z];      // mg/m2",
            "                        EmissionNH3[z] = EmissionNH3[z] * 10E+4;                      // mg/ha",
            "                        EmissionNH3[z] = EmissionNH3[z] * 10E-6;                      // kg/ha",
            "                    }",
            "                    else",
            "                        EmissionNH3[z] = 0;",
            "                    // Limit volatilisation to a fraction of NH4 for each layer",
            "                    EmissionNH3[z] = Math.Min(EmissionNH3[z], f_AV * nh4.ppm[z]);",
            "                }",
            "                else",
            "                {",
            "                    GasExchangeNH[z] = 0;",
            "                    EmissionNH3[z] = 0;",
            "                }",
            "    ",
            "    ",
            "                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
            "                // NOTES:",
            "                // To estimate the amount of NH3 volatilised during the day, it is assumed that the amount of NH3 in gaseous form in the",
            "                // beginning of the day represents well the proportion of NHx 'volatilisable'. It is assumed also that the potential evaporation",
            "                // is a good estimator for the gas exchange between soil and atmosphere (this makes volatilisation sensible to temperature and",
            "                // wind).  By scaling the gas exchange to the air filled pore space in the soil, we get volatilisation also sensible to water",
            "                // content, which mimicks the decrease in gas transport when the soil is wet.  Finally a factor (f_NV) is used to limit the",
            "                // contribution of each soil layer to the overall volatilisation (deep layers would volatilise less because NH3 needs to move",
            "                // transport to the surface.",
            "                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
            "    ",
            "    ",
            "                // 12-Compute soil pH change due to volatilisation",
            "                double EmissionNH3ised = EmissionNH3[z] / (double)(waterBalance.Thickness[z] * 10000);  // kg_NH3_N/L_soil",
            "                EmissionNH3ised = EmissionNH3ised * 1000 / (double)waterBalance.SW[z];                      // g_NH3_N/L_water",
            "                EmissionNH3ised = EmissionNH3ised / 14.0067;                           // mol_NH3_N/L_water  - All N pools as expresseed in kg_N, so molecular mass is 14",
            "                dlt_H = EmissionNH3ised;                                                // mol/L",
            "                if (dlt_H > 0)",
            "                    delta_pH_vol = (14 / (1 + ((14 - SoilpH[z]) / (double)SoilpH[z]) * Math.Pow(10, (dlt_H / (double)Beta)))) - SoilpH[z];",
            "                else",
            "                    delta_pH_vol = 0;",
            "    ",
            "                // 13- Calc new pH and bound it between base and 14",
            "                SoilpH[z] = SoilpH[z] + delta_pH_vol;",
            "                SoilpH[z] = Math.Min(14, Math.Max(Ini_SoilpH[z], SoilpH[z]));",
            "    ",
            "                // 14-Transform variables to publishable units",
            "                NH3[z] = NH3ppm[z] * waterBalance.SW[z] / (double)1000;                     // mg/cm3_soil = g/L_soil",
            "                NH3[z] = NH3[z] * waterBalance.Thickness[z] * 10000;                   // g/ha_soil",
            "                NH3[z] = NH3[z] / (double)1000;                                // kg/ha",
            "    ",
            "                NH3Gas[z] = NH3Gas[z] * (physical.SAT[z] - waterBalance.SW[z]) / (double)1000;     // mg/cm3_soil = g/L_soil",
            "                NH3Gas[z] = NH3Gas[z] * waterBalance.Thickness[z] * 10000;           // g/ha_soil",
            "    ",
            "                NH4Sol[z] = conc_water_nh4[z] * waterBalance.SW[z] / (double)1000;         // mg/cm3_soil = g/L_soil",
            "                NH4Sol[z] = NH4Sol[z] * waterBalance.Thickness[z] * 10000;           // g/ha_soil",
            "                NH4Sol[z] = NH4Sol[z] / (double)1000;                        // kg/ha",
            "    ",
            "                // Compute the delta in nh4 amount",
            "                delta_nh4[z] = -EmissionNH3[z];",
            "            }",
            "            ",
            "            nh4.AddKgHaDelta(SoluteSetterType.Other, delta_nh4);",
            "   ",
            "        }",
            "",
            "",
            "",
            "        public double[] makeArray(string ArrayString)",
            "        {",
            "",
            "            // Get the string with values from the user interface and put the values in an numeric array",
            "",
            "            string[] MyArray_string;",
            "            double[] MyArray_single;",
            "            char[] Separator = \" \".ToCharArray();",
            "",
            "            // 1-Split string into array",
            "            MyArray_string = ArrayString.Split(Separator, StringSplitOptions.RemoveEmptyEntries);",
            "",
            "            // 2-convert array into type single",
            "            MyArray_single = new double[MyArray_string.Length - 1 + 1];",
            "            for (int i = 0; i <= MyArray_single.Length - 1; i++)",
            "                MyArray_single[i] = Convert.ToDouble(MyArray_string[i]);",
            "            return MyArray_single;",
            "        }",
            "",
            "        public double pK(string n_species, double Temp)",
            "        {",
            "",
            "            // Calculates the equilibrium constants, ",
            "            // if 'aq' then nh4-NH3 equilibrium in water",
            "            // if 'gs' then gas-liquid equilibrium for NH3",
            "",
            "            double[] a_pK = new[] { 0.09018, -1.69 };",
            "            double[] b_pK = new[] { 2729.92, 1477.7 };",
            "            int sp = 0;",
            "",
            "            if (n_species == \"aq\")",
            "                sp = 0;",
            "            else if (n_species == \"gs\")",
            "                sp = 1;",
            "            return a_pK[sp] + b_pK[sp] / Temp;",
            "        }",
            "    ",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Depth_for_NH3",
              "Value": "50"
            },
            {
              "Key": "Soil_pH_base",
              "Value": "5.7 5.7 5.7 5.3 5.3 5.9 5.9 5.9 6.6 6.6 6.7 6.7 6.7 6.7"
            },
            {
              "Key": "CEC_strng",
              "Value": "28.2 28.2 28.2 21 21 17.3 17.3 17.3 12 12 12.9 12.9 12.9 12.9"
            },
            {
              "Key": "k_BC",
              "Value": "0.03"
            },
            {
              "Key": "k_pH_hyd",
              "Value": "1"
            },
            {
              "Key": "k_pH_nit",
              "Value": "1"
            },
            {
              "Key": "k_pH_x",
              "Value": "0.2"
            },
            {
              "Key": "k_AFPV",
              "Value": "300"
            },
            {
              "Key": "f_NV_strng",
              "Value": "1 1 1 0.3 0"
            },
            {
              "Key": "f_AV",
              "Value": "0.5"
            },
            {
              "Key": "CritRain1",
              "Value": "3"
            }
          ],
          "Name": "SWIMNH3Volatilisation",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Climate;",
            "using APSIM.Shared.Utilities;",
            "using Models.Soils.Nutrients;",
            "using Models.Soils;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "using System.Collections.Generic;",
            "using Models.AgPasture;",
            "using Models.Interfaces;",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock clock;",
            "        [Link] ISummary summary;",
            "        [Link] private Solute[] solutes;",
            "",
            "        private Solute solute;",
            "        private List<DateTime> dates = new List<DateTime>();",
            "        private List<double> values = new List<double>();",
            "",
            "        public enum SetAddType { Set, Add }",
            "",
            "        [Separator(\"Set the amount of solute in the simulation on 1 or more dates. The name of the solute can be specified. You can set the amount of solute or add a delta (kg/ha).\")]",
            "        ",
            "",
            "        [Description(\"Name of solute:\")]",
            "        public string SoluteName { get; set; }",
            "",
            "        [Description(\"Set the value of the solute or add a delta to it?\")]",
            "        public SetAddType SetAdd { get; set; }",
            "",
            "        [Description(\"Dates (csv) for setting (adding to) the solute:\")]",
            "        public string DateCsvString { get; set; }",
            "",
            "        [Description(\"Values (csv) kg/ha:\")]",
            "        public string ValueCsvString { get; set; }",
            "  ",
            "        ",
            "        public double SoluteAdded { get; set; }",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            solute = Array.Find(solutes, s => s.Name.Equals(SoluteName, StringComparison.InvariantCultureIgnoreCase));",
            "            if (solute == null)",
            "                throw new Exception($\"Cannot find solute {SoluteName}\");",
            "        ",
            "            var dateStrings = DateCsvString.Split(\",\", StringSplitOptions.RemoveEmptyEntries);",
            "            foreach (var d in dateStrings)",
            "               dates.Add(DateTime.Parse(d));",
            "",
            "            var valueStrings = ValueCsvString.Split(\",\", StringSplitOptions.RemoveEmptyEntries);",
            "            foreach (var v in valueStrings)",
            "               values.Add(Convert.ToDouble(v));",
            "        }",
            "        ",
            "        ",
            "        [EventSubscribe(\"DoDailyInitialisation\")] private void DoDailyInitialisation(object sender, EventArgs e)",
            "        {",
            "               SoluteAdded = 0.0;",
            "            foreach (var d in dates)",
            "            {",
            "                if (clock.Today == d) ",
            "                {",
            "                    if (SetAdd == SetAddType.Add)",
            "                        solute.AddKgHaDelta(SoluteSetterType.Other, values.ToArray());",
            "                    else",
            "                        solute.SetKgHa(SoluteSetterType.Other, values.ToArray());",
            "                    ",
            "                    SoluteAdded = solute.kgha.Sum();",
            "                }",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "DateCsvString",
              "Value": "1/01/2000"
            },
            {
              "Key": "ValueCsvString",
              "Value": "100,0,0,0,0,0,0,0"
            },
            {
              "Key": "SoluteName",
              "Value": "Br"
            },
            {
              "Key": "SetAdd",
              "Value": "Set"
            }
          ],
          "Name": "SoluteInitialise",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "// This script calculates a *WaterBalance* term (output) that adds together the water balance",
            "// water entering the system (e.g. rain, irrigation) and subtracts the water",
            "// leaving the system (e.g. runoff, drainage, evaporation, plant water uptake). If mass balance",
            "// is maintained, the *WaterBalance* variable should always be zero.   ",
            "",
            "",
            "",
            "",
            "using Models.Climate;",
            "using APSIM.Shared.Utilities;",
            "using Models.Soils.Nutrients;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System.Xml.Serialization;",
            "using System;",
            "using System.Linq;",
            "using Models.AgPasture;",
            "using Models.Interfaces;",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock clock;",
            "        [Link] ISummary summary;",
            "        [Link] IWeather weather;",
            "        [Link] Irrigation irrigation;",
            "        [Link] private ISoilWater waterBalance;",
            "        [Link] private IPlant[] plants;",
            "",
            "  ",
            "                                [Separator(\"This manager checks that water in the simulation balances - that all inputs are accounted for as storage or losses. If the water balance exceeds (high or low) the tolerance then the simulation is crashed.\")]",
            "                                ",
            "                                [Description(\"What water mass balance error is tolerable in the cumulative water balance? (mm /year) (suggest substantially < 1 mm /year)\")] public double WBTolerance { get; set; }",
            "                                ",
            "                                ",
            "        public double WaterBalanceCumulative  { get; set; }",
            "        public double WaterBalanceToday  { get; set; }",
            "",
            "        public double SoilWaterAtInitialisation  { get; set; }",
            "        public double SoilWaterYesterday  { get; set; }",
            "                                public double SoilWaterNow  { get; set; }",
            "",
            "                                public double PlantWaterUptake { get; set; }",
            "",
            "        public double WaterAddedToday  { get; set; }",
            "        public double WaterRemovedToday  { get; set; }",
            "        public double WaterAddedCumulative  { get; set; }",
            "        public double WaterRemovedCumulative  { get; set; }",
            "        ",
            "        public double WBCheck { get; set; }",
            "        ",
            "",
            "        [EventSubscribe(\"DoDailyInitialisation\")]",
            "        private void DoDailyInitialisation(object sender, EventArgs e)",
            "        {",
            "               if (clock.Today == clock.StartDate) ",
            "               // capture the water in and on the soil as a starting point",
            "               // doing this here as need the models to have intialised first",
            "               {",
            "                               SoilWaterAtInitialisation = waterBalance.Pond;",
            "                               for (int i = 0; i < waterBalance.SWmm.Length; i++)",
            "                                               SoilWaterAtInitialisation += waterBalance.SWmm[i];",
            "",
            "                               SoilWaterYesterday = SoilWaterAtInitialisation;                  ",
            "                               WaterAddedCumulative = 0.0;",
            "                               WaterRemovedCumulative = 0.0;",
            "                               SoilWaterNow = 0.0;",
            "               }",
            "               else",
            "               {",
            "                               SoilWaterYesterday = SoilWaterNow;                     // SoilWaterNow holds the value calculated at reporting yesterday",
            "                               WaterAddedToday = 0.0;",
            "                               WaterRemovedToday = 0.0;",
            "               }",
            "                                }",
            "",
            "        [EventSubscribe(\"DoReportCalculations\")]",
            "        private void DoReportCalculations(object sender, EventArgs e)",
            "        {",
            "               // All the WaterBalance variables should be zero. A positive value is a generation of water.",
            "               SoilWaterNow = waterBalance.Pond;",
            "               for (int i = 0; i < waterBalance.SWmm.Length; i++)",
            "                               SoilWaterNow += waterBalance.SWmm[i]; // so all the water stored in or on the soil",
            "",
            "               WaterAddedToday = weather.Rain + irrigation.IrrigationApplied;   // Can there be runon? Probably not but this will throw an error if that ever happens",
            "               WaterAddedCumulative+= WaterAddedToday;",
            "",
            "               WaterRemovedToday = waterBalance.Drainage + waterBalance.Es + waterBalance.Runoff + waterBalance.SubsurfaceDrain;",
            "               PlantWaterUptake = 0.0;",
            "               foreach (var plant in plants)",
            "                               PlantWaterUptake += plant.WaterUptake.Sum();",
            "",
            "               WaterRemovedToday += PlantWaterUptake;",
            "               // Need to add subsurface drainage here",
            "",
            "               WaterRemovedCumulative += WaterRemovedToday;",
            "",
            "               WaterBalanceToday = WaterAddedToday - WaterRemovedToday - (SoilWaterNow - SoilWaterYesterday);",
            "               WaterBalanceCumulative = WaterAddedCumulative - WaterRemovedCumulative - (SoilWaterNow - SoilWaterAtInitialisation);",
            "",
            "               // need to add a warning value and a crash value and make a crash",
            "               double simTimeYears = (clock.Today - clock.StartDate).Days/365.25;",
            "               if (simTimeYears > 0.1)",
            "               {",
            "                               WBCheck = WaterBalanceCumulative * simTimeYears;",
            "                               if (WBCheck > WBTolerance * simTimeYears)",
            "                                               throw new Exception(\"The error in the water balance, \" + WaterBalanceCumulative + \", exceeded the specified tolerance of \" + WBTolerance * simTimeYears + \". There is likely a problem with SWIM or SoilWater.\");",
            "               }",
            "                                }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "WBTolerance",
              "Value": "0.01"
            }
          ],
          "Name": "CalculateRollingWaterBalance",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "using Models.Utilities;",
            "using Models.Surface;",
            "using Models.Functions;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link(Type = LinkType.Path, Path=\"[Nutrient].FOMLignin.Decomposition.Rate.TF\")] private CERESMineralisationTemperatureFactor TFLignin;",
            "        [Link(Type = LinkType.Path, Path=\"[Nutrient].FOMCellulose.Decomposition.Rate.TF\")] private CERESMineralisationTemperatureFactor TFCellulose;",
            "        [Link(Type = LinkType.Path, Path=\"[Nutrient].FOMCarbohydrate.Decomposition.Rate.TF\")] private CERESMineralisationTemperatureFactor TFCarbohydrate;",
            "        [Link(Type = LinkType.Path, Path=\"[Nutrient].Microbial.Decomposition.Rate.TF\")] private CERESMineralisationTemperatureFactor TFMicrobial;",
            "        [Link(Type = LinkType.Path, Path=\"[Nutrient].Humic.Decomposition.Rate.TF\")] private CERESMineralisationTemperatureFactor TFHumic;",
            "        [Link(Type = LinkType.Path, Path=\"[Nutrient].Nitrification.Rate.CERESMineralisationTemperatureFactor\")] private CERESMineralisationTemperatureFactor TFNitrification;",
            "        ",
            "        [Separator(\"WARNING - use with caution and considerable testing. Changing these values invalidates the existing testing in APSIM\")]",
            "        ",
            "        [Description(\"New base temperature for decomposition (oC)\")] public double BaseTemp { get; set; }",
            "        [Description(\"New optimum temperature for decomposition (oC)\")] public double OptTemp { get; set; }",
            "        ",
            "        ",
            "        [Separator(\"To which soil organic matter fractions should the above values apply?\")]",
            "",
            "        [Description(\"Apply these to the FOM Lignin fraction?\")] public bool DoLignin { get; set; }",
            "        [Description(\"Apply these to the FOM Cellulose fraction?\")] public bool DoCellulose { get; set; }",
            "        [Description(\"Apply these to the FOM Carbohydrate fraction?\")] public bool DoCarbohydrate { get; set; }",
            "        [Description(\"Apply these to the Microbial fraction?\")] public bool DoMicrobial { get; set; }",
            "        [Description(\"Apply these to the Humic fraction?\")] public bool DoHumic { get; set; }",
            "        [Description(\"Apply these to the Nitrification rate?\")] public bool DoNitrification { get; set; }",
            "",
            "",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "               if (DoLignin)",
            "               {",
            "                   TFLignin.MineralisationSTBase = BaseTemp;",
            "                TFLignin.MineralisationSTOpt = OptTemp;",
            "            }",
            "",
            "               if (DoCellulose)",
            "               {",
            "                   TFCellulose.MineralisationSTBase = BaseTemp;",
            "                TFCellulose.MineralisationSTOpt = OptTemp;",
            "            }",
            "",
            "               if (DoCarbohydrate)",
            "               {",
            "                   TFCarbohydrate.MineralisationSTBase = BaseTemp;",
            "                TFCarbohydrate.MineralisationSTOpt = OptTemp;",
            "            }",
            "",
            "               if (DoMicrobial)",
            "               {",
            "                   TFMicrobial.MineralisationSTBase = BaseTemp;",
            "                TFMicrobial.MineralisationSTOpt = OptTemp;",
            "            }",
            "",
            "               if (DoHumic)",
            "               {",
            "                   TFHumic.MineralisationSTBase = BaseTemp;",
            "                TFHumic.MineralisationSTOpt = OptTemp;",
            "            }",
            "",
            "               if (DoNitrification)",
            "               {",
            "                   TFNitrification.MineralisationSTBase = BaseTemp;",
            "                TFNitrification.MineralisationSTOpt = OptTemp;",
            "            }",
            "",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "BaseTemp",
              "Value": "0"
            },
            {
              "Key": "OptTemp",
              "Value": "32"
            },
            {
              "Key": "DoLignin",
              "Value": "True"
            },
            {
              "Key": "DoCellulose",
              "Value": "True"
            },
            {
              "Key": "DoCarbohydrate",
              "Value": "True"
            },
            {
              "Key": "DoMicrobial",
              "Value": "True"
            },
            {
              "Key": "DoHumic",
              "Value": "True"
            },
            {
              "Key": "DoNitrification",
              "Value": "True"
            }
          ],
          "Name": "ModifyNutrientSoilTempFunctions",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": false,
      "GraphsPerPage": 6,
      "Name": "Pasture Graze Stock",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "using Models.Surface;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] SurfaceOrganicMatter SOM;",
            "        ",
            "        [Separator(\"Add animal manure to surface organic matter\")]",
            "        [Description(\"Date to add animal manure\")]",
            "        public string ManureDate { get; set; }",
            "        ",
            "        [Description(\"Amount of animal manure to Add (kg/ha)\")]",
            "        public double Amount { get; set; }",
            "",
            "        [Description(\"Manure dry matter proportion (g/g)\")]",
            "        public double MDMP { get; set; }",
            "",
            "        [Description(\"Manure N concentration in dry matter (g/g)\")]",
            "        public double NConc { get; set; }",
            "",
            "",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            if (DateUtilities.WithinDates(ManureDate, Clock.Today, ManureDate))",
            "            {",
            "                SOM.FractionFaecesAdded = MDMP;",
            "                AddFaecesType Data = new AddFaecesType();",
            "                Data.OMWeight = Amount;",
            "                Data.OMN = Amount * NConc;",
            "                SOM.AddFaeces(Data);",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "ManureDate",
              "Value": "1-sep"
            },
            {
              "Key": "Amount",
              "Value": "1000"
            },
            {
              "Key": "MDMP",
              "Value": "1"
            },
            {
              "Key": "NConc",
              "Value": "0.05"
            }
          ],
          "Name": "AddManure on a fixed date",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Interfaces;",
            "using APSIM.Shared.Utilities;",
            "using Models.PMF;",
            "using Models.Soils;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "using Models.Soils.Nutrients;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] private Clock clock;",
            "        [Link] private Fertiliser fertiliser;",
            "        [Link] private ISummary summary;",
            "        [Link] private Soil soil;",
            "        private Nutrient nutrient;",
            "        [Link] private IPhysical soilPhysical;",
            "",
            "",
            "        [Separator(\"Urine will be deposited on the date(s) below\")]",
            "        [Description(\"Apply urine on the same day(s) each year? If no, then must include the year of appliaction below\")]",
            "        public bool EachYear { get; set; }",
            "",
            "        [Description(\"Dates for one or more urine depositions (dd-mmm or dd-mmm-yyyy) as a list with a comma between dates\")]",
            "        public string[] Dates { get; set; }",
            "",
            "        [Separator(\"Urine deposition details\")]",
            "        [Description(\"Depth to which the urine should penetrate (mm)\")]",
            "        public double Depth { get; set; }",
            "",
            "        [Description(\"Amount of urine to apply (kg N /ha) for each deposition\")]",
            "        public double Amount { get; set; }",
            "",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void FindNutrient(object sender, EventArgs e)",
            "        {",
            "            nutrient = this.FindInScope<Nutrient>() as Nutrient;",
            "",
            "            if (nutrient == null)",
            "                throw new Exception(string.Format(\"Error in script {0}: Unable to find nutrient.\", Name));",
            "        }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            if (OnDepositionDate())",
            "            {",
            "                double[] weights = GetLayerWeights();",
            "                            double cumulativeDepth = 0.0;",
            "                            Fertiliser.Types FertiliserType = Fertiliser.Types.UreaN;",
            "                ",
            "                for (int i = 0; i < soilPhysical.Thickness.Length; i++)",
            "               {",
            "                                cumulativeDepth += soilPhysical.Thickness[i];",
            "                                if (weights[i] > 0.0)",
            "                                                fertiliser.Apply(Amount * weights[i], FertiliserType, cumulativeDepth - (soilPhysical.Thickness[i] / 2.0) );  ",
            "                            }",
            "                            summary.WriteMessage(this, \"Urine deposition of \" + Amount + \" kg N /ha to a depth of \" + Depth + \" mm\", MessageType.Information); ",
            "            }",
            "        }",
            "",
            "        /// <summary>Checks if today's date is one of the specified fertiliser application dates.</summary>",
            "        private bool OnDepositionDate()",
            "        {",
            "            if (EachYear)",
            "                return Dates.Any(d => DateUtilities.DatesEqual(d, clock.Today));",
            "            ",
            "            DateTime[] dates = Dates.Select(d => DateTime.ParseExact(d, \"d-MMM-yyyy\", null)).ToArray();",
            "            return dates.Any(d => SameDate(d, clock.Today));",
            "        }",
            "",
            "        private double[] GetLayerWeights()",
            "        {",
            "            double[] weights = new double[soilPhysical.Thickness.Length];",
            "            double cumDepth = 0;",
            "            for (int i = 0; i < soilPhysical.Thickness.Length; i++)",
            "            {",
            "                cumDepth += soilPhysical.Thickness[i];",
            "                if (cumDepth < Depth)",
            "                    weights[i] = soilPhysical.Thickness[i] / Depth;    // all the layer is within the deposition depth",
            "                else if (cumDepth - soilPhysical.Thickness[i] <= Depth)",
            "                    weights[i] = (Depth - (cumDepth - soilPhysical.Thickness[i])) / Depth;",
            "                else",
            "                    weights[i] = 0;",
            "            }",
            "            return weights;",
            "        }",
            "",
            "        private bool SameDate(DateTime d1, DateTime d2)",
            "        {",
            "            return d1.Year == d2.Year && d1.DayOfYear == d2.DayOfYear;",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Amount",
              "Value": "1000"
            },
            {
              "Key": "EachYear",
              "Value": "False"
            },
            {
              "Key": "Dates",
              "Value": ""
            },
            {
              "Key": "Depth",
              "Value": "0"
            }
          ],
          "Name": "Urine deposition on fixed dates",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using APSIM.Shared.Utilities;",
            "using Models.Utilities;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "using System.Collections.Generic;",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    public class Script : Model",
            "    {",
            "        ",
            "        [Link] Clock clock;",
            "        [Link] private IPlant[] plants;",
            "",
            "        [Separator(\"This manager removes one or more species from the simulation using an 'EndCrop' command on the first day of the simulation\")]",
            "",
            "        [Description(\"Species to remove from the simulation. Comma delimited, case matters, can be blank\")]",
            "        public string[] TheSpecies { get; set; }        ",
            "        ",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            if (clock.Today == clock.StartDate)",
            "\t\t\t\tforeach (var plant in plants)",
            "              \t\tif (TheSpecies != null && TheSpecies.Length > 0 && TheSpecies.Contains(plant.Name))",
            "                \t\tplant.EndCrop();",
            "        }",
            "    }",
            "}",
            "       "
          ],
          "Parameters": [
            {
              "Key": "TheSpecies",
              "Value": "AGPRyegrass, AGPWhiteClover"
            }
          ],
          "Name": "Manage species present",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using APSIM.Shared.Utilities;",
            "using Models.Utilities;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "using System.Collections.Generic;",
            "using Models.Surface;",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    public class Script : Model",
            "    {",
            "        ",
            "        [Link] Clock clock;",
            "        [Link] private IPlant[] plants;",
            "        [Link] SurfaceOrganicMatter surfaceOrganicMatter;",
            "",
            "        [Separator(\"Ending the pasture phase\")]",
            "",
            "        [Description(\"Date to kill the pasture\")]",
            "        public string Date2Kill { get; set; }",
            "",
            "        [Description(\"Species to kill/end in the pasture. Comma delimited, case matters, can be blank\")]",
            "        public string[] TheSpecies2Kill { get; set; }        ",
            "",
            "",
            "        [Separator(\"First cultivation of the field\")]",
            "",
            "        [Description(\"Date for first cultivation\")]",
            "        public string DateCultivation1 { get; set; }",
            "",
            "        [Description(\"Fraction of residues to incorporate\")]",
            "        public double FracResidues1 { get; set; }",
            "",
            "        [Description(\"Depth of cultivation (mm)\")]",
            "        public double CultivationDepth1 { get; set; }",
            "",
            "",
            "        [Separator(\"Second cultivation of the field\")]",
            "",
            "        [Description(\"Date for second cultivation\")]",
            "        public string DateCultivation2 { get; set; }",
            "",
            "        [Description(\"Fraction of residues to incorporate\")]",
            "        public double FracResidues2 { get; set; }",
            "",
            "        [Description(\"Depth of cultivation (mm)\")]",
            "        public double CultivationDepth2 { get; set; }",
            "",
            "",
            "        [Separator(\"Resowing of pasture\")]",
            "",
            "        [Description(\"Days from second cultivation to resowing\")]",
            "        public string DateResow { get; set; }",
            "",
            "        [Description(\"Species to resow. Comma delimited, case matters\")]",
            "        public string[] TheSpecies2Sow { get; set; }        ",
            "",
            "",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "\t\t\t// kill the pasture",
            "            if (DateUtilities.WithinDates(Date2Kill, clock.Today, Date2Kill))",
            "\t\t\t\tforeach (var plant in plants)",
            "              \t\tif (TheSpecies2Kill != null && TheSpecies2Kill.Length > 0 && TheSpecies2Kill.Contains(plant.Name))",
            "                \t\tplant.EndCrop();",
            "",
            "\t\t\t// first cultivation",
            "            if (DateUtilities.WithinDates(DateCultivation1, clock.Today, DateCultivation1))",
            "\t\t\t\tsurfaceOrganicMatter.Incorporate(FracResidues1, CultivationDepth1);",
            "",
            "\t\t\t// second cultivation",
            "            if (DateUtilities.WithinDates(DateCultivation2, clock.Today, DateCultivation2))",
            "\t\t\t\tsurfaceOrganicMatter.Incorporate(FracResidues2, CultivationDepth2);",
            "",
            "            if (DateUtilities.WithinDates(DateResow, clock.Today, DateResow))",
            "\t\t\t\tforeach (var plant in plants)",
            "              \t\tif (TheSpecies2Sow != null && TheSpecies2Sow.Length > 0 && TheSpecies2Sow.Contains(plant.Name))",
            "                \t\tplant.Sow(cultivar: plant.Name, population: 100.0, depth: 5.0, rowSpacing: 75.0);",
            "        }",
            "        ",
            "",
            "",
            "",
            "    }",
            "}",
            "       "
          ],
          "Parameters": [
            {
              "Key": "Date2Kill",
              "Value": "5-Oct-1980"
            },
            {
              "Key": "TheSpecies2Kill",
              "Value": "AGPRyegrass, AGPWhiteClover"
            },
            {
              "Key": "TheSpecies2Sow",
              "Value": "AGPRyegrass, AGPWhiteClover"
            },
            {
              "Key": "FracResidues2",
              "Value": "0.5"
            },
            {
              "Key": "CultivationDepth2",
              "Value": "10"
            },
            {
              "Key": "DateCultivation1",
              "Value": "8-Oct-1980"
            },
            {
              "Key": "FracResidues1",
              "Value": "0.7"
            },
            {
              "Key": "CultivationDepth1",
              "Value": "20"
            },
            {
              "Key": "DateCultivation2",
              "Value": "15-Oct-1980"
            },
            {
              "Key": "DateResow",
              "Value": "17-Oct-1980"
            }
          ],
          "Name": "RenewPasture",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": false,
      "GraphsPerPage": 6,
      "Name": "Other",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils.Nutrients;",
            "using APSIM.Shared.Utilities;",
            "using Models.Surface;",
            "using Models.Utilities;",
            "using Models.Soils.Nutrients;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "using Models.Interfaces;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] private Plant Wheat;",
            "        [Link] private ISoilWater SoilWater;",
            "        [Link] private Nutrient nutrient;",
            "        [Link] private SurfaceOrganicMatter SOM;",
            "        [Link] private Summary Summary;",
            "",
            "        [Description(\"Reset Water? (Yes or No)\")]",
            "        public string ResetWater {get;set;}",
            "",
            "        [Description(\"Reset Soil Nutrients? (Yes or No)\")]",
            "        public string ResetNutrients {get;set;}",
            "",
            "        [Description(\"Reset Surface Organic Matter? (Yes or No)\")]",
            "        public string ResetSOM {get;set;}",
            "",
            "        [EventSubscribe(\"Sowing\")]",
            "        private void OnSowing(object sender, EventArgs e)",
            "        {",
            "            if (ResetWater == \"Yes\")",
            "            {",
            "                Summary.WriteMessage(this, \"Reset Water\", MessageType.Diagnostic);",
            "                SoilWater.Reset();",
            "            }",
            "            if (ResetNutrients == \"Yes\")",
            "            {",
            "                Summary.WriteMessage(this, \"Reset Nutrients\", MessageType.Diagnostic);",
            "                nutrient.Reset();",
            "            }",
            "            if (ResetSOM == \"Yes\")",
            "            {",
            "                Summary.WriteMessage(this, \"Reset Surface OM\", MessageType.Diagnostic);",
            "                SOM.Reset();",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "ResetWater",
              "Value": "Yes"
            },
            {
              "Key": "ResetNutrients",
              "Value": "Yes"
            },
            {
              "Key": "ResetSOM",
              "Value": "Yes"
            }
          ],
          "Name": "Reset on sowing",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils.Nutrients;",
            "using APSIM.Shared.Utilities;",
            "using Models.Surface;",
            "using Models.Utilities;",
            "using Models.Soils.Nutrients;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System;",
            "using System.Linq;",
            "using Models.Interfaces;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] private Clock Clock;",
            "        [Link] private Plant Wheat;",
            "        [Link] private ISoilWater SoilWater;",
            "        [Link] private Nutrient nutrient;",
            "        [Link] private SurfaceOrganicMatter SOM;",
            "        [Link] private Summary Summary;",
            "",
            "        [Description(\"Date to reset on:\")]",
            "        public string ResetDate {get;set;}",
            "        ",
            "        [Description(\"Offset by Days (Negative is Days Before, Positive is Days After):\")]",
            "        public int OffsetDays {get;set;}",
            "",
            "        [Description(\"Reset Water? (Yes or No)\")]",
            "        public string ResetWater {get;set;}",
            "",
            "        [Description(\"Reset Soil Nutrients ? (Yes or No)\")]",
            "        public string ResetNutrients {get;set;}",
            "",
            "        [Description(\"Reset Surface Organic Matter? (Yes or No)\")]",
            "        public string ResetSOM {get;set;}",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            DateTime offsetDate = DateUtilities.GetDate(ResetDate, Clock.Today).AddDays(OffsetDays);",
            "            if (offsetDate.Equals(Clock.Today))",
            "            {",
            "                if (ResetWater == \"Yes\")",
            "                {",
            "                    Summary.WriteMessage(this, \"Reset Water\", MessageType.Diagnostic);",
            "                    SoilWater.Reset();",
            "                }",
            "                if (ResetNutrients == \"Yes\")",
            "                {",
            "                    Summary.WriteMessage(this, \"Reset Nitrogen\", MessageType.Diagnostic);",
            "                    nutrient.Reset();",
            "                }",
            "                if (ResetSOM == \"Yes\")",
            "                {",
            "                    Summary.WriteMessage(this, \"Reset Surface OM\", MessageType.Diagnostic);",
            "                    SOM.Reset();",
            "                }",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "ResetDate",
              "Value": "1-Jan"
            },
            {
              "Key": "ResetWater",
              "Value": "Yes"
            },
            {
              "Key": "ResetNutrients",
              "Value": "Yes"
            },
            {
              "Key": "ResetSOM",
              "Value": "Yes"
            },
            {
              "Key": "OffsetDays",
              "Value": "0"
            }
          ],
          "Name": "Reset on date",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using System.Linq;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] Fertiliser Fertiliser;",
            "        [Link] Summary Summary;",
            "        ",
            "        [Description(\"Country\")]",
            "        public string Country { get; set; }",
            "",
            "        [Description(\"State\")]",
            "        public string State { get; set; }",
            "",
            "        [Description(\"Region\")]",
            "        public string Region { get; set; }",
            "",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "Country",
              "Value": ""
            },
            {
              "Key": "State",
              "Value": ""
            },
            {
              "Key": "Region",
              "Value": ""
            }
          ],
          "Name": "LocationInfo",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System.Diagnostics;",
            "using System.Collections.Generic;",
            "using System.IO;",
            "using System.Data;",
            "using System.Linq;",
            "using System;",
            "using Models.Interfaces;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock clock;",
            "        [Link] IWeather weather;",
            "        [Link] Simulation simulation;",
            "        [Link] Plant plant;",
            "        [Link] Zone zone;",
            "        [Link] Summary summary;",
            "        ",
            "        private DataTable data;",
            "        ",
            "        [Separator(\"To use you will need an excel file with two columns named 'date' and 'a'.\")]",
            "",
            "        [Description(\"Name of file containing weather data to patch:\")]",
            "        public string PatchFileName { get; set; }",
            "        ",
            "        [Description(\"Sheet name:\")]",
            "        public string SheetName {get;set;}",
            "       ",
            "",
            "        //Name of reportable value.",
            "        public double DataValue{ get; set; }",
            "        ",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void OnStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "            // Ensure filename is relative to the directory where the .apsimx file is located.",
            "            string fullFileName = PathUtilities.GetAbsolutePath(PatchFileName, simulation.FileName);",
            "        ",
            "            // Read in data.",
            "            data = ExcelUtilities.ReadExcelFileData(fullFileName, SheetName, true); ",
            "        }",
            "        ",
            "        ",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnSowing(object sender, EventArgs e)",
            "        {",
            "            DataValue = GetValue(clock.Today.ToString(\"MM/dd/yyyy\"));",
            "        }",
            "",
            "        ",
            "        private double GetValue(string searchDate)",
            "        {",
            "            ",
            "            DataView view =  new DataView(data);",
            "            // Here we are querying the dataView for a matching date column with the date we selected.",
            "            view.RowFilter = $\"date = #{searchDate}#\";",
            "            // Check if any matching results are found.",
            "            if (view.Count == 0)",
            "                throw new Exception(\"Can't find date = \" + searchDate);",
            "            else ",
            "                // Here we are converting the value to a number.",
            "                // Modify this to search for name of the column you want the value from. ",
            "                // Here it is named \"a\".",
            "                return Convert.ToDouble(view[0][\"a\"]);",
            "            ",
            "        }",
            "",
            "       ",
            "",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "PatchFileName",
              "Value": "datevalues.xlsx"
            },
            {
              "Key": "SheetName",
              "Value": "Sheet1"
            }
          ],
          "Name": "ValueFromExcel",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}