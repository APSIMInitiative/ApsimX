{
  "$type": "Models.Core.Simulations, Models",
  "Version": 168,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Simulation",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1900-01-01T00:00:00",
          "End": "1900-01-31T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "SummaryFile",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "%root%\\Examples\\WeatherFiles\\Dalby.met",
          "ExcelWorkSheetName": null,
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "SoilArbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Field",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].",
                "[Maize].Phenology.ThermalTime",
                "[Maize].Phenology.CurrentStageName",
                "[Maize].AboveGround.Wt",
                "[Maize].AboveGround.N",
                "[Maize].Grain.Total.Wt*10 as Yield",
                "[Maize].Grain.Protein",
                "[Maize].Grain.Size",
                "[Maize].Grain.Number",
                "[Maize].Grain.Total.Wt",
                "[Maize].Grain.Total.N",
                "[Maize].Total.Wt",
                "[Maize].Structure.FinalLeafNumber",
                "[Maize]."
              ],
              "EventNames": [
                "[Maize].Harvesting"
              ],
              "GroupByVariableName": null,
              "Name": "Report",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Norwin",
              "NearestTown": "Norwin",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
              "ApsoilNumber": "900",
              "Latitude": -27.581836,
              "Longitude": 151.320206,
              "LocationAccuracy": " +/- 20m",
              "YearOfSampling": null,
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
              "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
              "Name": "Soil",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeClay": null,
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "Rocks": null,
                  "Texture": null,
                  "BD": [
                    1.01056473311131,
                    1.07145631083388,
                    1.09393858528057,
                    1.15861335018721,
                    1.17301160318016,
                    1.16287303586874,
                    1.18749547755906
                  ],
                  "AirDry": [
                    0.130250054518252,
                    0.198689390775399,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "LL15": [
                    0.260500109036505,
                    0.248361738469248,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "DUL": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "SAT": [
                    0.588654817693846,
                    0.565676863836273,
                    0.557192986686577,
                    0.532787415023694,
                    0.527354112007486,
                    0.531179986464627,
                    0.521888499034317
                  ],
                  "KS": [
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": null,
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClayMetadata": null,
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "WheatSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "MaizeSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 5.0,
                  "SummerCona": 5.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 5.0,
                  "WinterCona": 5.0,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "PSIDul": -100.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "Name": "SoilWater",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    1.2,
                    0.96,
                    0.6,
                    0.3,
                    0.18,
                    0.12,
                    0.12
                  ],
                  "CarbonUnits": 0,
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.1290323127564,
                    270.3443621919937,
                    163.97214434990104,
                    99.45413288704063,
                    60.32198083112468,
                    36.58713082867487,
                    22.1912165985086
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "PH": [
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "InitialPAWmm": 361.2454283127387,
                  "RelativeTo": "LL15",
                  "FilledFromTop": false,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "Maize",
              "ResourceName": "Maize",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Clock Clock;",
                "        [Link] Fertiliser Fertiliser;",
                "        [Link] Summary Summary;",
                "        ",
                "        ",
                "        [Description(\"Amount of fertiliser to be applied (kg/ha)\")]",
                "        public double Amount { get; set;}",
                "        ",
                "        [Description(\"Crop to be fertilised\")]",
                "        public string CropName { get; set;}",
                "        ",
                "        ",
                "        ",
                "",
                "        [EventSubscribe(\"Sowing\")]",
                "        private void OnSowing(object sender, EventArgs e)",
                "        {",
                "            Model crop = sender as Model;",
                "            if (crop.Name.ToLower()==CropName.ToLower())",
                "                Fertiliser.Apply(Amount: Amount, Type: Fertiliser.Types.NO3N);",
                "        }",
                "        ",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "Amount",
                  "Value": "160"
                },
                {
                  "Key": "CropName",
                  "Value": "maize"
                }
              ],
              "Name": "SowingFertiliser",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils.Nutrients;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.Soils;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "using APSIM.Shared.Utilities;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Plant Maize;",
                "",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            if (Maize.IsReadyForHarvesting)",
                "            {",
                "               Maize.Harvest();",
                "               Maize.EndCrop();    ",
                "            }",
                "        ",
                "        }",
                "        ",
                "    }",
                "}"
              ],
              "Parameters": [],
              "Name": "Harvest",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Interfaces;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.Soils;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "using APSIM.Shared.Utilities;",
                "using Models.Climate;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] private Clock Clock;",
                "        [Link] private Fertiliser Fertiliser;",
                "        [Link] private Summary Summary;",
                "        [Link(ByName = true)] private Plant Maize;",
                "        [Link] private Soil Soil;",
                "        private Accumulator accumulatedRain;",
                "        [Link]",
                "        private ISoilWater waterBalance;",
                "        ",
                "        [Description(\"Start of sowing window (d-mmm)\")]",
                "        public string StartDate { get; set;}",
                "        [Description(\"End of sowing window (d-mmm)\")]",
                "        public string EndDate { get; set;}",
                "        [Description(\"Minimum extractable soil water for sowing (mm)\")]",
                "        public double MinESW { get; set;}",
                "        [Description(\"Accumulated rainfall required for sowing (mm)\")]",
                "        public double MinRain { get; set;}",
                "        [Description(\"Duration of rainfall accumulation (d)\")]",
                "        public int RainDays { get; set;}",
                "        [Description(\"Cultivar to be sown\")]",
                "        [Display(Type=DisplayType.CultivarName, PlantName = \"Wheat\")]",
                "        public string CultivarName { get; set;}",
                "        [Description(\"Sowing depth (mm)\")]",
                "        public double SowingDepth { get; set;}        ",
                "        [Description(\"Row spacing (mm)\")]",
                "        public double RowSpacing { get; set;}    ",
                "        [Description(\"Plant population (/m2)\")]",
                "        public double Population { get; set;}    ",
                "        ",
                "        ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "            accumulatedRain = new Accumulator(this, \"[Weather].Rain\", RainDays);",
                "        }",
                "        ",
                "",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            accumulatedRain.Update();",
                "            ",
                "            if (DateUtilities.WithinDates(StartDate,Clock.Today,EndDate) &&",
                "                !Maize.IsAlive &&",
                "                MathUtilities.Sum(waterBalance.ESW) > MinESW &&",
                "                accumulatedRain.Sum > MinRain)",
                "            {",
                "               Maize.Sow(population:Population, cultivar:CultivarName, depth:SowingDepth, rowSpacing:RowSpacing);    ",
                "            }",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "StartDate",
                  "Value": "1-jan"
                },
                {
                  "Key": "EndDate",
                  "Value": "30-jan"
                },
                {
                  "Key": "MinESW",
                  "Value": "100"
                },
                {
                  "Key": "MinRain",
                  "Value": "0"
                },
                {
                  "Key": "RainDays",
                  "Value": "7"
                },
                {
                  "Key": "CultivarName",
                  "Value": "sc401"
                },
                {
                  "Key": "SowingDepth",
                  "Value": "30"
                },
                {
                  "Key": "RowSpacing",
                  "Value": "1000"
                },
                {
                  "Key": "Population",
                  "Value": "6"
                }
              ],
              "Name": "SowingRule1",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils.Nutrients;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.PMF.Phen;",
                "using Models.PMF.Struct;",
                "",
                "using Models.Functions;",
                "",
                "using Models.Climate;",
                "",
                "using Models.Soils;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "",
                "using APSIM.Shared.Utilities;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Simulation simulation;",
                "        [Link] Clock Clock;",
                "        [Link] Weather Weather;",
                "        [Link] Fertiliser Fertiliser;",
                "        [Link] Plant Maize;",
                "        [Link (ByName = true)] HoldFunction FinalLeafNumber;",
                "        [Link (ByName=true)] NFlow Denitrification; ",
                "",
                "        [Description(\"DummyStringVar\")]",
                "        //public string DummyStringVar { get {return(\"garbage\");} set {Console.WriteLine(\"Dummy set to \" + value);}}",
                "        public string DummyStringVar { get ; set ;}",
                "",
                "",
                "        [Description(\"DummyDoubleVar\")]",
                "        //public double DummyDoubleVar { get {return(-1.0);} set {Console.WriteLine(\"Dummy double set to \" + value.ToString());}}",
                "        public double DummyDoubleVar { get ; set ;}",
                "            ",
                "",
                "        public double cumsumfert {get ; set;}",
                "        ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "           cumsumfert = 0;",
                "        }",
                "        ",
                "        [EventSubscribe(\"EndOfDay\")]",
                "        private void OnEndOfDay(object sender, EventArgs e) {",
                "            var applied = Fertiliser.NitrogenApplied;",
                "            if (applied > 0)",
                "               cumsumfert += applied; ",
                "        }",
                "        ",
                "        public double dap {",
                "        get {",
                "           var daysSinceStart = (Clock.Today.Date - Clock.StartDate).TotalDays;",
                "           return( daysSinceStart);",
                "        }",
                "        set {}}",
                "        ",
                "",
                "        public double istage {",
                "        get {",
                "           if (Maize.IsAlive) {",
                "             return( Maize.Phenology.IndexFromPhaseName(Maize.Phenology.CurrentPhaseName) );",
                "           }",
                "           return (-1);",
                "        }",
                "        set {}}",
                "",
                "        public double vstage {",
                "        get {",
                "           if (Maize.IsAlive) {",
                "              var fln = ((IFunction)simulation.Get(\"[Maize].Structure.FinalLeafNumber\")).Value();",
                "              return( fln );",
                "           }",
                "           return (-1);",
                "        }",
                "        set {}}",
                "",
                "\t\tpublic double dnit {",
                "        get {",
                "           double dnit = Denitrification.Value.Sum();",
                "           return (dnit);",
                "        }",
                "        set {}}",
                "",
                "",
                "",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "DummyStringVar",
                  "Value": "garbage"
                },
                {
                  "Key": "DummyDoubleVar",
                  "Value": "562.5"
                }
              ],
              "Name": "Manager",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils.Nutrients;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.Soils;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "",
                "using APSIM.Shared.Utilities;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class NO3Script : Model",
                "    {",
                "        [Link] Simulation simulation;",
                "        [Link] Clock Clock;",
                "        [Link] Fertiliser Fertiliser;",
                "        [Link] Nutrient Nutrient;",
                "        [Link (ByName = true)] Solute NO3; // a child of ^^",
                "            ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "        }",
                "        public void AddFertiliser(double Amount /* in kg/ha*/)",
                "        {",
                "            Fertiliser.Apply(Amount: Amount, Type: Fertiliser.Types.NO3N);",
                "        }",
                "        public void SetNO3(double Amount /* in kg/ha*/)",
                "        {",
                "           double [] values = new double[Nutrient.NO3.kgha.Length];",
                "           values[0] = Amount * 0.9;",
                "           values[1] = Amount * 0.1;",
                "           // remaining are 0",
                "           ",
                "           Nutrient.NO3.SetKgHa(SoluteSetterType.Other, values);",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [],
              "Name": "NO3Management",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils.Nutrients;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.Soils;",
                "using Models.Surface;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "using Models.Functions;",
                "using MessagePack;",
                "using System.IO;",
                "using System.Collections.Generic;",
                "",
                "using NetMQ;",
                "using NetMQ.Sockets;",
                "",
                "using APSIM.Shared.Utilities;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Clock clock;",
                "        [Link] Simulation simulation;",
                "        [Link] private Summary Summary;",
                "        ",
                "        [Description(\"Identifier\")]",
                "        public string Identifier { get; set;}",
                "",
                "        [NonSerialized]",
                "        private RequestSocket connection = null;",
                "            ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "           if (Identifier == \"<undefined>\") {",
                "               Console.WriteLine(\"Need an endpoint to connect to\");",
                "               Summary.WriteMessage(this, \"Need an endpoint to connect to\", MessageType.Error);",
                "               return;",
                "           } ",
                "           Identifier = \"tcp://\" + Identifier;",
                "           connection = new RequestSocket(Identifier);",
                "           connection.SendFrame(\"connect\");",
                "           var msg = connection.ReceiveFrameString(); ",
                "           if (msg != \"ok\") { throw new Exception(\"Expected ok\"); }",
                "        }",
                "        ",
                "        [EventSubscribe(\"EndOfDay\")]",
                "        private void OnEndOfDay(object sender, EventArgs e)",
                "        {",
                "           if (connection == null) { return; }",
                "           bool moreToDo = true;",
                "           connection.SendFrame(\"paused\");",
                "           while (moreToDo) {",
                "             var msg = connection.ReceiveMultipartMessage();",
                "             //Console.WriteLine(\"Got {0} parts, first = {1}\", msg.FrameCount, msg[0].ConvertToString()); ",
                "             if (msg.FrameCount <= 0) { continue ; }",
                "              ",
                "             var command = msg[0].ConvertToString();",
                "             if (command == \"resume\") { ",
                "                moreToDo = false;",
                "                ",
                "             } else if (command == \"do\" && msg.FrameCount >= 2) {",
                "                 onDoCommand(msg);",
                "                 connection.SendFrame(\"ok\");",
                "                 ",
                "             } else if (command == \"set\" && msg.FrameCount == 3) {",
                "                 // set an apsim variable. ",
                "                 //  arg 1 is the variable path (eg \"[Nutrient].NO3.kgha\"), ",
                "                 //  arg 2 is the packed object                ",
                "                string variableName = MessagePackSerializer.Deserialize<string>( msg[1].Buffer );",
                "                ",
                "                // See what type the apsim variable is",
                "                var myType = simulation.Get(variableName).GetType();",
                "                //Console.WriteLine(\"Got set {0}, my type is {1}\", variableName, myType);",
                "                ",
                "                object value = MessagePackSerializer.Deserialize<object>( msg[2].Buffer );",
                "                //Console.WriteLine(\"Got set {0} of incoming type {1}\", variableName, value.GetType());",
                "                if (value.GetType().IsArray != myType.IsArray) ",
                "                   throw new Exception(\"Array/scalar mismatch for \" + variableName);",
                "                    ",
                "                if (myType.IsArray) {",
                "                   Type myElementType = myType.GetElementType();",
                "                   Object[] values = (value as object[]);",
                "                   if (isNumeric(myElementType)) {",
                "                      var myValues = Array.ConvertAll(values, (e) => (double) e);",
                "                      simulation.Set(variableName, myValues);",
                "                   } else if (isInteger(myElementType)) {",
                "                      var myValues = Array.ConvertAll(values, (e) => (int) e);",
                "                      simulation.Set(variableName, myValues);",
                "                   } else if (isString(myElementType)) {",
                "                      var myValues = Array.ConvertAll(values, (e) => (string) e);",
                "                      simulation.Set(variableName, myValues);",
                "                   } else {",
                "                      throw new Exception(\"Don't know what to do setting a \" + myElementType + \" variable\");",
                "                   }",
                "                ",
                "                   //Type myElementType = myType.GetElementType();",
                "                   //var values = Array.ConvertAll((object[])value, (e) => Convert.ChangeType(e, myElementType)) as System.Array;",
                "                   //Console.WriteLine(\"Doing set {0} of type {1} ({2}) = \", variableName, ",
                "                   //                  values.GetType(), values.GetType().GetElementType(),  ",
                "                   //                  values.GetValue(0).ToString());",
                "                   //simulation.Set(variableName, values);",
                "                } else {",
                "                   simulation.Set(variableName, Convert.ChangeType(value, myType));",
                "                }",
                "                connection.SendFrame(\"ok\");",
                "                ",
                "             } else if (command == \"get\" && msg.FrameCount == 2) {",
                "                string variableName = MessagePackSerializer.Deserialize<string>( msg[1].Buffer );",
                "                object value = simulation.Get(variableName);",
                "                if (value is IFunction function)",
                "                    value = function.Value();",
                "                else if (value != null && (value.GetType().IsArray || value.GetType().IsClass))",
                "                {",
                "                   try",
                "                   {",
                "                       value = ReflectionUtilities.Clone(value);",
                "                   }",
                "                   catch (Exception err)",
                "                   {",
                "                       throw new Exception($\"Cannot report variable \\\"{variableName}\\\": Variable is a non-reportable type: \\\"{value?.GetType()?.Name}\\\".\", err);",
                "                   }",
                "                }",
                "                //Console.WriteLine(\"Got get '{0}' of type '{1}'\", variableName, value?.GetType()); ",
                "             ",
                "                byte[] bytes;",
                "                if (value != null) {",
                "                   bytes = MessagePackSerializer.Serialize(value);",
                "                } else {",
                "                   Console.WriteLine(\"Sending NA\"); ",
                "                   bytes = MessagePackSerializer.Serialize(\"NA\"); // fixme. Probably a better way to do this",
                "                } ",
                "",
                "                connection.SendFrame(bytes);",
                "             } else {",
                "                throw new Exception(\"Expected resume/get/set, not '\" + command + \"'\");",
                "             }",
                "           }",
                "        }",
                "        ",
                "        [Link] Fertiliser Fertiliser;",
                "        [Link] Irrigation Irrigation;",
                "        [Link] SurfaceOrganicMatter SOM;",
                "",
                "        // Handle a command:",
                "        // addFertiliser \"amount\" <double> \"type\" <string>",
                "        // sowCrop \"cropName\" <string> \"cultivarName\" <string> \"population\" <double> \"sowingDepth\" <double> \"rowSpacing\" <double> ",
                "        // harvestCrop \"cropName\" <string>",
                "        // applyIrrigation \"amount\" <double>",
                "        // tillage \"type\" <string : (chisel|disc|planter|burn)>",
                "        // terminate",
                "        ",
                "        public void onDoCommand(NetMQMessage msg) {",
                "             // msg[0] is \"do\"",
                "             var cmd = MessagePackSerializer.Deserialize<string>( msg[1].Buffer);",
                "             if (cmd == \"addFertiliser\") {",
                "                 double FertAmount = 0;",
                "                 string FertType = \"\";",
                "                 for (int i = 2; i < msg.FrameCount; i += 2 ) {",
                "                    var vname = MessagePackSerializer.Deserialize<string>( msg[i].Buffer);",
                "                    if ( vname == \"amount\" ) {",
                "                        FertAmount = MessagePackSerializer.Deserialize<double>( msg[i + 1].Buffer);",
                "                    } else if ( vname == \"type\" ) {",
                "                        FertType = MessagePackSerializer.Deserialize<string>( msg[i + 1].Buffer);",
                "                    }",
                "                 }",
                "                 if (FertAmount > 0) {",
                "                    Console.WriteLine(\"Applying Fertiliser, amt={0} \", FertAmount); ",
                "                    Fertiliser.Apply(Amount: FertAmount, Type: Fertiliser.Types.NO3N /* fixme */);",
                "                 }",
                "             } else if (cmd == \"sowCrop\") {",
                "                 string cropName = \"\";",
                "                 string cultivarName = \"default\";",
                "                 double population = 5;",
                "                 double sowingDepth = 50;",
                "                 double rowSpacing = 1000;",
                "                 for (int i = 2; i < msg.FrameCount; i += 2 ) {",
                "                    var vname = MessagePackSerializer.Deserialize<string>( msg[i].Buffer);",
                "                    if ( vname == \"cropName\" ) {",
                "                        cropName = MessagePackSerializer.Deserialize<string>( msg[i + 1].Buffer);",
                "                    } else  if ( vname == \"cultivarName\" ) {",
                "                        cultivarName = MessagePackSerializer.Deserialize<string>( msg[i + 1].Buffer);",
                "                    } else if ( vname == \"population\" ) {",
                "                        population = MessagePackSerializer.Deserialize<double>( msg[i + 1].Buffer);",
                "                    } else if ( vname == \"sowingDepth\" ) {",
                "                        sowingDepth = MessagePackSerializer.Deserialize<double>( msg[i + 1].Buffer);",
                "                    } else if ( vname == \"rowSpacing\" ) {",
                "                        rowSpacing = MessagePackSerializer.Deserialize<double>( msg[i + 1].Buffer);",
                "                    }",
                "                 }",
                "                 if (cropName != \"\") {",
                "                    Plant crop = FindByPath(\"[\" + cropName + \"]\")?.Value as Plant;",
                "                    if (crop == null) { throw new Exception(\"Cant find a component called  '\" + cropName + \"' to sow\"); } ",
                "                    crop.Sow(population:population, cultivar:cultivarName, depth:sowingDepth, rowSpacing:rowSpacing);",
                "                    Console.WriteLine(\"Sowed a {0} crop\", cropName); ",
                "                 }    ",
                "             } else if (cmd == \"harvestCrop\") {",
                "                 string cropName = \"\";",
                "                 for (int i = 2; i < msg.FrameCount; i += 2 ) {",
                "                    var vname = MessagePackSerializer.Deserialize<string>( msg[i].Buffer);",
                "                    if ( vname == \"cropName\" ) {",
                "                        cropName = MessagePackSerializer.Deserialize<string>( msg[i + 1].Buffer);",
                "                    }",
                "                 }",
                "                 if (cropName != \"\") {",
                "                    Plant crop = FindByPath(\"[\" + cropName + \"]\")?.Value as Plant;",
                "                    if (crop == null) { throw new Exception(\"Cant find a component called  '\" + cropName + \"' to harvest\"); }",
                "                    crop.Harvest();",
                "                    Console.WriteLine(\"Harvested a {0} crop\", cropName); ",
                "                 } ",
                "             } else if (cmd == \"applyIrrigation\") {",
                "                 double irrigAmount = 0;",
                "                 for (int i = 2; i < msg.FrameCount; i += 2 ) {",
                "                    var vname = MessagePackSerializer.Deserialize<string>( msg[i].Buffer);",
                "                    if ( vname == \"amount\" ) {",
                "                        irrigAmount = MessagePackSerializer.Deserialize<double>( msg[i + 1].Buffer);",
                "                    }",
                "                 }",
                "                 if (irrigAmount > 0) {",
                "                    Irrigation.Apply(amount:irrigAmount, willRunoff:true);",
                "                    Console.WriteLine(\"Irrigated {0} \", irrigAmount, \"mm\"); ",
                "                 }",
                "                 ",
                "             } else if (cmd == \"tillage\") {",
                "                 string implementName = \"\";",
                "                 for (int i = 2; i < msg.FrameCount; i += 2 ) {",
                "                    var vname = MessagePackSerializer.Deserialize<string>( msg[i].Buffer);",
                "                    if ( vname == \"type\" ) {",
                "                        implementName = MessagePackSerializer.Deserialize<string>( msg[i + 1].Buffer);",
                "                    }",
                "                 }",
                "                 if ( TillageTypes.ContainsKey(implementName) ) {",
                "                    TillageType tillageType = TillageTypes[implementName];",
                "                    SOM.Incorporate(tillageType.fraction, tillageType.depth);",
                "                    Console.WriteLine(\"Tilled with a {0}\", implementName); ",
                "                 } else {",
                "                    throw new Exception(\"Cant find a tillage method called  '\" + implementName + \"' to till with\");",
                "                 }",
                "             } else if (cmd == \"terminate\") {",
                "                 clock.EndDate = clock.StartDate;",
                "             }",
                "        }",
                "        ",
                "        ",
                "        private class TillageType {",
                "           public double fraction;",
                "           public double depth;",
                "        }",
                "        [NonSerialized]",
                "        private static readonly Dictionary<string, TillageType> TillageTypes = new Dictionary<string, TillageType> { ",
                "           {\"chisel\", new TillageType { fraction = 0.5, depth = 100 }},",
                "           {\"disc\", new TillageType { fraction =  0.5, depth = 200 }},",
                "           {\"planter\", new TillageType { fraction = 0.1, depth = 50 }}, ",
                "           {\"burn\", new TillageType { fraction = 1.0, depth = 0}}",
                "        };",
                "",
                "        [EventSubscribe(\"EndOfSimulation\")]",
                "        private void OnSimulationEnding(object sender, EventArgs e)",
                "        {",
                "            if (connection == null) { return; }",
                "            ",
                "            connection.SendFrame(\"finished\");",
                "            var msg = connection.ReceiveFrameString(); ",
                "            if (msg != \"ok\") { throw new Exception(\"Expected ok at end\"); }",
                "            connection.Close();",
                "            ",
                "            Console.WriteLine(\"Simulation Ending\");",
                "        }",
                "        static bool isNumeric(Type type) {",
                "                         switch (Type.GetTypeCode(type))",
                "                            {",
                "                                case TypeCode.Double:",
                "                                case TypeCode.Single:",
                "                                   return true;",
                "                            }",
                "                            return false;",
                "                        }",
                "                        static bool isInteger(Type type) {",
                "                         switch (Type.GetTypeCode(type))",
                "                            {",
                "                                case TypeCode.Int16:",
                "                                case TypeCode.Int32:",
                "                                case TypeCode.Int64:",
                "                                case TypeCode.UInt16:",
                "                                case TypeCode.UInt32:",
                "                                case TypeCode.UInt64:",
                "                                   return true;",
                "                            }",
                "                            return false;",
                "                        }",
                "                        static bool isString(Type type) {",
                "                         switch (Type.GetTypeCode(type))",
                "                            {",
                "                                case TypeCode.String:",
                "                                   return true;",
                "                            }",
                "                            return false;",
                "                        }       ",
                "   }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "Identifier",
                  "Value": "<undefined>"
                }
              ],
              "Name": "Synchroniser",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}