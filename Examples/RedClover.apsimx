{
  "$type": "Models.Core.Simulations, Models",
  "Version": 171,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Simulation",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "2014-02-01T00:00:00",
          "End": "2016-11-30T00:00:00",
          "Name": "clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "%root%/Examples/WeatherFiles/lincoln.met",
          "ExcelWorkSheetName": "",
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "summaryfile",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "Soil Arbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.ForageDigestibility.Forages, Models",
          "Parameters": [
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "SurfaceOrganicMatter.Residue",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "SurfaceOrganicMatter.Residue",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Leaf",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Leaf",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Petiole",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Petiole",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Stem",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Stem",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Inflorescence",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Inflorescence",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Nodule",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Nodule",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Taproot",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Taproot",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Root",
              "IsLive": true,
              "DigestibilityString": "0",
              "FractionConsumable": 0.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "RedClover.Root",
              "IsLive": false,
              "DigestibilityString": "0",
              "FractionConsumable": 0.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            }
          ],
          "Name": "Forages",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Field",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Core.Folder, Models",
              "ShowInDocs": false,
              "GraphsPerPage": 6,
              "Name": "Management",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Operations, Models",
                  "Operation": [
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-03-20",
                      "Action": "[RedClover].Sow(population: 500, cultivar: \"Colenso\", depth: 5, rowSpacing: 150)",
                      "Line": "2014-03-20 [RedClover].Sow(population: 500, cultivar: \"Colenso\", depth: 5, rowSpacing: 150)"
                    }
                  ],
                  "Name": "Sowing",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Operations, Models",
                  "Operation": [
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-10-31",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-10-31 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-03",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-11-03 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-05",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-11-05 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-07",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-11-07 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-10",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-11-10 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-11",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-11-11 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-12",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-11-12 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-17",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2014-11-17 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-18",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-11-18 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-19",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-11-19 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-24",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-11-24 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-25",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2014-11-25 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-27",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2014-11-27 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-01",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-12-01 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-02",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-12-02 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-04",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-12-04 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-08",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-12-08 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-09",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-12-09 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-12",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-12-12 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-15",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2014-12-15 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-17",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2014-12-17 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-19",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-12-19 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-20",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-12-20 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-21",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-12-21 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-22",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2014-12-22 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-25",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-12-25 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-26",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-12-26 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-27",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2014-12-27 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-28",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2014-12-28 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-29",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-12-29 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-30",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2014-12-30 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-02",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-01-02 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-05",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-01-05 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-08",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-01-08 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-09",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-01-09 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-12",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-01-12 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-13",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-01-13 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-16",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-01-16 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-19",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-01-19 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-20",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-01-20 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-21",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-01-21 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-26",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-01-26 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-27",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-01-27 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-01-29",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-01-29 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-02",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-02-02 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-04",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-02-04 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-05",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-02-05 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-09",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-02-09 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-11",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-02-11 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-12",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-02-12 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-16",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-02-16 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-17",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-02-17 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-18",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-02-18 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-24",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-02-24 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-26",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-02-26 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-27",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-02-27 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-02",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-03-02 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-03",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-03-03 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-05",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-03-05 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-10",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-03-10 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-12",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-03-12 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-13",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-03-13 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-16",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-03-16 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-19",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-03-19 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-20",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-03-20 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-23",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-03-23 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-24",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-03-24 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-26",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-03-26 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-30",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-03-30 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-04-02",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-04-02 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-04-03",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-04-03 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-04-06",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-04-06 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-04-08",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-04-08 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-04-17",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-04-17 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-05-20",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-05-20 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-06-09",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-06-09 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-09-09",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-09-09 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-09-30",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-09-30 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-02",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-10-02 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-06",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-10-06 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-09",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-10-09 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-12",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-10-12 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-13",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-10-13 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-16",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-10-16 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-20",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-10-20 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-21",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-10-21 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-23",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-10-23 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-26",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-10-26 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-27",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-10-27 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-02",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-11-02 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-03",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-11-03 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-04",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-11-04 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-06",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-11-06 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-09",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-11-09 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-11",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-11-11 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-16",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-11-16 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-18",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-11-18 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-20",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-11-20 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-23",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-11-23 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-24",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-11-24 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-25",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-11-25 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-27",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-11-27 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-30",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-11-30 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-01",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-12-01 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-04",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-12-04 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-07",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2015-12-07 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-09",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-12-09 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-10",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-12-10 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-22",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-12-22 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-24",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2015-12-24 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-26",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2015-12-26 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-29",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-12-29 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-31",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2015-12-31 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-01",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-01-01 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-07",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-01-07 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-09",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-01-09 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-11",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-01-11 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-12",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-01-12 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-13",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2016-01-13 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-15",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-01-15 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-21",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-01-21 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-25",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-01-25 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-30",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-01-30 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-02",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-02-02 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-03",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-02-03 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-05",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2016-02-05 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-08",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-02-08 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-11",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-02-11 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-12",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-02-12 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-15",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-02-15 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-16",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-02-16 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-22",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-02-22 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-23",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-02-23 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-25",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-02-25 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-26",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-02-26 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-01",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-03-01 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-02",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-03-02 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-04",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-03-04 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-07",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2016-03-07 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-08",
                      "Action": "[Irrigation].Apply(amount: 4, efficiency: 0.8)",
                      "Line": "2016-03-08 [Irrigation].Apply(amount: 4, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-10",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-03-10 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-14",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-03-14 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-15",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-03-15 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-18",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2016-03-18 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-21",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-03-21 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-22",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2016-03-22 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-23",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2016-03-23 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-03-28",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-03-28 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-04-02",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-04-02 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-04-08",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-04-08 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-05-04",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-05-04 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-08-31",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-08-31 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-09-30",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-09-30 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-10-01",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-10-01 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-10-05",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-10-05 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-10-12",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-10-12 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-10-18",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-10-18 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-10-19",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-10-19 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-10-27",
                      "Action": "[Irrigation].Apply(amount: 10, efficiency: 0.8)",
                      "Line": "2016-10-27 [Irrigation].Apply(amount: 10, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-10-31",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2016-10-31 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-01",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-11-01 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-03",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-11-03 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-08",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-11-08 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-10",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-11-10 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-11",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2016-11-11 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-14",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-11-14 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-21",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-11-21 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-22",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-11-22 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-23",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-11-23 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-24",
                      "Action": "[Irrigation].Apply(amount: 7, efficiency: 0.8)",
                      "Line": "2016-11-24 [Irrigation].Apply(amount: 7, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-28",
                      "Action": "[Irrigation].Apply(amount: 8, efficiency: 0.8)",
                      "Line": "2016-11-28 [Irrigation].Apply(amount: 8, efficiency: 0.8)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-29",
                      "Action": "[Irrigation].Apply(amount: 9, efficiency: 0.8)",
                      "Line": "2016-11-29 [Irrigation].Apply(amount: 9, efficiency: 0.8)"
                    }
                  ],
                  "Name": "IrrigationSchedule",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Operations, Models",
                  "Operation": null,
                  "Name": "NRate",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Operations, Models",
                  "Operation": [
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-10-23",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2014-10-23 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-11-25",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2014-11-25 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2014-12-30",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2014-12-30 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-02-04",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2015-02-04 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-03-10",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2015-03-10 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-04-16",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2015-04-16 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-06-09",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2015-06-09 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-10-06",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2015-10-06 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-11-16",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2015-11-16 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2015-12-16",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2015-12-16 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-01-25",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2016-01-25 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-02-24",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2016-02-24 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-04-09",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2016-04-09 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-05-24",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2016-05-24 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-10-03",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2016-10-03 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2016-11-11",
                      "Action": "[DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)",
                      "Line": "2016-11-11 [DefoliationManager].Script.Defoliate(defoliationType: \"Cut\", amountDM: 40, amountType: \"ResidualDM\", duration: 1)"
                    }
                  ],
                  "Name": "DefoliationSchedule",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "CodeArray": [
                    "// Performs defoliations, or removes biomass, from any existing plant (PMF and/or AgPasture) based on a set of given rules.  ",
                    "// Defoliations can be triggered automatically by this manager or be called from another Script or a Schedule model.",
                    "// Developed by RCichota, last updated in 31/Mar/2019",
                    "",
                    "namespace Models",
                    "{",
                    "using Models.PMF.Interfaces;",
                    "using Models.Soils.Nutrients;",
                    "using System;",
                    "using System.Xml.Serialization;",
                    "using System.Collections.Generic;",
                    "using APSIM.Shared.Utilities;",
                    "using Models.Core;",
                    "using Models.Soils;",
                    "using Models.PMF;",
                    "using Models.Interfaces;",
                    "using Models.PMF.Interfaces;",
                    "using System.Linq;",
                    "using Newtonsoft.Json;",
                    "using Models.ForageDigestibility;",
                    "",
                    "    [Serializable]",
                    "    public class Script : Model",
                    "    {",
                    "        [Link] private Clock clock;",
                    "        [Link] private Zone myZone;",
                    "        [Link] private Soil mySoil;",
                    "        [Link(ByName = true)] private ISolute Urea;",
                    "        [Link] private ISummary mySummary;",
                    "        [Link] private Forages forages;",
                    "        public event BiomassRemovedDelegate BiomassRemoved;",
                    "        private string baseDefoliationType;",
                    "        private string typeOfDefoliation;",
                    "        private string baseAmountType;",
                    "        private string typeOfAmount;",
                    "        private double amountGiven;",
                    "        private double herbageToRemove;",
                    "",
                    "        private int durationOfDefoliation;",
                    "        private int daysDefoliating;",
                    "        private double cumAmountHarvested;",
                    "        private double atZ0;",
                    "        private double atZ1;",
                    "        private double fractionToRemove;",
                    "        private double fractionToResidue;",
                    "        private double speciesHarvestedWt;",
                    "        private double speciesHarvestedN;",
                    "        private double speciesFractionToRemove;",
                    "        [Link]",
                    "        private IPhysical soilPhysical;",
                    "        //> Links to other Apsim models",
                    "        //Auxiliary 'links'",
                    "        private List<Plant> PMFSpecies = new List<Plant>();",
                    "        private List<AgPasture.PastureSpecies> AgPSpecies = new List<AgPasture.PastureSpecies>();",
                    "",
                    "        //> Events raised by this manager",
                    "",
                    "        //> User inputs from properties tab",
                    "        [Separator(\"Generic defoliation management - removes biomass from PMF and AgPasture species, plus residue management\")]",
                    "        [Description(\"Allow this manager to control defoliations? \")]",
                    "        public bool AutomaticManagementIsEnabled { get; set; }",
                    "        [Description(\"Date to start the defoliation management (dd/mm/yyyy): \")]",
                    "        public DateTime DefoliationRotationStartDate { get; set; }",
                    "        [Description(\"Date to end the defoliation management (dd/mm/yyyy): \")]",
                    "        public DateTime DefoliationRotationEndDate { get; set; }",
                    "",
                    "        [Separator(\"Parameters defining how the defoliation is managed\")]",
                    "        [Description(\" Defoliation fractions (e.g. Leaf.FractionLiveToResidue=0.1\")]",
                    "        [Display(Type=DisplayType.MultiLineText)]",
                    "        public string[] DefoliationFractions { get; set; }",
                    "        [Description(\"How the defoliations should be triggered? \")]",
                    "        public DefoliationTriggerTypes DefoliationTriggerType { get; set; }",
                    "        [Description(\"  Minimum number of days between defoliations, used if trigger is an interval: \")]",
                    "        public int IntervalBetweenDefoliations { get; set; }",
                    "        [Description(\"  Minimum standing biomass to start defoliations, used if trigger is DM target(g/m2): \")]",
                    "        public int TargetStandingBiomass { get; set; }",
                    "        [Description(\"Duration of each defoliation event (days): \")]",
                    "        public int DurationOfEachDefoliation { get; set; }",
                    "        [Description(\"Which amount is being defined? \")]",
                    "        public DefoliateAmountTypes RemoveAmountType { get; set; }",
                    "        [Description(\"DM amount to use (g/m2): \")]",
                    "        public double AmountForEachDefoliation { get; set; }",
                    "        [Description(\"For PMF species, allow all biomass to be removed? \")]",
                    "        public bool RemoveAllBiomassIsEnabled { get; set; }",
                    "",
                    "        [Separator(\"Parameters defining the management of the defoliated biomass\")]",
                    "        [Description(\"How much of the DM defoliated is to be removed from the field? \")]",
                    "        public DMRemovalTypes DMRemoveType { get; set; }",
                    "        [Description(\"  Fraction of DM to remove off field, if using UserDefinedFraction (0-1): \")]",
                    "        public double FractionDMToRemove { get; set; }",
                    "        [Description(\"How much of the N defoliated is to be removed from the field? \")]",
                    "        public NRemovalTypes NRemoveType { get; set; }",
                    "        [Description(\"  Fraction of N to remove off field, if using UserDefinedFraction (0-1): \")]",
                    "        public double FractionNToRemove { get; set; }",
                    "        [Description(\"How the non-removed material is returned to the field? \")]",
                    "        public ReturnAsTypes ReturnType { get; set; }",
                    "",
                    "        [Separator(\"Parameters for partitioning non-removed N into urine and dung\")]",
                    "        [Description(\"How the partition of N to dung and urine is defined? \")]",
                    "        public DungNContentTypes NDungType { get; set; }",
                    "        [Description(\"  Proportion of N returned in dung, if using DefineProportion (0-1): \")]",
                    "        public double ProportionN2Dung { get; set; }",
                    "        [Description(\"  The C:N of dung, if using DefineCNratio (typically around 20): \")]",
                    "        public double CNRatioDung { get; set; }",
                    "        [Description(\"Soil depth down to which urine should be applied (mm): \")]",
                    "        public double UrineDepth { get; set; }",
                    "",
                    "        //> Outputs from this manager",
                    "        [JsonIgnore][Units(\"g/m2\")] // Pasture DM defoliated (removed from plants) today",
                    "        public double DefoliatedWt{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // N in the pasture material defoliated today",
                    "        public double DefoliatedN{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // Pasture DM harvested (removed from plants minus direct residue) today",
                    "        public double HarvestedWt{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // N in the pasture material harvested today",
                    "        public double HarvestedN{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // Pasture DM actually removed from the field",
                    "        public double RemovedWt{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // N in the pasture material removed from the field",
                    "        public double RemovedN{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // Pasture DM returned by this manager to the field",
                    "        public double ReturnedWt{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // N in the pasture material returned by this manager to the field",
                    "        public double ReturnedN{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // Non-removed N returned as dung (to SurfaceOM)",
                    "        public double NReturnedInDung{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // Non-removed N returned as urine (soil urea)",
                    "        public double NReturnedInUrine{ get; set; }",
                    "        [JsonIgnore][Units(\"days\")] // Number of days since the end of last defoliation event",
                    "        public int DaysSinceLastDefoliation{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // Total standing aboveground DM before a defoliation",
                    "        public double PreHarvestDM{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // Total standing aboveground DM after a defoliation",
                    "        public double PostHarvestDM{ get; set; }",
                    "        [JsonIgnore][Units(\"g/m2\")] // Total pasture DM harvested over a complete defoliation event",
                    "        public double RotationHarvestedDM{ get; set; }",
                    "",
                    "        //> Internal variables",
                    "        private double[] urineFraction;                  // fraction of urine to be applied in each soil layer",
                    "        // auxiliary boolean",
                    "        private bool aDefoliationHasHappened = false; // flag whether a defoliation has happened in this simulation run",
                    "",
                    "        // auxiliary - lists of species and removal fractions",
                    "        private string[] swardSpeciesName;              // name of each species in the sward",
                    "        private string[] swardSpeciesType;              // type of each species in the sward (PMF or AgPasture)",
                    "        private double[] speciesFraction;              // biomass fraction of harvestable material of each species",
                    "        private Dictionary<string, double> fractions = new Dictionary<string,double>();",
                    "    ",
                    "        [EventSubscribe(\"StartOfSimulation\")]",
                    "        private void OnSimulationCommencing(object sender, EventArgs e)",
                    "        {",
                    "            foreach (var fractionString in DefoliationFractions)",
                    "            {              ",
                    "               string[] tokens = fractionString.Split('=');",
                    "               if (tokens.Length != 2)",
                    "                  throw new Exception($\"Unknown defoliation fraction string: {fractionString}\");            ",
                    "            ",
                    "               fractions.Add(tokens[0], Convert.ToDouble(tokens[1]));",
                    "            }",
                    "",
                    "            // check the type of amount given",
                    "            if (RemoveAmountType == DefoliateAmountTypes.DMToRemove)",
                    "                baseAmountType = \"DMToRemove\";",
                    "            else if (RemoveAmountType == DefoliateAmountTypes.ResidualDM)",
                    "                baseAmountType = \"ResidualDM\";",
                    "            else",
                    "                baseAmountType = \"UseDefoliationFractions\";",
                    "",
                    "            // check the interval between events",
                    "            if (IntervalBetweenDefoliations < 1)",
                    "                throw new Exception(\"The interval between defoliation events must be at least one day\");",
                    "",
                    "            // check the duration for each defoliation",
                    "            if(DurationOfEachDefoliation <= 0)",
                    "                throw new Exception(\"The duration of defoliations cannot be zero or negative!\");",
                    "",
                    "            // check the fraction of defoliated material to remove from the field",
                    "            if (DMRemoveType == DMRemovalTypes.RemoveAll)",
                    "                FractionDMToRemove = 1.0;",
                    "            else if (DMRemoveType == DMRemovalTypes.RemoveNone)",
                    "                FractionDMToRemove = 0.0;",
                    "            else if (DMRemoveType == DMRemovalTypes.BasedOnDigestibility)",
                    "                FractionDMToRemove = -1.0;  // will be calculated dynamically",
                    "            else // DMRemoveType == DMRemovalTypes.UserDefinedFraction",
                    "            {",
                    "                if (FractionDMToRemove < 0.0)",
                    "                    throw new Exception(\"The fraction of DM defoliated to remove from the field cannot be negative!\");",
                    "            }",
                    "",
                    "            // check the fraction of defoliated N to remove from the field",
                    "            if (NRemoveType == NRemovalTypes.RemoveAll)",
                    "                FractionNToRemove = 1.0;",
                    "            else if (NRemoveType == NRemovalTypes.RemoveNone)",
                    "                FractionNToRemove = 0.0;",
                    "            else if (NRemoveType == NRemovalTypes.ProportionalToDM)",
                    "                FractionNToRemove = FractionDMToRemove;",
                    "            else // NRemoveType == NRemovalTypes.UserDefinedFraction",
                    "            {",
                    "                if (FractionNToRemove < 0.0)",
                    "                    throw new Exception(\"The fraction of defoliated N to remove from the field cannot be negative!\");",
                    "            }",
                    "",
                    "            // set up the links to all plant species",
                    "            PMFSpecies = myZone.FindAllChildren<Plant>().ToList();",
                    "            AgPSpecies = myZone.FindAllChildren<AgPasture.PastureSpecies>().ToList();",
                    "",
                    "            int numPlants = PMFSpecies.Count + AgPSpecies.Count;",
                    "            swardSpeciesName = new string[numPlants];",
                    "            swardSpeciesType = new string[numPlants];",
                    "            int i = 0;",
                    "            foreach (Plant species in myZone.FindAllChildren<Plant>().OfType<IModel>().ToList())",
                    "            {",
                    "                swardSpeciesName[i] = species.Name;",
                    "                swardSpeciesType[i] = \"PMF\";",
                    "                i += 1;",
                    "            }",
                    "            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())",
                    "            {",
                    "                swardSpeciesName[i] = species.Name;",
                    "                swardSpeciesType[i] = \"AgPasture\";",
                    "                i += 1;",
                    "            }",
                    "",
                    "            // initialise some variables",
                    "            speciesFraction = new double[numPlants];",
                    "            ",
                    "            DaysSinceLastDefoliation = IntervalBetweenDefoliations;",
                    "            durationOfDefoliation = -1;",
                    "            daysDefoliating = 0;",
                    "            resetMyOutputs();",
                    "",
                    "            // set the fraction of urine for each layer",
                    "            if (ReturnType == ReturnAsTypes.AsDungUrine)",
                    "            {",
                    "                double depthFromSurface = 0.0;",
                    "                for (int layer = 0; layer < soilPhysical.Thickness.Length; layer++)",
                    "                {",
                    "                    depthFromSurface += soilPhysical.Thickness[layer];",
                    "                    if (depthFromSurface >= UrineDepth)",
                    "                    { // bottom layer found",
                    "                        urineFraction = new double[layer + 1];",
                    "                        double distFactor = 1.5;",
                    "                        double totalProp = UrineDepth * Math.Pow(1.0, distFactor) / (distFactor + 1.0);",
                    "                        depthFromSurface = 0.0;",
                    "                        atZ1 = (UrineDepth - depthFromSurface) * Math.Pow(1.0 - depthFromSurface / UrineDepth, distFactor) / (distFactor + 1.0);",
                    "                        for (int z = 0; z < layer+1; z++)",
                    "                        {",
                    "                            atZ0 = atZ1;",
                    "                            depthFromSurface += soilPhysical.Thickness[z];",
                    "                            atZ1 = (UrineDepth - depthFromSurface) * Math.Pow(1.0 - depthFromSurface / UrineDepth, distFactor) / (distFactor + 1);",
                    "                            if (1.0 - (depthFromSurface / UrineDepth) < 0.0)",
                    "                                atZ1 = 0;",
                    "                            urineFraction[z] = (atZ0 - atZ1) / totalProp;",
                    "                        }",
                    "                        layer = soilPhysical.Thickness.Length;",
                    "                    }",
                    "                }",
                    "            }",
                    "",
                    "            // write message in summary",
                    "            mySummary.WriteMessage(this,\" Automatic defoliation manager initialised\", MessageType.Diagnostic);",
                    "            if (AutomaticManagementIsEnabled)",
                    "            {",
                    "                mySummary.WriteMessage(this, \"   Defoliations will happen between \" + DefoliationRotationStartDate.ToShortDateString()",
                    "                                          + \" and \" + DefoliationRotationEndDate.ToShortDateString() + \".\", MessageType.Diagnostic);",
                    "                mySummary.WriteMessage(this, \"   Biomass from the sward will be defoliated simulating a \\\"\" + baseDefoliationType + \"\\\" rotation.\", MessageType.Diagnostic);",
                    "                if (DefoliationTriggerType == DefoliationTriggerTypes.TargetStandingBiomass)",
                    "                    mySummary.WriteMessage(this, \"   Events will happen whenever aboveground biomass surpasses \" + TargetStandingBiomass.ToString(\"#0.0\") + \" g/m2.\", MessageType.Diagnostic);",
                    "                else",
                    "                    mySummary.WriteMessage(this, \"   Events will happen every \" + IntervalBetweenDefoliations + \" days, if there is enough biomass.\", MessageType.Diagnostic);",
                    "                if(baseAmountType == \"ResidualDM\")",
                    "                    mySummary.WriteMessage(this, \"   Removing biomass down to a residual amount of \" + AmountForEachDefoliation.ToString(\"#.0\") + \" g/m2 over \" ",
                    "                                             + DurationOfEachDefoliation + \" days.\", MessageType.Diagnostic);",
                    "                else",
                    "                    mySummary.WriteMessage(this, \"   Removing \" + AmountForEachDefoliation.ToString(\"#.0\") + \" g/m2 of biomass per day over \" ",
                    "                                             + DurationOfEachDefoliation + \" days.\", MessageType.Diagnostic);",
                    "            }",
                    "            else",
                    "            {",
                    "                mySummary.WriteMessage(this,\"   Automatic defoliations are currently disabled, though defoliations can be triggered by another manager\", MessageType.Diagnostic);",
                    "                mySummary.WriteMessage(this,\"   If called, the manager will remove biomass from the sward simulating a \\\"\" + baseDefoliationType + \"\\\" event.\", MessageType.Diagnostic);",
                    "            }",
                    "",
                    "            if(ReturnType == ReturnAsTypes.AsDungUrine)",
                    "            {",
                    "                mySummary.WriteMessage(this,\"   Non-removed material will be returned as dung and urine. Urine added to soil according to proportions: \"",
                    "                + string.Join(\", \",urineFraction), MessageType.Diagnostic);",
                    "            }",
                    "            else",
                    "                mySummary.WriteMessage(this,\"   Non-removed material will be returned as residue.\", MessageType.Diagnostic);",
                    "        }",
                    "",
                    "        [EventSubscribe(\"DoManagement\")]",
                    "        private void OnDoManagement(object sender, EventArgs e)",
                    "        {",
                    "            // check whether we need to continue defoliationg, i.e. within a multi-day defoliation event (need to check this first in the day)",
                    "            if ((daysDefoliating > 0) && (daysDefoliating < durationOfDefoliation))",
                    "            {",
                    "                // reset outputs",
                    "                resetMyOutputs();",
                    "",
                    "                // re-check the amount to defoliate",
                    "                double harvestableBiomass = harvestableSwardBiomass(\"All\", \"Harvestable\");",
                    "                if (typeOfAmount == \"DMToRemove\")",
                    "                {",
                    "                    if(harvestableBiomass > 0.001)",
                    "                        herbageToRemove = Math.Min(harvestableBiomass, (amountGiven - cumAmountHarvested) / (durationOfDefoliation - daysDefoliating));",
                    "                }",
                    "                else if (typeOfAmount == \"ResidualDM\")",
                    "                {",
                    "                    double currentDM = standingSwardBiomassWt;",
                    "                    if (currentDM > amountGiven)",
                    "                        herbageToRemove = Math.Min(harvestableBiomass, (currentDM - amountGiven) / (durationOfDefoliation - daysDefoliating));",
                    "                }",
                    "",
                    "                // remove plant biomass and return residue",
                    "                if (Math.Abs(herbageToRemove) >= 0.001)",
                    "                {",
                    "                    // set biomass removal",
                    "mySummary.WriteMessage(this, \"   Defoliation initialised on DoManagement - \" + clock.Today.Date.ToShortDateString(), MessageType.Diagnostic);",
                    "                    defoliateSward(herbageToRemove, typeOfDefoliation);",
                    "",
                    "                    // return residue or excreta",
                    "                    if(ReturnedWt + ReturnedN > 0.0)",
                    "                    {",
                    "                        if (ReturnType == ReturnAsTypes.AsResidue)",
                    "                            returnResidues();",
                    "                        else",
                    "                            returnExcreta();",
                    "                    }",
                    "",
                    "                    // gather amount removed this event",
                    "                    cumAmountHarvested += HarvestedWt;",
                    "                }",
                    "",
                    "                daysDefoliating += 1;",
                    "            }",
                    "",
                    "            // check whether a defoliation ended yesterday",
                    "            if (daysDefoliating < 0)",
                    "            { // clean up variables",
                    "                resetMyOutputs();",
                    "                daysDefoliating = 0;",
                    "            }",
                    "",
                    "            // check whether automatic defoliations are enabled",
                    "            if (AutomaticManagementIsEnabled)",
                    "            {",
                    "                // check whether we are within the period in which defoliations can happen",
                    "                if ((clock.Today.Date >= DefoliationRotationStartDate.Date) && (clock.Today.Date <= DefoliationRotationEndDate.Date))",
                    "                {",
                    "                    // check whether we should start a defoliation event",
                    "                    if (DefoliationTriggerType == DefoliationTriggerTypes.FixedInterval)",
                    "                    {",
                    "                        if (DaysSinceLastDefoliation == IntervalBetweenDefoliations)",
                    "                            Defoliate(AmountForEachDefoliation, baseAmountType, DurationOfEachDefoliation);",
                    "                    }",
                    "                    else if (DefoliationTriggerType == DefoliationTriggerTypes.TargetInterval)",
                    "                    {",
                    "                        if (DaysSinceLastDefoliation >= IntervalBetweenDefoliations)",
                    "                            Defoliate(AmountForEachDefoliation, baseAmountType, DurationOfEachDefoliation);",
                    "                    }",
                    "                    else  //DefoliationTriggerType == DefoliationTriggerTypes.TargetStandingBiomass",
                    "                    {",
                    "                        if (standingSwardBiomassWt >= TargetStandingBiomass)",
                    "                            Defoliate(AmountForEachDefoliation, baseAmountType, DurationOfEachDefoliation);",
                    "                    }",
                    "                }",
                    "                //// Note: Only the code above, responsible for triggering automatic events, is limited by 'AutomaticManagementIsEnabled'. ",
                    "                ////       The rest of the code is still available to perform one-off defoliations.",
                    "                ////       It can be called from another manager or a schedulle thingy via Defoliate().",
                    "            }",
                    "        }",
                    "",
                    "        [EventSubscribe(\"DoManagementCalculations\")]",
                    "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                    "        {",
                    "            // check whether a defoliation event has just been completed",
                    "            if (daysDefoliating == durationOfDefoliation)",
                    "            {",
                    "                // get amount of biomass remaining and zero counters",
                    "                PostHarvestDM = standingSwardBiomassWt;",
                    "                RotationHarvestedDM = cumAmountHarvested;",
                    "                aDefoliationHasHappened = true;",
                    "                daysDefoliating = -1;",
                    "            }",
                    "",
                    "            // count the days after a defoliation",
                    "            if (aDefoliationHasHappened && (daysDefoliating == 0))",
                    "                DaysSinceLastDefoliation += 1;",
                    "        }",
                    "",
                    "        /// <summary>Sets up a defoliation event.</summary>",
                    "        /// <param name=\"defoliationType\">Type of defoliation (cut, graze, or harvest)</param>",
                    "        /// <param name=\"amountDM\">Amount of biomass to use (g/m2)</param>",
                    "        /// <param name=\"amountType\">How the DM amount is interpreted (toRemove, residual)</param>",
                    "        /// <param name=\"duration\">Number of days to defoliate over</param>",
                    "        public void Defoliate(double amountDM, string amountType, int duration)",
                    "        {",
                    "            // check whether there are plants in the sward that can be defoliated",
                    "            if (swardHasLivingPlants)",
                    "            {",
                    "                // check DM amount given",
                    "                if (amountDM < 0.0)",
                    "                    throw new Exception(\"Amount to defoliate cannot be negative!\");",
                    "                else",
                    "                    amountGiven = amountDM;",
                    "",
                    "                // check the type of amount given",
                    "                if (amountType.ToLower() == \"dmtoremove\")",
                    "                    typeOfAmount = \"DMToRemove\";",
                    "                else if (amountType.ToLower() == \"residualdm\")",
                    "                    typeOfAmount = \"ResidualDM\";",
                    "                else if (amountType.ToLower() == \"usedefoliationfractions\")",
                    "                    typeOfAmount = \"UseDefoliationFractions\";",
                    "                else",
                    "                    throw new Exception(\"Amount type should be \\\"DMToRemove\\\", \\\"ResidualDM\\\", or \\\"UseDefoliationFractions\\\"!\");",
                    "",
                    "                // check duration given",
                    "                if (duration <= 0)",
                    "                    throw new Exception(\"Duration of defoliation cannot be zero or negative!\");",
                    "                else",
                    "                    durationOfDefoliation = duration;",
                    "",
                    "                // check existing biomass and amount to remove",
                    "                PreHarvestDM = standingSwardBiomassWt;",
                    "                herbageToRemove = 0.0;",
                    "                double harvestableBiomass = harvestableSwardBiomass(\"All\", \"Harvestable\");",
                    "                if (typeOfAmount == \"UseDefoliationFractions\")",
                    "                { // amount given is ignored, removal based on fractions",
                    "                    amountGiven = 0.0;",
                    "                    if (harvestableBiomass > 0.0)",
                    "                        herbageToRemove = -1.0;",
                    "",
                    "                    mySummary.WriteMessage(this, \"   Defoliation triggered, removing biomass using the removal fractions (set or default), during \" + durationOfDefoliation + \" days\", MessageType.Diagnostic);",
                    "                }",
                    "                else if (typeOfAmount == \"DMToRemove\")",
                    "                {",
                    "                    if (amountGiven > 0.001)",
                    "                    { // a meaningful amount was given, check whether all can be removed",
                    "                        if (harvestableBiomass > 0.001)",
                    "                            herbageToRemove = Math.Min(harvestableBiomass, amountGiven / durationOfDefoliation);",
                    "",
                    "                        mySummary.WriteMessage(this, \"   Defoliation triggered, attempting to remove \" + amountGiven.ToString(\"#0.0\") + \" g/m2 of biomass over \" + durationOfDefoliation + \" days\", MessageType.Diagnostic);",
                    "                    }",
                    "                }",
                    "                else if (typeOfAmount == \"ResidualDM\")",
                    "                {",
                    "                    // check how much biomass will be removed",
                    "                    if (PreHarvestDM > amountGiven)",
                    "                        herbageToRemove = Math.Min(harvestableBiomass, (PreHarvestDM - amountGiven) / durationOfDefoliation);",
                    "",
                    "                    mySummary.WriteMessage(this, \"   Defoliation triggered, attempting to remove biomass down to \" + amountGiven.ToString(\"#0.0\") + \" g/m2 over \" + durationOfDefoliation + \" days\", MessageType.Diagnostic);",
                    "                }",
                    "",
                    "                // can defoliation begin?",
                    "                if (Math.Abs(herbageToRemove) >= 0.001)",
                    "                {",
                    "                    // set off first defoliation",
                    "mySummary.WriteMessage(this, \"   Defoliation initialised on Defoliate - \" + clock.Today.Date.ToShortDateString(), MessageType.Diagnostic);",
                    "                    defoliateSward(herbageToRemove, typeOfDefoliation);",
                    "",
                    "                    // return residue or excreta",
                    "                    if(ReturnedWt + ReturnedN > 0.0)",
                    "                    {",
                    "                        if (ReturnType == ReturnAsTypes.AsResidue)",
                    "                            returnResidues();",
                    "                        else",
                    "                            returnExcreta();",
                    "                    }",
                    "",
                    "                    // gather values for this event",
                    "                    cumAmountHarvested = HarvestedWt;",
                    "                    daysDefoliating = 1;",
                    "                    DaysSinceLastDefoliation = 0;",
                    "                }",
                    "                else",
                    "                {",
                    "                    // abort command as there is not enough biomass, check interval type",
                    "                    if (DefoliationTriggerType == DefoliationTriggerTypes.FixedInterval)",
                    "                    { // count the event as if it did happen",
                    "                        cumAmountHarvested = 0.0;",
                    "                        daysDefoliating = 1;",
                    "                        DaysSinceLastDefoliation = 0;",
                    "                    }",
                    "",
                    "                    mySummary.WriteMessage(this, \"   Defoliation did not happend because current biomass (\" + PreHarvestDM.ToString(\"#0.0\") + \" g/m2) is too low (total harvestable = \" + harvestableBiomass.ToString(\"#0.0\") + \" g/m2)\", MessageType.Diagnostic);",
                    "                }",
                    "            }",
                    "            else",
                    "            {",
                    "                mySummary.WriteMessage(this, \"   Defoliation did not happend because there is no growing plants in the sward\", MessageType.Diagnostic);",
                    "            }",
                    "        }",
                    "",
                    "        /// <summary>Resets the values of outputs.</summary>",
                    "        private void resetMyOutputs()",
                    "        {",
                    "            DefoliatedWt = 0.0;",
                    "            DefoliatedN = 0.0;",
                    "            HarvestedWt = 0.0;",
                    "            HarvestedN = 0.0;",
                    "            RemovedWt = 0.0;",
                    "            RemovedN = 0.0;",
                    "            ReturnedWt = 0.0;",
                    "            ReturnedN = 0.0;",
                    "            NReturnedInDung = 0.0;",
                    "            NReturnedInUrine = 0.0;",
                    "            RotationHarvestedDM = 0.0;",
                    "        }",
                    "",
                    "        /// <summary>Flags whether there is any living plant in the sward.</summary>",
                    "        private bool swardHasLivingPlants",
                    "        {",
                    "            get",
                    "            {",
                    "                bool result = false;",
                    "                foreach (Plant species in PMFSpecies)",
                    "                       result |= species.IsAlive;",
                    "                foreach (AgPasture.PastureSpecies species in AgPSpecies)",
                    "                       result |= species.IsAlive;",
                    "                return result;",
                    "            }",
                    "        }",
                    "",
                    "        /// <summary>Amount of plant biomass aboveground (g/m2).</summary>",
                    "        private double standingSwardBiomassWt",
                    "        {",
                    "            get",
                    "            {",
                    "                double result = 0.0;",
                    "                foreach (Plant species in PMFSpecies)",
                    "                   result += (double)myZone.Get(species.Name+\".AboveGround.Wt\");",
                    "                foreach (AgPasture.PastureSpecies species in AgPSpecies)",
                    "                    result += species.Standing.Wt*0.1;",
                    "                return result;",
                    "            }",
                    "        }",
                    "",
                    "        /// <summary>Amount of N in plant's biomass aboveground (g/m2).</summary>",
                    "        private double standingSwardBiomassN",
                    "        {",
                    "            get",
                    "            {",
                    "                double result = 0.0;",
                    "                foreach (Plant species in PMFSpecies)",
                    "                   result += (double)myZone.Get(species.Name+\".AboveGround.N\");",
                    "                foreach (AgPasture.PastureSpecies species in AgPSpecies)",
                    "                    result += species.Standing.N*0.1;",
                    "                return result;",
                    "            }",
                    "        }",
                    "",
                    "        /// <summary>Amount of plant biomass from all organs available for defoliation (g/m2).</summary>",
                    "        /// <remarks>Assumes that organs with a BiomassRemoval.FractionToRemove > 0 are harvestable.",
                    "        /// For AgPasture, harvestable is based on minimum DM.</remarks>",
                    "        /// <param name=\"plantName\">The name of the plant to retrieve its biomass</param>",
                    "        /// <param name=\"fractionType\">The type of fraction to use (harvestable or total)</param>",
                    "        private double harvestableSwardBiomass(string plantName, string fractionType)",
                    "        {",
                    "            double amountWt = 0.0;",
                    "            double fraction = 0.0;",
                    "            foreach (var forage in forages.ModelsWithDigestibleBiomass)",
                    "            {",
                    "                if (plantName == \"All\" || forage.Name == plantName)",
                    "                {",
                    "                    foreach (var material in forage.Material) ",
                    "                    {",
                    "                        string liveDead = \"Dead\";",
                    "                        if (material.IsLive)",
                    "                            liveDead = \"Live\";",
                    "                            ",
                    "                        // consider only amounts toRemove",
                    "                        fractions.TryGetValue($\"{forage.Name}.Fraction{liveDead}ToRemove\", out fraction);",
                    "                        if ((fractionType == \"Total\") && (fraction > 0.0))",
                    "                        { // to return all biomass, for any organ that has some removable fraction",
                    "                            fraction = 1.0;",
                    "                        }",
                    "                        else if (RemoveAllBiomassIsEnabled && (fraction > 0.0))",
                    "                        { // theoretical to return, and remove, all biomass, but will assume a minimum of 5% left behind",
                    "                            fraction = 0.95;",
                    "                        }",
                    "",
                    "                        if (fractionType == \"Total\")",
                    "                            amountWt += material.Total.Wt * fraction;",
                    "                        else",
                    "                            amountWt += material.Consumable.Wt * fraction;",
                    "                    }",
                    "                }",
                    "            }",
                    "            ",
                    "            return amountWt;",
                    "        }",
                    "",
                    "        /// <summary>Triggers the actual biomass removal and gather DM and N amounts.</summary>",
                    "        /// <param name=\"amountToRemove\">The total DM amount to remove (g/m2)</param>",
                    "        /// <param name=\"removalType\">The type of removal (Cut, Graze, Harvest)</param>",
                    "        private void defoliateSward(double amountToRemove, string removalType)",
                    "        {",
                    "            // get the amounts of biomass and N before today's defoliation",
                    "            double preRemovalDM = standingSwardBiomassWt;",
                    "            double preRemovalN = standingSwardBiomassN;",
                    "            double fractionToRemove = 0.0;",
                    "",
                    "            // gather the actual biomass removal fractions, checking whether they need to be adjusted",
                    "            double totalHarvestableAmount = harvestableSwardBiomass(\"All\", \"Harvestable\");",
                    "            if (amountToRemove > 0.0)",
                    "            { // an amount was given for defoliation, adjust removal fractions for each species in order to remove the amount specified",
                    "                fractionToRemove = amountToRemove / totalHarvestableAmount;",
                    "            }",
                    "            else if (amountToRemove < 0.0)",
                    "            { // defoliation is not based on an amount, removal is determined simply by the removal fractions",
                    "                fractionToRemove = 1.0;",
                    "            }",
                    "",
                    "            for (int i = 0; i < swardSpeciesName.Length; i++)",
                    "            {",
                    "                speciesFraction[i] = harvestableSwardBiomass(swardSpeciesName[i], \"Harvestable\") / totalHarvestableAmount;",
                    "                if (swardSpeciesType[i] == \"PMF\")",
                    "                {",
                    "                    // check whether the plant is alive",
                    "                    bool speciesIsAlive = (bool)myZone.Get(swardSpeciesName[i]+\".IsEmerged\");",
                    "                    if (speciesIsAlive)",
                    "                    {",
                    "                        // set removal fractions (these overrides the default removals in the plant)",
                    "                        RemoveBiomass(swardSpeciesName[i], fractionToRemove);",
                    "",
                    "                    }",
                    "                }",
                    "                else",
                    "                {",
                    "                    // check whether the plant is alive",
                    "                    bool speciesIsAlive = (bool)myZone.Get(swardSpeciesName[i]+\".IsAlive\");",
                    "                    if (speciesIsAlive)",
                    "                    {",
                    "                        // set removal amount (needs to be in kg/ha)",
                    "                        double amountRequired = (double)myZone.Get(swardSpeciesName[i]+\".Harvestable.Wt\");",
                    "                        if (amountToRemove > 0.0)",
                    "                            amountRequired = amountToRemove * speciesFraction[i] * 10.0;",
                    "",
                    "                        // do the actual biomass removal",
                    "                        foreach (AgPasture.PastureSpecies species in AgPSpecies)",
                    "                        {",
                    "                            if(species.Name == swardSpeciesName[i])",
                    "                            {",
                    "                                species.RemoveBiomass(amount: amountRequired, type: \"SetRemoveAmount\");",
                    "                                break;",
                    "                            }",
                    "                        }",
                    "                    }",
                    "                }",
                    "            }",
                    "",
                    "            // get the amounts of biomass and N after today's defoliation",
                    "            double postRemovalDM = standingSwardBiomassWt;",
                    "            double postRemovalN = standingSwardBiomassN;",
                    "",
                    "            // get total defoliation (total plant stuff lost)",
                    "            DefoliatedWt = preRemovalDM - postRemovalDM;",
                    "            DefoliatedN = preRemovalN - postRemovalN;",
                    "",
                    "            // get amounts harvested, removed, and returned",
                    "            manageDefoliatedBiomass();",
                    "        }",
                    "",
                    "        /// <summary>Sets the biomass removal fractions for PMF plants.</summary>",
                    "        /// <param name=\"plantName\">The name of PMF species</param>",
                    "        /// <param name=\"fractionHarvestable\">The fraction of harvestable biomass to be removed (0-1)</param>",
                    "        private void RemoveBiomass(string plantName, double fractionHarvestable)",
                    "        {",
                    "            double fractionToRemove;",
                    "            double fractionToResidue;",
                    "            foreach (Plant species in PMFSpecies)",
                    "            {",
                    "                if ((species.Name == plantName) && (species.IsAlive))",
                    "                {",
                    "                    // set removal fractions (these overrides the default removals in the plant)",
                    "                    foreach (IOrgan organ in species.FindAllChildren<IOrgan>().OfType<IModel>().ToList())",
                    "                    {",
                    "                        // first get the removal for Live material",
                    "                        if (!fractions.TryGetValue(organ.Name + \".FractionLiveToRemove\", out fractionToRemove))",
                    "                            fractionToRemove = 0;",
                    "                        if (RemoveAllBiomassIsEnabled && (fractionToRemove > 0.0))",
                    "                        { // assuming that 5% is left behind",
                    "                            fractionToRemove = 0.95;",
                    "                        }",
                    "",
                    "                        fractionToRemove = fractionHarvestable * fractionToRemove;",
                    "                        fractionToRemove = Math.Min(1.0, fractionToRemove);",
                    "                        if (RemoveAllBiomassIsEnabled)",
                    "                        {",
                    "                            fractionToResidue = 0.0;",
                    "                        }",
                    "                        else",
                    "                        {",
                    "                            if (!fractions.TryGetValue(organ.Name + \".FractionLiveToResidue\", out fractionToResidue))",
                    "                                fractionToResidue = 0;",
                    "",
                    "                        }",
                    "",
                    "                        fractionToResidue = Math.Min(fractionHarvestable * fractionToResidue, 1.0 - fractionToRemove);",
                    "",
                    "                        (organ as IHasDamageableBiomass).RemoveBiomass(liveToRemove: fractionToRemove, liveToResidue: fractionToResidue);",
                    "",
                    "                        // then get the removal for Dead material",
                    "                        if (!fractions.TryGetValue(organ.Name + \".FractionDeadToRemove\", out fractionToRemove))",
                    "                            fractionToRemove = 0;",
                    "                        if (RemoveAllBiomassIsEnabled && (fractionToRemove > 0.0))",
                    "                        { // assuming that 5% is left behind",
                    "                            fractionToRemove = 0.95;",
                    "                        }",
                    "",
                    "                        fractionToRemove = fractionHarvestable * fractionToRemove;",
                    "                        fractionToRemove = Math.Min(1.0, fractionToRemove);",
                    "                        if (RemoveAllBiomassIsEnabled)",
                    "                        {",
                    "                            fractionToResidue = 0.0;",
                    "                        }",
                    "                        else",
                    "                        {",
                    "                            if (!fractions.TryGetValue(organ.Name + \".FractionDeadToResidue\", out fractionToResidue))",
                    "                                fractionToResidue = 0;",
                    "                        }",
                    "",
                    "                        fractionToResidue = Math.Min(fractionHarvestable * fractionToResidue, 1.0 - fractionToRemove);",
                    "                        ",
                    "                        (organ as IHasDamageableBiomass).RemoveBiomass(deadToRemove: fractionToRemove, deadToResidue: fractionToResidue);",
                    "",
                    "                    }",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        /// <summary>Gathers the DM and N amounts harvested, to be removed, and to be returned.</summary>",
                    "        private void manageDefoliatedBiomass()",
                    "        {",
                    "            double digestibilityStructural = 0.65;",
                    "            double digestibilityNonStrucutural = 1.0;",
                    "",
                    "            if (DefoliatedWt > 0.0)",
                    "            {",
                    "                HarvestedWt = 0.0;",
                    "                HarvestedN = 0.0;",
                    "                RemovedWt = 0.0;",
                    "                RemovedN = 0.0;",
                    "",
                    "                foreach (Plant species in PMFSpecies)",
                    "                {",
                    "                    if(species.AboveGround.Wt > 0.0)",
                    "                    {",
                    "                        // get the amount harvested (plant stuff removed from plants)",
                    "                        speciesHarvestedWt = 0.0;",
                    "                        speciesHarvestedN = 0.0;",
                    "                        foreach (IOrgan organ in species.FindAllChildren<IOrgan>().OfType<IModel>().ToList())",
                    "                        {",
                    "                            speciesHarvestedWt += (double)myZone.Get(species.Name+\".\"+organ.Name+\".Removed.Wt\");",
                    "                            speciesHarvestedN += (double)myZone.Get(species.Name+\".\"+organ.Name+\".Removed.N\");",
                    "                        }",
                    "",
                    "                        HarvestedWt += speciesHarvestedWt;",
                    "                        HarvestedN += speciesHarvestedN;",
                    "",
                    "                        // get the DM fraction to be removed",
                    "                        if(FractionDMToRemove>=0.0)",
                    "                        {",
                    "                            speciesFractionToRemove = FractionDMToRemove;",
                    "                        }",
                    "                        else",
                    "                        { // use digestibility to define the fraction",
                    "                            double fracStructural = species.AboveGround.StructuralWt/species.AboveGround.Wt;",
                    "                            speciesFractionToRemove = (1.0 - fracStructural)*digestibilityNonStrucutural + fracStructural*digestibilityStructural;",
                    "                            speciesFractionToRemove = Math.Min(1.0, Math.Max(0.0, speciesFractionToRemove));",
                    "                        }",
                    "",
                    "                        // get the amounts actually removed from field",
                    "                        RemovedWt += speciesHarvestedWt * speciesFractionToRemove;",
                    "                        RemovedN += speciesHarvestedN * FractionNToRemove;",
                    "                   }",
                    "                }",
                    "",
                    "                foreach (AgPasture.PastureSpecies species in AgPSpecies)",
                    "                {",
                    "                    if(species.AboveGroundWt > 0.0)",
                    "                    {",
                    "                        // get the amount harvested",
                    "                        speciesHarvestedWt = species.HarvestedWt*0.1;",
                    "                        speciesHarvestedN = species.HarvestedN*0.1;",
                    "                        HarvestedWt += speciesHarvestedWt;",
                    "                        HarvestedN += speciesHarvestedN;",
                    "",
                    "                        // get fraction to be removed",
                    "                        if(FractionDMToRemove>=0.0)",
                    "                        {",
                    "                            speciesFractionToRemove = FractionDMToRemove;",
                    "                        }",
                    "                        else",
                    "                        { // use digestibility to define the fraction",
                    "                            speciesFractionToRemove = species.HarvestedDigestibility;",
                    "                        }",
                    "",
                    "                        // get the amounts actually removed from field",
                    "                        RemovedWt += speciesHarvestedWt * speciesFractionToRemove;",
                    "                        RemovedN += speciesHarvestedN * FractionNToRemove;",
                    "                    }",
                    "                }",
                    "",
                    "                // get the amounts to be returned to the field (as residue or dung+urine)",
                    "                ReturnedWt = HarvestedWt - RemovedWt;",
                    "                ReturnedN = HarvestedN - RemovedN;",
                    "                if (ReturnType == ReturnAsTypes.AsDungUrine)",
                    "                {",
                    "                    if (NDungType == DungNContentTypes.DefineProportion)",
                    "                        NReturnedInDung = ReturnedN * ProportionN2Dung;",
                    "                    else",
                    "                        NReturnedInDung = Math.Min(ReturnedN, ReturnedWt * 0.4 / CNRatioDung);",
                    "                    NReturnedInDung = Math.Min(NReturnedInDung, ReturnedN);",
                    "                    NReturnedInUrine = ReturnedN - NReturnedInDung;",
                    "                }",
                    "                else",
                    "                {",
                    "                    NReturnedInDung = 0.0;",
                    "                    NReturnedInUrine = 0.0;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        /// <summary>Returns the material not removed off field as residue.</summary>",
                    "        private void returnResidues()",
                    "        {",
                    "            if ((ReturnedWt > 0.0) || (ReturnedN > 0.0))",
                    "            {",
                    "                PMF.BiomassRemovedType BiomassResidue = new PMF.BiomassRemovedType();",
                    "                string[] type = new string[] { \"Grass\" };",
                    "                float[] dltdm = new float[] { (float)(10.0 * ReturnedWt) };",
                    "                float[] dltn = new float[] { (float)(10.0 * ReturnedN) };",
                    "                float[] dltp = new float[] { 0.0f };",
                    "                float[] fraction = new float[] { 1.0f };     // fraction is always 1.0 here",
                    "",
                    "                BiomassResidue.crop_type = \"Grass\";",
                    "                BiomassResidue.dm_type = type;",
                    "                BiomassResidue.dlt_crop_dm = dltdm;",
                    "                BiomassResidue.dlt_dm_n = dltn;",
                    "                BiomassResidue.dlt_dm_p = dltp;",
                    "                BiomassResidue.fraction_to_residue = fraction;",
                    "                BiomassRemoved.Invoke(BiomassResidue);",
                    "            }",
                    "        }",
                    "",
                    "        /// <summary>Returns the material not removed off field as dung and urine).</summary>",
                    "        private void returnExcreta()",
                    "        {",
                    "            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))",
                    "            {",
                    "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                    "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                    "                float[] dltdm = new float[] { (float)(10.0 * ReturnedWt) };",
                    "                float[] dltn = new float[] { (float)(10.0 * NReturnedInDung) };",
                    "                float[] dltp = new float[] { 0.0f };",
                    "                float[] fraction = new float[] { 1.0f };     // fraction is always 1.0 here",
                    "",
                    "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                    "                BiomassDung.dm_type = type;",
                    "                BiomassDung.dlt_crop_dm = dltdm;",
                    "                BiomassDung.dlt_dm_n = dltn;",
                    "                BiomassDung.dlt_dm_p = dltp;",
                    "                BiomassDung.fraction_to_residue = fraction;",
                    "                BiomassRemoved.Invoke(BiomassDung);",
                    "            }",
                    "",
                    "            if (NReturnedInUrine > 0.0)",
                    "            {",
                    "                double[] myUrineDeposition = new double[soilPhysical.Thickness.Length];",
                    "                for (int z = 0; z < urineFraction.Length; z++)",
                    "                {",
                    "                    myUrineDeposition[z] = NReturnedInUrine * 10.0 * urineFraction[z];",
                    "                }",
                    "",
                    "                Urea.AddKgHaDelta(SoluteSetterType.Fertiliser, myUrineDeposition);",
                    "            }",
                    "        }",
                    "",
                    "        // Auxiliary bits and pieces  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
                    "",
                    "        /// <summary>Type of defoliation to use</summary>",
                    "        public enum DefoliationTypes",
                    "        {",
                    "            /// <summary>Cut</summary>",
                    "            Cut,",
                    "            /// <summary>Graze</summary>",
                    "            Graze,",
                    "            /// <summary>Harvest</summary>",
                    "            Harvest",
                    "        }",
                    "",
                    "        /// <summary>Flag how defoliations will be triggered</summary>",
                    "        public enum DefoliationTriggerTypes",
                    "        {",
                    "            /// <summary>Setting a fixed interval</summary>",
                    "            FixedInterval,",
                    "            /// <summary>Setting a target (minimum) inteval</summary>",
                    "            TargetInterval,",
                    "            /// <summary>Setting a target (maximum) standing biomass</summary>",
                    "            TargetStandingBiomass",
                    "        }",
                    "",
                    "        /// <summary>How the DM amount given is interpreted</summary>",
                    "        public enum DefoliateAmountTypes",
                    "        {",
                    "            /// <summary>Setting a DM amount to remove</summary>",
                    "            DMToRemove,",
                    "            /// <summary>Setting the residual DM amount</summary>",
                    "            ResidualDM,",
                    "            /// <summary>Remove according to crop's BiomassRemovalFractions</summary>",
                    "            None_UseDefoliationFractions",
                    "        }",
                    "",
                    "        /// <summary>Fraction of defoliated DM to remove from field</summary>",
                    "        public enum DMRemovalTypes",
                    "        {",
                    "            /// <summary>Remove all DM</summary>",
                    "            RemoveAll,",
                    "            /// <summary>Remove no DM</summary>",
                    "            RemoveNone,",
                    "            /// <summary>Remove a user-defined fraction</summary>",
                    "            UserDefinedFraction,",
                    "            /// <summary>Remove a fraction based on plant digestibility</summary>",
                    "            BasedOnDigestibility",
                    "        }",
                    "",
                    "        /// <summary>Fraction of N in the defoliated material to remove from field</summary>",
                    "        public enum NRemovalTypes",
                    "        {",
                    "            /// <summary>Remove all N</summary>",
                    "            RemoveAll,",
                    "            /// <summary>Remove no N</summary>",
                    "            RemoveNone,",
                    "            /// <summary>Remove a user-defined fraction</summary>",
                    "            UserDefinedFraction,",
                    "            /// <summary>Remove a fraction equal to DM removed</summary>",
                    "            ProportionalToDM",
                    "        }",
                    "",
                    "        /// <summary>Define how the non-removed material is returned to the field</summary>",
                    "        public enum ReturnAsTypes",
                    "        {",
                    "            /// <summary>Return plant material as residue</summary>",
                    "            AsResidue,",
                    "            /// <summary>Return meterial as dung and urine</summary>",
                    "            AsDungUrine",
                    "        }",
                    "",
                    "        /// <summary>Define how the proportion of N in dung is defined</summary>",
                    "        public enum DungNContentTypes",
                    "        {",
                    "            /// <summary>Define the proportion of N returned as dung</summary>",
                    "            DefineProportion,",
                    "            /// <summary>Define the C:N of dung</summary>",
                    "            DefineCNratio",
                    "        }",
                    "    }",
                    "}"
                  ],
                  "Parameters": [
                    {
                      "Key": "AutomaticManagementIsEnabled",
                      "Value": "True"
                    },
                    {
                      "Key": "DefoliationRotationStartDate",
                      "Value": "01/15/2000 00:00:00"
                    },
                    {
                      "Key": "DefoliationRotationEndDate",
                      "Value": "12/31/2100 00:00:00"
                    },
                    {
                      "Key": "DefoliationFractions",
                      "Value": "Leaf.FractionLiveToRemove=0.65, Leaf.FractionDeadToRemove=0.52, Petiole.FractionLiveToRemove=0.65, Petiole.FractionDeadToRemove=0.52, Stem.FractionLiveToRemove=0.68, Stem.FractionDeadToRemove=0.55, Inflorescence.FractionLiveToResidue=0.68, Nodule.FractionLiveToResidue=0.1, TapRoot.FractionLiveToResidue=0.03, Root.FractionLiveToResidue=0.05"
                    },
                    {
                      "Key": "DefoliationTriggerType",
                      "Value": "FixedInterval"
                    },
                    {
                      "Key": "IntervalBetweenDefoliations",
                      "Value": "21"
                    },
                    {
                      "Key": "TargetStandingBiomass",
                      "Value": "200"
                    },
                    {
                      "Key": "DurationOfEachDefoliation",
                      "Value": "1"
                    },
                    {
                      "Key": "RemoveAmountType",
                      "Value": "DMToRemove"
                    },
                    {
                      "Key": "AmountForEachDefoliation",
                      "Value": "500"
                    },
                    {
                      "Key": "RemoveAllBiomassIsEnabled",
                      "Value": "True"
                    },
                    {
                      "Key": "DMRemoveType",
                      "Value": "UserDefinedFraction"
                    },
                    {
                      "Key": "FractionDMToRemove",
                      "Value": "1"
                    },
                    {
                      "Key": "NRemoveType",
                      "Value": "UserDefinedFraction"
                    },
                    {
                      "Key": "FractionNToRemove",
                      "Value": "1"
                    },
                    {
                      "Key": "ReturnType",
                      "Value": "AsResidue"
                    },
                    {
                      "Key": "NDungType",
                      "Value": "DefineCNratio"
                    },
                    {
                      "Key": "ProportionN2Dung",
                      "Value": "0.4"
                    },
                    {
                      "Key": "CNRatioDung",
                      "Value": "20"
                    },
                    {
                      "Key": "UrineDepth",
                      "Value": "250"
                    }
                  ],
                  "Name": "DefoliationManager",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "CodeArray": [
                    "// This will be replaced by the \"ExtraVariables\" section in \"Replacements\"",
                    "",
                    "using Models.Soils;",
                    "using System.Linq;",
                    "using System;",
                    "using Models.Core;",
                    "",
                    "namespace Models",
                    "{",
                    "    [Serializable] ",
                    "    public class Script : Model",
                    "    {",
                    "    }",
                    "}"
                  ],
                  "Parameters": [],
                  "Name": "ExtraVariables",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "grass",
              "InitialResidueType": "grass",
              "InitialResidueMass": 1000.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 30.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": null,
              "ASCSubOrder": null,
              "SoilType": "Udic Haplustept (US),  Immature Pallic Soil (NZ)",
              "LocalName": "Paparua Deep Sandy Loam",
              "Site": "LURDF",
              "NearestTown": "Lincoln",
              "Region": "Canterbury",
              "State": null,
              "Country": "New Zealand",
              "NaturalVegetation": null,
              "ApsoilNumber": null,
              "Latitude": 0.0,
              "Longitude": 0.0,
              "LocationAccuracy": null,
              "YearOfSampling": null,
              "DataSource": "Adapted based on data from the NZ National Soils Database plus published data (Carey et al, 2002; Schwaertzel et al, 2011; Woods et al, 2016)",
              "Comments": "Different references name the soil at the site as either Templeton sandy loam or Paparua sandy loam (very similar soils)",
              "Name": "Soil",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    100.0,
                    120.0,
                    150.0,
                    230.0,
                    130.0,
                    250.0,
                    220.0,
                    300.0
                  ],
                  "PH": [
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    100.0,
                    120.0,
                    150.0,
                    230.0,
                    130.0,
                    250.0,
                    220.0,
                    300.0
                  ],
                  "ParticleSizeClay": [
                    17.8,
                    17.8,
                    15.9,
                    14.1,
                    7.3,
                    9.6,
                    7.0,
                    9.5
                  ],
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "Rocks": null,
                  "Texture": null,
                  "BD": [
                    1.154,
                    1.295,
                    1.441,
                    1.544,
                    1.505,
                    1.504,
                    1.517,
                    1.479
                  ],
                  "AirDry": [
                    0.051,
                    0.14,
                    0.129,
                    0.111,
                    0.08,
                    0.072,
                    0.085,
                    0.082
                  ],
                  "LL15": [
                    0.151,
                    0.146,
                    0.129,
                    0.111,
                    0.08,
                    0.072,
                    0.085,
                    0.082
                  ],
                  "DUL": [
                    0.338,
                    0.328,
                    0.279,
                    0.271,
                    0.244,
                    0.234,
                    0.254,
                    0.257
                  ],
                  "SAT": [
                    0.512,
                    0.469,
                    0.427,
                    0.394,
                    0.413,
                    0.406,
                    0.401,
                    0.413
                  ],
                  "KS": [
                    2559.2,
                    2142.3,
                    1019.5,
                    310.6,
                    434.9,
                    791.0,
                    744.1,
                    411.2
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": null,
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClayMetadata": null,
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.151,
                        0.146,
                        0.129,
                        0.111,
                        0.08,
                        0.072,
                        0.085,
                        0.082
                      ],
                      "KL": [
                        0.12,
                        0.11,
                        0.08,
                        0.05,
                        0.02,
                        0.005,
                        0.0,
                        0.0
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "RedCloverSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Oct",
                  "SummerU": 8.0,
                  "SummerCona": 4.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 5.0,
                  "WinterCona": 1.5,
                  "DiffusConst": 88.0,
                  "DiffusSlope": 35.0,
                  "Salb": 0.2,
                  "CN2Bare": 60.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": 0.0,
                  "CatchmentArea": 0.0,
                  "PSIDul": -100.0,
                  "Thickness": [
                    100.0,
                    120.0,
                    150.0,
                    230.0,
                    130.0,
                    250.0,
                    220.0,
                    300.0
                  ],
                  "SWCON": [
                    0.59,
                    0.59,
                    0.55,
                    0.48,
                    0.53,
                    0.5,
                    0.51,
                    0.45
                  ],
                  "KLAT": null,
                  "Name": "SoilWater",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 35.0,
                  "Thickness": [
                    100.0,
                    120.0,
                    150.0,
                    230.0,
                    130.0,
                    250.0,
                    220.0,
                    300.0
                  ],
                  "Carbon": [
                    2.94,
                    2.17,
                    0.99,
                    0.35,
                    0.24,
                    0.2,
                    0.15,
                    0.1
                  ],
                  "CarbonUnits": 0,
                  "SoilCNRatio": [
                    11.3,
                    11.3,
                    11.5,
                    11.75,
                    12.0,
                    12.25,
                    12.5,
                    12.5
                  ],
                  "FBiom": [
                    0.08,
                    0.055,
                    0.015,
                    0.009,
                    0.008,
                    0.007,
                    0.005,
                    0.005
                  ],
                  "FInert": [
                    0.3,
                    0.45,
                    0.72,
                    0.87,
                    0.95,
                    0.99,
                    0.995,
                    0.995
                  ],
                  "FOM": [
                    450.0,
                    412.5,
                    322.5,
                    150.0,
                    75.0,
                    45.0,
                    30.0,
                    15.0
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    100.0,
                    120.0,
                    150.0,
                    230.0,
                    130.0,
                    250.0,
                    220.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.29125,
                    0.2825,
                    0.24150000000000002,
                    0.23100000000000004,
                    0.20299999999999999,
                    0.1935,
                    0.21175,
                    0.21325
                  ],
                  "InitialPAWmm": 188.505,
                  "RelativeTo": "LL15",
                  "FilledFromTop": false,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    100.0,
                    120.0,
                    150.0,
                    230.0,
                    130.0,
                    250.0,
                    220.0,
                    300.0
                  ],
                  "InitialValues": [
                    11.10185956147655,
                    8.874791473427187,
                    4.055950983135478,
                    0.3667194742709636,
                    0.3667194742709608,
                    0.15159344482840426,
                    0.07292193491951118,
                    0.06692544505420907
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    100.0,
                    120.0,
                    150.0,
                    230.0,
                    130.0,
                    250.0,
                    220.0,
                    300.0
                  ],
                  "InitialValues": [
                    1.3877324451845687,
                    1.0031235177747662,
                    0.4227086737795264,
                    0.07334389485419221,
                    0.07334389485419243,
                    0.054769866343026476,
                    0.017000511230675516,
                    0.013385089010841966
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    100.0,
                    120.0,
                    150.0,
                    230.0,
                    130.0,
                    250.0,
                    220.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "RedClover",
              "ResourceName": "RedClover",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today as Date",
                "",
                "[RedClover].Population",
                "[RedClover].PlantType",
                "[RedClover].Leaf.RadiationIntercepted as InterceptedRadiation",
                "",
                "[Irrigation].IrrigationApplied as IrrigationApplied",
                "[Soil].SoilWater.Es as Evaporation",
                "[RedClover].Leaf.Transpiration as Transpiration",
                "[Soil].SoilWater.Drainage as Drainage",
                "[Soil].SoilWater.Runoff as Runoff",
                "sum([Soil].Water.MM) as TotalSWC",
                "sum([Soil].Physical.DULmm) as TotalDUL",
                "sum([Soil].Physical.LL15mm) as TotalLL15",
                "[Fertiliser].NitrogenApplied as FertiliserN",
                "([Soil].SoilWater.LeachNH4 + [Soil].SoilWater.LeachNO3) as LeachedN",
                "(-1*[RedClover].Root.NUptake) as UptakeN",
                "[RedClover].Nodule.NFixed as FixedN",
                "",
                "[RedClover].Total.Wt",
                "[RedClover].AboveGround.Wt",
                "[RedClover].BelowGround.Wt",
                "[RedClover].Leaf.Live.NConc",
                "[RedClover].Leaf.LAI",
                "[RedClover].Leaf.Live.Wt",
                "[RedClover].Stem.Live.Wt",
                "[RedClover].Inflorescence.Live.Wt",
                "[RedClover].Taproot.Live.Wt",
                "[RedClover].Root.Live.Wt",
                "",
                "[DefoliationManager].Script.DefoliatedWt as HarvestedWt"
              ],
              "EventNames": [
                "[Clock].DoReport"
              ],
              "GroupByVariableName": null,
              "Name": "Report",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Biomass",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 1,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "RedClover.Total.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Total",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16736653,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "RedClover.AboveGround.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "AboveGround",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -2793984,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "RedClover.BelowGround.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "BelowGround",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "PlantParts",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16736653,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "RedClover.Leaf.Live.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Leaf",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 2,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "RedClover.Stem.Live.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Stem",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "RedClover.Inflorescence.Live.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Inflorescence",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -990142,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "RedClover.Taproot.Live.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Taproot",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -2793984,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "RedClover.Root.Live.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Root",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 2,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Harvests",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16736653,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "HarvestedWt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Events",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 2,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "HarvestedWt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": true,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Cumulative",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Water",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16747854,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "TotalSWC",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "WaterContent",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "TotalDUL",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "DUL",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -2793984,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "TotalLL15",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "LL15",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}